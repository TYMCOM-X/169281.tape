PROGRAM BLACKJACK;

CONST
        SPACES = '       ';
        TWENTY_ONE = 21;
        MAX_CARDS_FOR_HAND = 6;
        CARD_WIDTH = 13;
        CARD_LENGTH = 8;
        NUMBER_OF_CARDS_IN_DECK = 52;
        NUMBER_OF_CARDS_IN_SUIT = 13;
        FIELD_SIZE = 27;
        FIELD_STRING_SIZE = 23;
        FIELD_ROWS = 3;
        FIELD_COLUMNS = 3;
        ESCAPE = CHR(27);
        HOME_UP = CHR(30);
        CLEAR_SCREEN = HOME_UP || ESCAPE || '*';
        CLEAR_LINE = ESCAPE || 'T';
        BELL = CHR(07);
        DOWN = CHR(10);

TYPE
        HAND_RESULTS = (DEALER_WINS,TIE,PLAYER_WINS);
        HAND_STATES = (NORMAL,DOUBLE,OVER);
        PARTICIPANTS = (DEALER,PLAYER);
        CARDS = ARRAY[1..NUMBER_OF_CARDS_IN_DECK] OF INTEGER;
        CARD_FORM = ARRAY[1..8] OF STRING[12];
        CARD_VALUES = (ZERO,ACE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,
            EIGHT,NINE,TEN,JACK,QUEEN,KING);
        CARD_SIDES = (FACE_UP,FACE_DOWN);
        SHUFFEL_TYPE = (FIRST_SHUFFEL,RE_SHUFFEL);
        COORD_TYPE = (ABSOLUTE,RELATIVE);
        SCRN_FLD_TYP = (DEALERS_SUM,PLAYERS_SUM,HAND_COUNT,INITIAL_BET,
            DOUBLE_DOWN,INSURANCE,INITIAL_FUNDS,CURRENT_FUNDS,GAIN_OR_LOSS,
            TRAILING);

VAR
        HOLE_CARD : INTEGER;
        DIGIT : ARRAY[0..9] OF CHAR := ('0','1','2','3','4','5','6',
            '7','8','9');
        VALUE : ARRAY[ACE..KING] OF INTEGER :=
            (1,2,3,4,5,6,7,8,9,10,10,10,10);
        BLANK_CARD : CARD_FORM := (
            ' ---------- ',
            '|          |',
            '|          |',
            '|          |',
            '|          |',
            '|          |',
            '|          |',
            ' ---------- ');
        FULL_CARD : CARD_FORM := (
            ' ---------- ',
            '|XXXXXXXXXX|',
            '|XXXXXXXXXX|',
            '|XXXXXXXXXX|',
            '|XXXXXXXXXX|',
            '|XXXXXXXXXX|',
            '|XXXXXXXXXX|',
            ' ---------- ');
        SUITS : ARRAY[1..4] OF ARRAY[1..2] OF STRING[4] := 
            ('(  )',' \/ ',' () ','()()',' /\ ','(  )',' /\ ',' \/ ');
        LEFT_TOP : ARRAY[ACE..KING] OF STRING[5] := (
            'ACE  ','2    ','3    ','4    ','5    ','6    ','7    ',
            '8    ','9    ','10   ','JACK ','QUEEN','KING ');
        RIGHT_BOTTOM : ARRAY[ACE..KING] OF STRING[5] := (
            '  ACE','    2','    3','    4','    5','    6','    7',
            '    8','    9','   10',' JACK','QUEEN',' KING');
        DECK : CARDS;
        PLAYED_CARD_CNT : INTEGER;
        CARD_CNT : ARRAY[DEALER..PLAYER] OF INTEGER;
        CARDS_HELD : ARRAY[DEALER..PLAYER] OF ARRAY[1..MAX_CARDS_FOR_HAND] OF
            CARD_VALUES;
        ERR : INTEGER;
        FIELD : ARRAY[DEALERS_SUM..GAIN_OR_LOSS] OF INTEGER :=
            (0,0,0,0,0,0,0,0,0);
        FIELD_NAMES : ARRAY[DEALERS_SUM..GAIN_OR_LOSS] OF 
            STRING[FIELD_STRING_SIZE] :=
            ('Dealer''s sum:         0','Player''s sum:         0',
            'Hand count:           0','Initial bet:       0.00',
            'Double down:       0.00','Insurance:         0.00',
            'Initial funds:     0.00','Current funds:     0.00',
            'Gain or loss:      0.00');

EXTERNAL PROCEDURE GTCHAR (VAR A : INTEGER);
EXTERNAL PROCEDURE NOCRLF;
EXTERNAL PROCEDURE PAUSE (SECONDS : INTEGER);

$PAGE NULL_STATEMENT
PROCEDURE NULL_STATEMENT;
BEGIN
ERR := 0;
END;

$PAGE FIRST_INITIALIZE_EVERYTHING
PROCEDURE FIRST_INITIALIZE_EVERYTHING;
BEGIN
NOCRLF;
OPEN (TTY);
REWRITE (TTY);
ERR := TRUNC(RANDOM(TIME()));
END;

$PAGE POSITION
PROCEDURE POSITION (ROW,COLUMN : INTEGER; KIND_OF_MOVE : COORD_TYPE);
BEGIN
CASE KIND_OF_MOVE OF
    ABSOLUTE:
        WRITE (TTY,ESCAPE,'=',CHR(ROW+31),CHR(COLUMN+31));
    OTHERS:
        NULL_STATEMENT;
END;
END;

$PAGE SCREEN
PROCEDURE SCREEN (OPTION : STRING[*]);
BEGIN
WRITE (TTY,OPTION);
END;

$PAGE SETUP_BLACKJACK_SCREEN
PROCEDURE SETUP_BLACKJACK_SCREEN;
VAR     R,C,ROW,COLUMN : INTEGER;
        FLD : SCRN_FLD_TYP;
BEGIN
SCREEN(CLEAR_SCREEN);
POSITION (1,1,ABSOLUTE);
WRITE (TTY,'W H I T N E Y '' S          C O M P U T E R I Z E D          ',
    'B L A C K J A C K');
FLD := DEALERS_SUM;
FOR C := 1 TO FIELD_COLUMNS DO
    FOR R := 1 TO FIELD_ROWS DO
        BEGIN
        ROW := 18 + R;
        COLUMN := C*FIELD_SIZE - FIELD_SIZE + 1;
        POSITION (ROW,COLUMN,ABSOLUTE);
        WRITE (TTY,FIELD_NAMES[FLD]);
        FLD := SUCC(FLD);
        END;
END;

$PAGE PROMPT
PROCEDURE PROMPT (LINE : STRING[*]);
BEGIN
POSITION (23,1,ABSOLUTE);
SCREEN(CLEAR_LINE);
POSITION (23,1,ABSOLUTE);
WRITE (TTY,LINE);
BREAK (TTY);
END;

$PAGE INPUT_ERROR
FUNCTION INPUT_ERROR : BOOLEAN;
BEGIN
INPUT_ERROR := IOSTATUS(TTY) <> IO_OK;
END;

$PAGE PRINT_DOLLAR_VALUE
PROCEDURE PRINT_DOLLAR_VALUE (ROW,COLUMN,AMT : INTEGER);
VAR     DOLLARS,DIMES,PENNIES : INTEGER;
        DOLLAR_STRING : STRING[10];
        ACTUAL_COLUMN : INTEGER;
BEGIN
DOLLARS := TRUNC(AMT/100);
DIMES := TRUNC((AMT-DOLLARS*100)/10);
PENNIES := AMT - DOLLARS*100 - DIMES*10;
PUTSTRING (DOLLAR_STRING,DOLLARS,'.',DIGIT[DIMES],DIGIT[PENNIES]);
IF LENGTH(DOLLAR_STRING) < 7 THEN
    DOLLAR_STRING := SUBSTR(SPACES,1,7-LENGTH(DOLLAR_STRING)) ||
        DOLLAR_STRING;
ACTUAL_COLUMN := COLUMN + FIELD_STRING_SIZE - LENGTH(DOLLAR_STRING);
POSITION (ROW,ACTUAL_COLUMN,ABSOLUTE);
WRITE (TTY,DOLLAR_STRING);
END;

$PAGE UPDATE_FIELD
PROCEDURE UPDATE_FIELD (FLD : SCRN_FLD_TYP; NEW_VALUE : INTEGER);
VAR     ROW,COLUMN : INTEGER;
        SUM_STRING : STRING[20];
BEGIN
ROW := ORD(FLD) MOD 3 + 19;
COLUMN := TRUNC(ORD(FLD)/3) * FIELD_SIZE + 1;
CASE FLD OF
    DEALERS_SUM,PLAYERS_SUM:
        BEGIN
        PUTSTRING(SUM_STRING,ABS(NEW_VALUE));
        IF NEW_VALUE < 0 THEN
            SUM_STRING := ' Soft' || SUM_STRING
        ELSE
            SUM_STRING := '     ' || SUM_STRING;
        COLUMN := COLUMN + FIELD_STRING_SIZE - LENGTH(SUM_STRING);
        POSITION (ROW,COLUMN,ABSOLUTE);
        WRITE (TTY,SUM_STRING);
        END;
    HAND_COUNT:
        BEGIN
        PUTSTRING (SUM_STRING,NEW_VALUE);
        COLUMN := COLUMN + FIELD_STRING_SIZE - LENGTH(SUM_STRING);
        POSITION (ROW,COLUMN,ABSOLUTE);
        WRITE (TTY,SUM_STRING);
        END;
    CURRENT_FUNDS:
        BEGIN
        PRINT_DOLLAR_VALUE (ROW,COLUMN,NEW_VALUE);
        FIELD[GAIN_OR_LOSS] := NEW_VALUE - FIELD[INITIAL_FUNDS];
        PRINT_DOLLAR_VALUE (ROW+1,COLUMN,FIELD[GAIN_OR_LOSS]);
        END;
    OTHERS:
        PRINT_DOLLAR_VALUE (ROW,COLUMN,NEW_VALUE);
END;
FIELD[FLD] := NEW_VALUE;
END;

$PAGE ASK_USER_FOR_INITIAL_FUNDS
PROCEDURE ASK_USER_FOR_INITIAL_FUNDS;
VAR     AMT : INTEGER;
        REAL_AMT : REAL;
BEGIN
REAL_AMT := 0.0;
WHILE (REAL_AMT = 0.0) OR (INPUT_ERROR) DO
    BEGIN
    PROMPT ('How many dollars do you want to start with? ');
    READLN (TTY); READ (TTY,REAL_AMT);
    IF (REAL_AMT < 2.0) OR (REAL_AMT > 1000.0) THEN
        REAL_AMT := 0.0;
    END;
AMT := TRUNC(REAL_AMT*100.0);
UPDATE_FIELD (INITIAL_FUNDS,AMT);
UPDATE_FIELD (CURRENT_FUNDS,AMT);
END;

$PAGE SHUFFEL_CARDS
PROCEDURE SHUFFEL_CARDS (TYPE_OF_SHUFFEL : SHUFFEL_TYPE);
VAR     CARD,CARD_PICKED,LAST_CARD,SHUFFELED_CARD_CNT : INTEGER;
        NEW_DECK : CARDS;
BEGIN
CASE TYPE_OF_SHUFFEL OF
    FIRST_SHUFFEL:
        PROMPT ('A new deck has been opened and is now being shuffeled');
    RE_SHUFFEL:
        PROMPT ('End of deck reached.  Re-shuffeling cards');
END;
FOR CARD := 1 TO NUMBER_OF_CARDS_IN_DECK DO
    NEW_DECK[CARD] := CARD;
SHUFFELED_CARD_CNT := 0;
WHILE SHUFFELED_CARD_CNT < NUMBER_OF_CARDS_IN_DECK DO
    BEGIN
    LAST_CARD := NUMBER_OF_CARDS_IN_DECK - SHUFFELED_CARD_CNT;
    CARD_PICKED := TRUNC(RANDOM()*LAST_CARD + 1);
    DECK[SHUFFELED_CARD_CNT + 1] := NEW_DECK[CARD_PICKED];
    IF CARD_PICKED <> LAST_CARD THEN
        FOR CARD := CARD_PICKED TO LAST_CARD - 1 DO
            NEW_DECK[CARD] := NEW_DECK[CARD + 1];
    SHUFFELED_CARD_CNT := SHUFFELED_CARD_CNT + 1;
    END;
PLAYED_CARD_CNT := 0;
PAUSE (5);
END;

PROCEDURE PRINT_WAGER_PROMPT;
BEGIN
POSITION (23,65,ABSOLUTE);
WRITE (TTY,'Your bet? ');
BREAK (TTY);
END;

$PAGE GET_AMOUNT_TO_BE_WAGERED
PROCEDURE GET_AMOUNT_TO_BE_WAGERED (VAR AMT : INTEGER);
VAR     REAL_AMT : REAL;
        POS : INTEGER;
BEGIN
REAL_AMT := 0.0;
WHILE (REAL_AMT = 0.0) OR (INPUT_ERROR) DO
    BEGIN
    PRINT_WAGER_PROMPT;
    READLN (TTY); READ (TTY,REAL_AMT);
    IF (REAL_AMT < 2.0) OR (REAL_AMT*100.0 > FIELD[CURRENT_FUNDS]) THEN
        REAL_AMT := 0.0;
    END;
AMT := TRUNC(REAL_AMT*100);
(**********TAKE OUT***********)
POS := 1;
WHILE NOT EOLN(TTY) DO
    BEGIN
    READ (TTY,DECK[POS]);
    POS := POS + 1;
    PLAYED_CARD_CNT := 0;
    END;
(**********TAKE OUT***********)
END;

$PAGE GET_NEXT_CARD_ON_DECK
PROCEDURE GET_NEXT_CARD_ON_DECK (VAR CARD : INTEGER);
BEGIN
IF PLAYED_CARD_CNT = NUMBER_OF_CARDS_IN_DECK THEN
    SHUFFEL_CARDS (RE_SHUFFEL);
CARD := DECK[PLAYED_CARD_CNT + 1];
PLAYED_CARD_CNT := PLAYED_CARD_CNT + 1;
END;

$PAGE TYPE_CARD
PROCEDURE TYPE_CARD (VAR ROW,COL : INTEGER;
    VAR CARD_TO_PRINT : CARD_FORM);
VAR     I : INTEGER;
BEGIN
FOR I := 1 TO 8 DO
    BEGIN
    POSITION (ROW,COL,ABSOLUTE);
    WRITE (TTY,CARD_TO_PRINT[I]);
    ROW := ROW + 1;
    END;
END;

$PAGE DISPLAY_CARD
PROCEDURE DISPLAY_CARD (PERSON : PARTICIPANTS; CARD : INTEGER;
    FACE_SIDE : CARD_SIDES);
VAR     CARD_TO_PRINT : CARD_FORM;
        CARD_COLUMN,CARD_ROW,SUIT : INTEGER;
        CARD_VALUE : CARD_VALUES;
BEGIN
CARD_COLUMN := CARD_CNT[PERSON] - 1;
CARD_COLUMN := CARD_COLUMN * CARD_WIDTH + 1;
CARD_ROW := ORD(PERSON) * CARD_LENGTH + 3;
SUIT := TRUNC((CARD-1)/NUMBER_OF_CARDS_IN_SUIT) + 1;
CARD_VALUE := CARD_VALUES((CARD-1) MOD NUMBER_OF_CARDS_IN_SUIT + 1);
CASE FACE_SIDE OF
    FACE_DOWN:
        CARD_TO_PRINT := FULL_CARD;
    FACE_UP:
        BEGIN
        CARD_TO_PRINT := BLANK_CARD;
        SUBSTR(CARD_TO_PRINT[4],5,4) := SUITS[SUIT,1];
        SUBSTR(CARD_TO_PRINT[5],5,4) := SUITS[SUIT,2];
        SUBSTR(CARD_TO_PRINT[2],3,5) := LEFT_TOP[CARD_VALUE];
        SUBSTR(CARD_TO_PRINT[7],6,5) := RIGHT_BOTTOM[CARD_VALUE];
        END;
END;
TYPE_CARD (CARD_ROW,CARD_COLUMN,CARD_TO_PRINT);
END;

$PAGE SUM_UP_VALUE_OF_PERSONS_CARDS
PROCEDURE SUM_UP_VALUE_OF_PERSONS_CARDS (PERSON : PARTICIPANTS);
VAR     SOFT : BOOLEAN;
        SUM,I : INTEGER;
BEGIN
SUM := 0;
FOR I := 1 TO CARD_CNT[PERSON] DO
    SUM := SUM + VALUE[CARDS_HELD[PERSON,I]];
SOFT := FALSE;
I := 1;
WHILE (I <= CARD_CNT[PERSON]) AND (SUM <= 11) DO
    BEGIN
    IF VALUE[CARDS_HELD[PERSON,I]] = 1 THEN
        BEGIN
        SUM := SUM + 10;
        SOFT := TRUE;
        END;
    I := I + 1;
    END;
IF SOFT THEN SUM := -SUM;
FIELD[SCRN_FLD_TYP(ORD(PERSON))] := SUM;
END;

$PAGE GIVE_A_CARD_TO
PROCEDURE GIVE_A_CARD_TO (PERSON : PARTICIPANTS; FACE_SIDE : CARD_SIDES);
VAR     CARD : INTEGER;
BEGIN
GET_NEXT_CARD_ON_DECK (CARD);
CARDS_HELD[PERSON,CARD_CNT[PERSON]+1] :=
    CARD_VALUES((CARD-1) MOD NUMBER_OF_CARDS_IN_SUIT + 1);
CARD_CNT[PERSON] := CARD_CNT[PERSON] + 1;
DISPLAY_CARD(PERSON,CARD,FACE_SIDE);
SUM_UP_VALUE_OF_PERSONS_CARDS(PERSON);
IF (PERSON = DEALER) AND (CARD_CNT[DEALER] = 1) THEN
    HOLE_CARD := CARD;
END;

$PAGE DEAL_OUT_FOUR_CARDS
PROCEDURE DEAL_OUT_FOUR_CARDS;
VAR     CARD : INTEGER;
BEGIN
CARD_CNT[DEALER] := 0;
CARD_CNT[PLAYER] := 0;
GIVE_A_CARD_TO (DEALER,FACE_DOWN);
GIVE_A_CARD_TO (PLAYER,FACE_UP);
GIVE_A_CARD_TO (DEALER,FACE_UP);
GIVE_A_CARD_TO (PLAYER,FACE_UP);
UPDATE_FIELD (PLAYERS_SUM,FIELD[PLAYERS_SUM]);
END;

$PAGE GET_RID_OF_THE_OLD_CARDS
PROCEDURE GET_RID_OF_THE_OLD_CARDS;
VAR     I : INTEGER;
BEGIN
POSITION (3,1,ABSOLUTE);
IF FIELD[HAND_COUNT] <> 1 THEN
    FOR I := 3 TO 18 DO
        BEGIN
        SCREEN (CLEAR_LINE);
        SCREEN (DOWN);
        END;
END;

$PAGE DEALER_SUM
FUNCTION DEALER_SUM : INTEGER;
BEGIN
DEALER_SUM := ABS(FIELD[DEALERS_SUM]);
END;

$PAGE PLAYER_SUM
FUNCTION PLAYER_SUM : INTEGER;
BEGIN
PLAYER_SUM := ABS(FIELD[PLAYERS_SUM]);
END;

$PAGE DEALER_HAS_ACE_SHOWING
FUNCTION DEALER_HAS_ACE_SHOWING : BOOLEAN;
BEGIN
DEALER_HAS_ACE_SHOWING := CARDS_HELD[DEALER,2] = ACE;
END;

$PAGE DOUBLE_DOWN_POSSIBILITY
FUNCTION DOUBLE_DOWN_POSSIBILITY : BOOLEAN;
BEGIN
DOUBLE_DOWN_POSSIBILITY := (PLAYER_SUM = 10) OR (PLAYER_SUM = 11);
END;

$PAGE YES
FUNCTION YES : BOOLEAN;
VAR     RESPONSE : STRING[10];
        VALID_RESPONSE : BOOLEAN;
        CHAR_TYPED : INTEGER;
BEGIN
REPEAT
    VALID_RESPONSE := TRUE;
    GTCHAR(CHAR_TYPED);
    IF (CHAR_TYPED = 89) OR (CHAR_TYPED = 121) THEN
        YES := TRUE
    ELSE
        IF (CHAR_TYPED = 78) OR (CHAR_TYPED = 110) THEN
            YES := FALSE
        ELSE
            VALID_RESPONSE := FALSE;
    IF NOT VALID_RESPONSE THEN
        PROMPT ('Enter Y or N: ');
UNTIL VALID_RESPONSE;
END;

$PAGE USER_DOES_NOT_HAVE_ENOUGH_TO_BUY_INSURANCE
FUNCTION USER_DOES_NOT_HAVE_ENOUGH_TO_BUY_INSURANCE : BOOLEAN;
BEGIN
USER_DOES_NOT_HAVE_ENOUGH_TO_BUY_INSURANCE := FIELD[CURRENT_FUNDS] <
    TRUNC(FIELD[INITIAL_BET]/2);
END;

$PAGE DEALERS_HOLE_CARD_IS_A_TEN_CARD
FUNCTION DEALERS_HOLE_CARD_IS_A_TEN_CARD : BOOLEAN;
BEGIN
DEALERS_HOLE_CARD_IS_A_TEN_CARD := DEALER_SUM = TWENTY_ONE;
END;

$PAGE TURN_OVER_DEALERS_HOLE_CARD
PROCEDURE TURN_OVER_DEALERS_HOLE_CARD;
BEGIN
CARD_CNT[DEALER] := 1;
DISPLAY_CARD (DEALER,HOLE_CARD,FACE_UP);
CARD_CNT[DEALER] := 2;
END;

$PAGE POSSIBLE_INSURANCE_PURCHASE
PROCEDURE POSSIBLE_INSURANCE_PURCHASE (VAR HAND_STATE : HAND_STATES);
VAR     INSURANCE_BOUGHT : BOOLEAN;
BEGIN
HAND_STATE := NORMAL;
INSURANCE_BOUGHT := FALSE;
IF USER_DOES_NOT_HAVE_ENOUGH_TO_BUY_INSURANCE THEN
    BEGIN
    PROMPT ('You don''t even have enough money to buy insurance');
    PAUSE (4);
    END
ELSE
    BEGIN
    PROMPT ('Would you like to buy insurance? ');
    IF YES THEN
        BEGIN
        UPDATE_FIELD (INSURANCE,TRUNC(FIELD[INITIAL_BET]/2));
        UPDATE_FIELD (CURRENT_FUNDS,FIELD[CURRENT_FUNDS] - FIELD[INSURANCE]);
        INSURANCE_BOUGHT := TRUE;
        END;
    END;
IF DEALERS_HOLE_CARD_IS_A_TEN_CARD THEN
    BEGIN
    TURN_OVER_DEALERS_HOLE_CARD;
    IF INSURANCE_BOUGHT THEN
        BEGIN
        PROMPT ('Dealer has Blackjack.  Your insurance pays 2 to 1.');
        UPDATE_FIELD (CURRENT_FUNDS,FIELD[CURRENT_FUNDS] +
            FIELD[INITIAL_BET]*2);
        END
    ELSE
        IF PLAYER_SUM = TWENTY_ONE THEN
            BEGIN
            PROMPT ('We both have Blackjack.  You get your bet back.');
            UPDATE_FIELD (CURRENT_FUNDS,FIELD[CURRENT_FUNDS] +
                FIELD[INITIAL_BET]);
            END
        ELSE
            PROMPT ('Dealer has Blackjack.  No insurance so you lose.');
    HAND_STATE := OVER;
    END
ELSE
    IF INSURANCE_BOUGHT THEN
        PROMPT ('Dealer does not have Blackjack.  You lose your insurance.')
    ELSE
        PROMPT ('Dealer does not have Blackjack.  You are lucky.');
PAUSE (4);
END;

$PAGE PLAYER_HAS_BLACKJACK
PROCEDURE PLAYER_HAS_BLACKJACK;
BEGIN
PROMPT ('You have Blackjack which pays 2.5 to 1.');
SCREEN (BELL);
UPDATE_FIELD (CURRENT_FUNDS,FIELD[CURRENT_FUNDS] +
    TRUNC(FIELD[INITIAL_BET]*2.5));
PAUSE (4);
TURN_OVER_DEALERS_HOLE_CARD;
END;

FUNCTION USER_LACKS_FUNDS_TO_DOUBLE_DOWN : BOOLEAN;
BEGIN
USER_LACKS_FUNDS_TO_DOUBLE_DOWN := FIELD[CURRENT_FUNDS] < FIELD[INITIAL_BET];
END;

PROCEDURE POSSIBLE_DOUBLE_DOWN (VAR HAND_STATE : HAND_STATES);
BEGIN
HAND_STATE := NORMAL;
IF USER_LACKS_FUNDS_TO_DOUBLE_DOWN THEN
    BEGIN
    PROMPT ('You are so low on funds you can not double down.');
    PAUSE (4);
    END
ELSE
    BEGIN
    PROMPT ('Double down? ');
    IF YES THEN
        BEGIN
        UPDATE_FIELD(DOUBLE_DOWN,FIELD[INITIAL_BET]);
        UPDATE_FIELD(CURRENT_FUNDS,FIELD[CURRENT_FUNDS] - 
            FIELD[INITIAL_BET]);
        GIVE_A_CARD_TO (PLAYER,FACE_UP);
        HAND_STATE := DOUBLE;
        UPDATE_FIELD(PLAYERS_SUM,PLAYER_SUM);
        END;
    END;
END;

PROCEDURE LET_PLAYER_HIT_HIS_HAND (VAR HAND_STATE : HAND_STATES);
VAR     YES_RESPONSE : BOOLEAN;
BEGIN
REPEAT
    PROMPT ('Hit? ');
    YES_RESPONSE := YES;
    IF YES_RESPONSE THEN
        BEGIN
        GIVE_A_CARD_TO (PLAYER,FACE_UP);
        UPDATE_FIELD (PLAYERS_SUM,PLAYER_SUM);
        END;
UNTIL (NOT YES_RESPONSE) OR (PLAYER_SUM > TWENTY_ONE) OR
    (CARD_CNT[PLAYER] = 6);

IF (PLAYER_SUM <= TWENTY_ONE) AND (CARD_CNT[PLAYER] = 6) THEN
    BEGIN
    PROMPT ('You have drawn six cards without busting, so you win.');
    UPDATE_FIELD (CURRENT_FUNDS,FIELD[CURRENT_FUNDS]+FIELD[INITIAL_BET]);
    HAND_STATE := OVER;
    TURN_OVER_DEALERS_HOLE_CARD;
    PAUSE (4);
    END;
END;

PROCEDURE TAKE_HIS_MONEY_AND_RUN;
BEGIN
PROMPT ('You have just busted.');
TURN_OVER_DEALERS_HOLE_CARD;
END;

FUNCTION SOFT (PERSON : PARTICIPANTS) : BOOLEAN;
BEGIN
SOFT := FIELD[SCRN_FLD_TYP(ORD(PERSON))] < 0;
END;

FUNCTION HARD (PERSON : PARTICIPANTS) : BOOLEAN;
BEGIN
HARD := NOT SOFT(PERSON);
END;

PROCEDURE PLAY_OUT_DEALERS_HAND;
BEGIN
TURN_OVER_DEALERS_HOLE_CARD;
UPDATE_FIELD (DEALERS_SUM,FIELD[DEALERS_SUM]);
PAUSE (1);
WHILE (CARD_CNT[DEALER] < 6) AND (((HARD(DEALER)) AND (DEALER_SUM < 17)) OR
    ((SOFT(DEALER)) AND (DEALER_SUM < 18))) DO
    BEGIN
    GIVE_A_CARD_TO (DEALER,FACE_UP);
    UPDATE_FIELD (DEALERS_SUM,FIELD[DEALERS_SUM]);
    PAUSE (1);
    END;
END;

FUNCTION HAND_COMPARISON : HAND_RESULTS;
BEGIN
IF DEALER_SUM = PLAYER_SUM THEN
    HAND_COMPARISON := TIE
ELSE
    IF (DEALER_SUM > PLAYER_SUM) AND (DEALER_SUM <= 21) THEN
        HAND_COMPARISON := DEALER_WINS
    ELSE
        HAND_COMPARISON := PLAYER_WINS;
END;

FUNCTION DEALER_HAS_TEN_SHOWING : BOOLEAN;
BEGIN
DEALER_HAS_TEN_SHOWING := (CARDS_HELD[DEALER,2] = TEN) OR
    (CARDS_HELD[DEALER,2] = JACK) OR
    (CARDS_HELD[DEALER,2] = QUEEN) OR
    (CARDS_HELD[DEALER,2] = KING);
END;

PROCEDURE POSSIBLE_BLACKJACK (VAR HAND_STATE : HAND_STATES);
BEGIN
IF (DEALER_SUM = TWENTY_ONE) AND (PLAYER_SUM <> TWENTY_ONE) THEN
    BEGIN
    TURN_OVER_DEALERS_HOLE_CARD;
    PROMPT ('Dehas Blackjack.  You lose.');
    HAND_STATE := OVER;
    END
ELSE
    IF (DEALER_SUM = TWENTY_ONE) AND (PLAYER_SUM = TWENTY_ONE) THEN
        BEGIN
        TURN_OVER_DEALERS_HOLE_CARD;
        PROMPT ('We both have blackjack.  You get your bet back.');
        UPDATE_FIELD (CURRENT_FUNDS,FIELD[CURRENT_FUNDS] +
            FIELD[INITIAL_BET]);
        HAND_STATE := OVER;
        END;
END;

$PAGE FINISH_OFF_HAND
PROCEDURE FINISH_OFF_HAND;
VAR     HAND_STATE : HAND_STATES;
BEGIN
HAND_STATE := NORMAL;
IF DEALER_HAS_ACE_SHOWING THEN
    POSSIBLE_INSURANCE_PURCHASE (HAND_STATE);
IF DEALER_HAS_TEN_SHOWING THEN
    POSSIBLE_BLACKJACK (HAND_STATE);
IF HAND_STATE <> OVER THEN
    IF PLAYER_SUM = TWENTY_ONE THEN
        PLAYER_HAS_BLACKJACK
    ELSE
        BEGIN
        IF DOUBLE_DOWN_POSSIBILITY THEN
            POSSIBLE_DOUBLE_DOWN (HAND_STATE);
        IF HAND_STATE <> OVER THEN
            BEGIN
            IF HAND_STATE <> DOUBLE THEN
                LET_PLAYER_HIT_HIS_HAND (HAND_STATE);

            IF HAND_STATE <> OVER THEN
                IF PLAYER_SUM > 21 THEN
                    TAKE_HIS_MONEY_AND_RUN
                ELSE
                    BEGIN
                    PLAY_OUT_DEALERS_HAND;
                    CASE HAND_COMPARISON OF
                        DEALER_WINS:
                            PROMPT ('Too bad.  You lose.');
                        TIE:
                            BEGIN
                            PROMPT ('Push.  You get your money back.');
                            UPDATE_FIELD (CURRENT_FUNDS,FIELD[CURRENT_FUNDS] +
                                FIELD[INITIAL_BET] + FIELD[DOUBLE_DOWN]);
                            END;
                        PLAYER_WINS:
                            BEGIN
                            PROMPT ('You win.');
                            UPDATE_FIELD (CURRENT_FUNDS,FIELD[CURRENT_FUNDS] +
                                FIELD[INITIAL_BET]*2 +
                                FIELD[DOUBLE_DOWN]*2);
                            END;
                        END;
                    END;
            END;
        END;
END;

$PAGE PLAY_THE_GAME
PROCEDURE PLAY_THE_GAME;
VAR     AMT : INTEGER;
BEGIN
WHILE FIELD[CURRENT_FUNDS] >= 200 DO
    BEGIN
        GET_AMOUNT_TO_BE_WAGERED (AMT);
        UPDATE_FIELD (HAND_COUNT,FIELD[HAND_COUNT]+1);
        UPDATE_FIELD (INITIAL_BET,AMT);
        UPDATE_FIELD (CURRENT_FUNDS,FIELD[CURRENT_FUNDS]-AMT);
        UPDATE_FIELD (PLAYERS_SUM,0);
        UPDATE_FIELD (DEALERS_SUM,0);
        UPDATE_FIELD (INSURANCE,0);
        UPDATE_FIELD (DOUBLE_DOWN,0);
        GET_RID_OF_THE_OLD_CARDS;
        DEAL_OUT_FOUR_CARDS;
        FINISH_OFF_HAND;
        IF PLAYED_CARD_CNT >= 44 THEN
            SHUFFEL_CARDS (RE_SHUFFEL);
    END;
END;

PROCEDURE TYPLN (MSG : STRING[*]);
BEGIN
WRITELN (TTY,MSG); BREAK(TTY);
END;

PROCEDURE SKIP_BREAK_AND_WAIT (SECONDS : INTEGER);
VAR     I,J,K : INTEGER;
BEGIN
TYPLN ('');
BREAK (TTY);
END;

PROCEDURE WELCOME_THE_USER_TO_THE_CASINO;
VAR     STR : STRING[1];
BEGIN
WRITELN (TTY);
WRITE (TTY,'Would you like instructions? '); BREAK(TTY);
IF YES THEN
    BEGIN
TYPLN(CLEAR_SCREEN);
    POSITION (2,24,ABSOLUTE);
    TYPLN ('B L A C K J A C K');
    TYPLN ('');
    TYPLN ('');
    TYPLN ('Welcome to  the  game  of  Blackjack  at  Whitney''s  underground');
    TYPLN ('computerized  Casino.   We here at Whitney''s Casino have nothing');
    TYPLN ('against counters so we use one 52 card deck, shuffling only when');
    TYPLN ('we  get near the end of the deck.  The house rules for Blackjack');
    TYPLN ('are:');
    SKIP_BREAK_AND_WAIT (12);
    TYPLN ('Blackjack pays one and a half times your bet');
    SKIP_BREAK_AND_WAIT (4);
    TYPLN ('Insurance pays two to one if the dealer has Blackjack');
    SKIP_BREAK_AND_WAIT (4);
    TYPLN ('You can double down on two cards showing 10 or 11');
    SKIP_BREAK_AND_WAIT (4);
    TYPLN ('Sorry you can not split your pairs');
    SKIP_BREAK_AND_WAIT (4);
    TYPLN ('If you draw six cards without busting you automatically win');
    SKIP_BREAK_AND_WAIT (4);
    TYPLN ('Minimum bet is two dollars and you can not bet on credit');
    SKIP_BREAK_AND_WAIT (4);
    WRITE (TTY,'Enter carriage return to start the game'); BREAK (TTY);
    READLN (TTY);
    END;
END;

BEGIN
FIRST_INITIALIZE_EVERYTHING;
WELCOME_THE_USER_TO_THE_CASINO;
SETUP_BLACKJACK_SCREEN;
ASK_USER_FOR_INITIAL_FUNDS;
SHUFFEL_CARDS (FIRST_SHUFFEL);
PLAY_THE_GAME;
SCREEN(CLEAR_SCREEN);
END.
 H (