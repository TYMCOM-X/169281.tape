LOOP - A group of repeated instructions.  A way to go back and repeat the same steps s rerunning the program.  Can be done multiple
times.

WHILE/WEND - a way to form a loop.  Each WHILE must have a corres.  WEND.  Each time a WHILE is encountered a condition is
evaluated.  When the WEND is encountered, control is again passed to the WHILE and the condition is again evaluated.  If the
condition is true the loop is executed again; if it is false, control will pass to the next statement following the WEND.
WHILE/WEND stmts should be aligned with each other; stmts in between should be indented.  Each WHILE must have a WEND.  Each WEND
will be matched with the last unmatched WHILE stmt regardless of indentation.

COMPARING STRINGS - string variables can be compared to other string var. or str. literals enclosed in quotation marks. The 
comparison begins with the leftmost char. and proceeds one char. at a time from L to R.  As soon as a char. in one string is not
equal to the corresponding character in the 2nd string, the comparison is terminated & the string c the lower ranking char. is
judged less than the other. The determination of which character is less than another is made based on internal ASCII code, which
has an established order for all letters, #s and spec. char.

ITERATION - execution of the body of the loop.  Can exit loop any of 3 ways:  1.  "Do you wish to continue?"  2.  testing for a
particular input value  3.  using a counter.

INITIALISING VALUES - LET ANS$ = "YES"; WHILE ANS$ = "YES",...  Without this stmt, the loop would not be executed even once.

CONDITIONS - Control of loop execution is based on a CONDITION.  To form a condition, there are 6 RELATIONAL OPERATORS used to
compare 2 values.  The result is either true or false.  CONDITIONS to be tested can be formed with numeric variables and constants,
string variables and constants & arith.  exp.  Comparisions must be between like types.

LOGICAL OPERATORS - OR, AND, NOT EX:  WHILE NUM < 1 OR NUM > 10 is valid.  WHILE NUM <1 OR>10 gives SYNTAX ERROR.  AND is evaluated
1st.  OR 2nd. Multiple ANDS, ORS  & NOTS may be used when necessary. Parentheses may be used to alter the order of evaluation.

PRIMING INPUT - In order to keep from executing the body of the loop again after the user has entered the terminal value, the INPUT
stmt should immediately precede the condition test; the INPUT should be the last stmt in the loop, just before the WEND.  INPUT
"ENTER NAM$ (TYPE 'END'TO QUIT)", NAM$.  The PRIMING INPUT is this same stmt coming before the WHILE stmt.  It gets things going.

NESTED LOOPS - Are need when input data must be checked for a valid response.  If an invalid response is entered, continuous
requests must be made for a valid response.  EX:  INPUT "ARE THERE ANY MORE TO ENTER?(YES/NO)", ANS$ When- ever program stmts must
be repeated a WHILE loop is needed.  MS/BASIC allows nesting to as many levels as desired, as long as these rules are followed.

COUNTERS - A way of accumulating sums.  EX:  LET SUM = SUM + 1

AVERAGING - Need both LET SUM = SUM + 1 and LET COUNT = COUNT + 1; then LET AVG= SUM/COUNT.

TAB and SPC - EX:  PRINT TAB(25) "WEEKLY SALES" will TAB over 25 spaces before printing.  TAB can only be used in PRINT and LPRINT
stmts.  EX:  "WEEKLY SALES" can be a variable, constant or expression. "TAB" is followed by an open parenthesis (no space), then 
the desired position #, a closing paren. and the data item to print. The data item may be a variable. constant or expression. The 
TAB positions are absolute. The TAB location is limited by the line length of the video display or by the line length of the prin-
ter used. The position number may be a constant, variable or arithmetic expression in the range 1-255. Any fractional values will
be rounded up. When the PRINT is executed, the internal print pointer moves to the position specified in the TAB, and the data val-
ue is printed in that exact position. A comma in a print stmt will override the TAB and go to the next zone. More than 1 TAB on
the same line must be separated by a ";".  SPC - TAB moves the print pointer to an absolute position
on the line; SPC moves the print pointer a given # of spaces on the line (relative to the preceding item printed) 
EX: 10 PRINT "ACOUNT NUMBER"; SPC(5); "BALANCE"
    RUN
   ACCOUNT NUMBER     BALANCE

PRINT USING - P.U. stmts can format screen & prtr output. it provides for editing data such as  1. alignment of decimal points
2. exact alignment of columns of data   3. rounding to any desired # of decimal places  4. forcing right zeros  to print decimal
fractions  5. placement of commas, dollar signs, plus signs & minus signs in numeric values  6. exact horizontal spacing of both
numeric and string data for printed lines. All of these options are available for LPRINT USING.
EX: 50 PRINT USING " ###   ###.##   #,###.##"; ITEM, PR, TOT
    RUN
     250      14.50    1,450.00

     100  LET N$ = "###,###.##"
     110  PRINT USING N$; 12.5
     120  PRINT USING N$; 1.365
     130  PRINT USING N$; .111
     140  PRINT USING N$; 12345
   RUN
	12.50
	 1.37
	 O.11
    12,345.00

Strings may also be printed with PRINT USING stmts. The backslash char. (\) is used to show the begining and ending of an edited
string. They are included in the length of the string. Any string longer than the edit image will be truncated when printed.

ROUNDING - With PRINT USING numeric values will be rounded to the specified # od digits in the format.

PRINT IMAGES - Is the string used for formatting data. It can be a literal or a variable. The combination of special char. used in
the print image will determine the format of the data printed. When there are multiple items to print, they may be separated by
colons or commas. Each PRINT IMAGE should contan 1 specification for each variable to be printed. The variables will be placed into
the specifications in the line on a one-for-one basis. The variable type (numeric or string) must correspond.
EX: 150 LET T$ = "TOTAL JOKES = ### -- TOTAL DUDS = ###"
    160 PRINT USING T$; JOKE.TOT, DUD.TOT
RUN
TOTAL JOKES = 125 -- TOTAL DUDS =   1

  PLUS & MINUS SIGNS - By using the print image, the sign may be printed at either end of the number, and the plus signs may be
  forced to print.
  ASTERISK CHECK PROTECTION - 2 asterisks in a format specification specify check protection. All spaces to the left of the # will
  be filled with asterisks.

PRINTING VARIABLE LENGTH STRINGS - When the entire string shuold be printed, regardless of the length, the ampersand(&) is used.
EX: LET L$ = "& ## ####" / PRINT USING L$; "MAY", 15, 1940 / PRINT USING L$; "DECEMBER", 1, 1990 <RUN>  MAY 15,  1940
DECEMBER   1   1990

IF-THEN-ELSE - Stmnts use the same 6 logical operators (>, >=, <, <=, =, <>) also AND, OR & NOT and (). Compound conditions may be
used in IF statements EX: IF score >= 80 and score <=90 THEN print "Your grade is B."

NESTED IF STMNTS - You can have another IF stmnt as 1 of the stmnts to be executed when the condition is true. a 2nd IF stmnt can
be included in the THEN portion of the stmnt, in the ELSE portion, or both.

READ & DATA STMNTS - The variables in READ stmnts must be matched by corres. values in DATA stmnts. READ stmnts contain 1 or more
variable names separated by commas. DATA stmnts contain 1 or more constants separated by commas. DATA variables are assigned to
READ values on a 1 to 1 basis. Items in the DATA list must be cnstants, either numeric values or character strings, and the type of
value must corres. with the variable type specified on the READ. If the types do not agree, an SYNTAX ERROR will occur. DATA stnmts
are not executable and may be laced anywhere in the program. A DATA stmnt may contain up to 255 characters. Any # of DATA stmnts
may appear in a program. The READ stmnt access the DATA values in order by line #. All DATA constants in the program may be thot
of as 1 continuous list of items regardless of how many items are on a line or where the lines are placed in the program. As
READ stmnts are executed values are taken, 1 after anothe, from the data list. The BASIC interpreter keeps track of the current 
element in the DATA list, even tho the READ & DATA stmnts may be widely separated. For every variable in the READ list there must 
be a corresponding constant in DATA stnmt. If there are not enuf DATA items to satisfy the READ, an OUT OF DATA error will occur.
No error will occur if there are more elements in the DATA list than in the READ list.


   