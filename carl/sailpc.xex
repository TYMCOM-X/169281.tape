(EXECX)QUEDDT	simple  MapIt;
(EXECX)QUEDDT	simple  WhereIsIt;
(EXECX)QUEDDT	simple  DoInstall;
(EXECX)QUEDDT	simple  NeedHelp;
(EXECX)EXECX	internal simple  EnaTRP;
(EXECX)EXECX	internal simple  DisTRP;
(EXECX)EXECX	Forget!substitutions;
(EXECX)EXECX	simple  ClearFlags;
(EXECX)EXECX	Simple Boolean  ClearFrame;
(EXECX)EXECX	Simple  EXIT( String Msg(Null) );
(EXECX)EXECX	Simple  Deactivate;
(EXECX)EXECX	Simple Boolean  JobExit( Integer Msg(0) );
(EXECX)EXECX	simple  WhoShouldIBe;
(EXECX)EXECX	simple  LicenseCheck;
(EXECX)EXECX	ParIni;
(EXECX)EXECX	simple  MyLog( string Msg );
(EXECX)EXECX	simple  DumpLog( string Msg );
(EXECX)EXECX	simple boolean  Fatal(String Msg);
(EXECX)EXECX	SetTimeLimit( Integer TimeLimit );
(EXECX)EXECX	Set!Delimiter( String Character );
(EXECX)EXECX	simple  SYNC;
(EXECX)EXECX	simple  OutPtr (integer PORT; string S);
(EXECX)EXECX	String  BoolToStr( Boolean T );       ! Boolean to String;
(EXECX)EXECX	Boolean  StrToBool( String S );       ! String to Boolean;
(EXECX)EXECX	RW!Item( String Itemvar W,R; Reference Boolean B);
(EXECX)EXECX	RW!MyItem( String Itemvar W,R; Reference Boolean B);
(EXECX)EXECX	Date$( String Itemvar W, R);
(EXECX)EXECX	Day$( String Itemvar W, R);
(EXECX)EXECX	Daytime$( String Itemvar W, R);      ! Read-only * Time of day;
(EXECX)EXECX	Delimiter$(String Itemvar W, R);
(EXECX)EXECX	Error$( String Itemvar W, R);
(EXECX)EXECX	False$( String Itemvar W, R);
(EXECX)EXECX	Format$( String Itemvar W, R);
(EXECX)EXECX	Hour$( String Itemvar W, R);         ! Read-only * Time of day;
(EXECX)EXECX	HH$( String Itemvar W, R);           ! Read-only * Time of day;
(EXECX)EXECX	HHMM$( String Itemvar W, R);         ! Read-only * Time of day;
(EXECX)EXECX	HHMMSS$( String Itemvar W, R);       ! Read-only * Time of day;
(EXECX)EXECX	Logging$( String Itemvar W, R);
(EXECX)EXECX	Mail$( String Itemvar W, R);
(EXECX)EXECX	Minute$( String Itemvar W, R);       ! Read-only * Time of day;
(EXECX)EXECX	MMSS$( String Itemvar W, R);         ! Read-only * Time of day;
(EXECX)EXECX	MM$( String Itemvar W, R);
(EXECX)EXECX	Mon$( String Itemvar W, R);
(EXECX)EXECX	Month$( String Itemvar W, R);
(EXECX)EXECX	Numerics$( String Itemvar W, R);
(EXECX)EXECX	Second$( String Itemvar W, R);       ! Read-only * Time of day;
(EXECX)EXECX	SS$( String Itemvar W, R);           ! Read-only * Time of day;
(EXECX)EXECX	Substitution$( String Itemvar W, R);
(EXECX)EXECX	TimeLimit$(String Itemvar W, R);
(EXECX)EXECX	True$( String Itemvar W, R);
(EXECX)EXECX	Trulimit$( String Itemvar W, R);
(EXECX)EXECX	Tomorrow$( String Itemvar W, R);
(EXECX)EXECX	Weekday$( String Itemvar W, R);
(EXECX)EXECX	Yesterday$( String Itemvar W, R);
(EXECX)EXECX	Year$( String Itemvar W, R);
(EXECX)EXECX	YY$( String Itemvar W, R);
(EXECX)EXECX	ItemIni;                     ! Alphabetical;
(EXECX)EXECX	MOV ( itemvar DST,SRC );
(EXECX)EXECX	String  Substitute(Integer Chan; String Key);
(EXECX)EXECX	simple string  Get!Token( Reference string Par!Lst );
(EXECX)EXECX	New!Parameter(Integer Chan; String Name, Initial!Value, New!Value);
(EXECX)EXECX	simple  Set!Parameter(Reference string Par!Lst);
(EXECX)EXECX	String  parametize(Value String S);
(EXECX)EXECX	Simple boolean  SPROUT( Boolean NeedPort; Integer Cradle );
(EXECX)EXECX	simple boolean  ChkCommand( String Str );
(EXECX)EXECX	simple boolean  CheckLabel( reference string S );
(EXECX)EXECX	Simple boolean  GOTO (string CMD);
(EXECX)EXECX	Simple  BackTo (string CMD);
(EXECX)EXECX	simple boolean  FrontEnd;
(EXECX)EXECX	REASSIGN (string CMD);
(EXECX)EXECX	simple  CHECKPOINT( string CMD );
(EXECX)EXECX	COM (string CMD);
(EXECX)EXECX	Simple Boolean  CommandMode;
(EXECX)EXECX	ESCAPE;
(EXECX)EXECX	PARAMETERS(String CMD);
(EXECX)EXECX	simple  QUIT;
(EXECX)EXECX	simple  RESTART( string CMD );
(EXECX)EXECX	SEND (string CMD);
(EXECX)EXECX	simple  SETERROR( string CMD; boolean Flag );
(EXECX)EXECX	simple  SILENCE( boolean Flag );
(EXECX)EXECX	simple  STOP;
(EXECX)EXECX	simple  TIME (string CMD);
(EXECX)EXECX	simple  TRULIMIT( string CMD );
(EXECX)EXECX	recursive  COMMAND( string CMD );
(EXECX)EXECX	Simple Integer  SlotsAvailable;
(EXECX)EXECX	Simple String  JobStatus( integer ASlot );
(EXECX)EXECX	Simple  Cleanup;
(EXECX)EXECX	Simple  Do!Cleanup;
(EXECX)EXECX	Simple  FrameCheck;
(EXECX)EXECX	Simple  ClearFile;
(EXECX)EXECX	Simple  PortLine;
(EXECX)EXECX	Simple Boolean  OneLine;
(EXECX)EXECX	Escape;                                 ! Do escape  ;
(EXECX)EXECX	Simple  FileLine;
(EXECX)EXECX	Internal Simple  GetInt( reference integer Flag; integer Why );
(EXECX)EXECX	simple  EveryMinute;
(EXECX)EXECX	simple boolean  WaitForInterlock;
(EXECX)EXECX	simple  SystemStartup;
(EXECX)XEXEC	Internal Simple  GetInt( reference integer Flag; integer Why );
(EXECX)XEXEC	Internal Simple  EnaTRP;
(EXECX)XEXEC	Internal Simple  DisTRP;
(EXECX)XEXEC	SetTimeLimit( Integer TimeLimit );
(EXECX)XEXEC	Simple Boolean  ClearFrame;
(EXECX)XEXEC	Simple  ClearSlot( Integer Address(0) );
(EXECX)XEXEC	Simple  KillJob( Integer J );
(EXECX)XEXEC	Simple  EXIT( String Msg(Null) );
(EXECX)XEXEC	simple  InitVMFileFlag;
(EXECX)XEXEC	simple  WhoShouldIBe;
(EXECX)XEXEC	simple  LicenseCheck;
(EXECX)XEXEC	Simple boolean  FrontEnd( integer Adr );
(EXECX)XEXEC	simple boolean  CommandMode;
(EXECX)XEXEC	simple boolean  ErrorMode;
(EXECX)XEXEC	ESCAPE;
(EXECX)XEXEC	simple  CreateProcessor;
(EXECX)XEXEC	simple  StartProcessor;
(EXECX)XEXEC	r!p (job)  NewRec;
(EXECX)XEXEC	Prune( Integer AReq  );
(EXECX)XEXEC	Prime( Integer AReq  );
(EXECX)XEXEC	Simple Boolean  NextRecord;
(EXECX)XEXEC	SortQueue;
(EXECX)XEXEC	TellAll;
(EXECX)XEXEC	simple  ReBuildQueue( integer Level( JP$Min ) );
(EXECX)XEXEC	Simple Integer  SendMail( Integer Adr, Type );
(EXECX)XEXEC	Simple  ReSchedule( Integer Type( Sys$Run ) );
(EXECX)XEXEC	Simple Boolean  Unique( r!p (job) r; integer type );
(EXECX)XEXEC	Integer  SlotsAvailable;
(EXECX)XEXEC	Simple  ResetJobArea;
(EXECX)XEXEC	Simple  SetupJobTables;
(EXECX)XEXEC	Simple  MonitorRunningJobs;
(EXECX)XEXEC	Simple  MonitorActiveJobs;
(EXECX)XEXEC	simple  EveryMinute;
(EXECX)XEXEC	simple  DebugOptions;
(EXECX)XEXEC	simple  CleanupJobs;
(EXECX)XEXPKG	internal simple  SetLog;
(EXECX)XEXPKG	simple  SetZone;              ! set timezone to GMT ;
(EXECX)XEXPKG	simple  SetDetach;            ! set NOATTACH ;
(EXECX)XEXPKG	Internal Simple  Talk( integer j; string s );
(EXECX)XEXPKG	Internal Simple boolean  CTYLog( String Text; Boolean Date(false) );
(EXECX)XEXPKG	Internal simple string  HaltStatus( Integer array Status );
(EXECX)XEXPKG	internal simple boolean  CChild( integer Cradle );
(EXECX)XEXPKG	simple  LogAll( String Name, Text; Integer Tries(LogTry) );
(EXECX)XEXPKG	internal simple  LogWho( String Who );
(EXECX)XEXPKG	internal simple  LogInfo( String Text );
(EXECX)XEXPKG	internal simple  LogIt( Integer Bits; String Text );
(EXECX)XEXPKG	internal simple boolean  RunSlf;
(EXECX)XEXPKG	internal simple boolean  OnlyMe;
(EXECX)XEXPKG	internal simple 
(EXECX)XEXPKG	internal simple boolean  RunJob( integer Frame, ASlot; string Par );
(EXECX)XEXPKG	internal simple string  CvNAME( integer AUN );
(EXECX)XEXPKG	internal simple string  InfNam( Integer Name );
(EXECX)XEXPKG	internal simple string  InfJob( Integer Name, Status(0) );
(EXECX)XEXPKG	internal simple boolean  ClubJoin( integer Page );
(EXECX)XEXPKG	internal simple boolean  ClubInit( reference integer Page );
(EXECX)XEXPKG	internal simple integer  GetTRU( Integer Child );
(EXECX)JQUE	external simple  EnaTRP;
(EXECX)JQUE	external simple  DisTRP;
(EXECX)JQUE	simple  ContextSwitch( integer Index; string Name );
(EXECX)JQUE	simple  SetupBasePage;
(EXECX)JQUE	internal simple boolean  UseQue( String File(QueueFile) );
(EXECX)JQUE	Simple  GetLock;
(EXECX)JQUE	simple  UnLock;
(EXECX)JQUE	simple integer  MapQuePage;
(EXECX)JQUE	simple boolean  MapDataPage( Integer NewPage );
(EXECX)JQUE	simple boolean  EmptyEntry;
(EXECX)JQUE	simple boolean  MapRecord( Integer r );
(EXECX)JQUE	simple boolean  ArrCMP(reference integer LOC1, LOC2; integer Count);
(EXECX)JQUE	Simple  Wrap;
(EXECX)JQUE	Simple integer  NextRequest;
(EXECX)JQUE	Internal simple  ClsQue;
(EXECX)JQUE	simple boolean  OpenQueue;
(EXECX)JQUE	internal simple boolean  OpnQue( integer Bits(0) );
(EXECX)JQUE	simple boolean  FindRecord( integer A );
(EXECX)JQUE	simple boolean  Verify( integer A, B );
(EXECX)JQUE	simple boolean  ActRecord( integer A );
(EXECX)JQUE	simple boolean  NextRecord( integer A );
(EXECX)JQUE	simple  DeleteRecord;
(EXECX)JQUE	internal simple boolean  ActRec( integer A );
(EXECX)JQUE	simple  Transform( integer A );
(EXECX)JQUE	internal simple boolean  GetRec( integer A );
(EXECX)JQUE	simple  MarkChange;
(EXECX)JQUE	internal simple boolean  ModRec( integer A, S );
(EXECX)XEXFIL	Simple  InitStuff;
(EXECX)XEXFIL	Internal Simple  VMInit( Integer Page, Count );
(EXECX)XEXFIL	Internal Simple Integer  VMMaxS( Integer Count );
(EXECX)XEXFIL	Simple Integer  MapPage( r!p (F) Rec; Integer NewPage );
(EXECX)XEXFIL	Integer  VM!PMap( Integer Slot, NewPage );
(EXECX)XEXFIL	Internal Simple Integer  VMPMap( Integer Slot, NewPage );
(EXECX)XEXFIL	Simple Integer  Dbp( Reference Integer Ptr );
(EXECX)XEXFIL	Simple Integer  GetText( Reference string Line;
(EXECX)XEXFIL	Internal Simple Boolean  VMSpec(String L; Integer array Spec );
(EXECX)XEXFIL	Internal Simple Integer  VMChan;
(EXECX)XEXFIL	R!P (F)  NewRec;
(EXECX)XEXFIL	Simple Integer  VMSlot;
(EXECX)XEXFIL	Internal Simple Integer  VMGetC( Integer Slot, Index(VM$Char) );
(EXECX)XEXFIL	Internal Simple Integer  VMSetC( Integer Slot, Position );
(EXECX)XEXFIL	Internal Simple Boolean  VMFree( Integer Slot, Bits(0) );
(EXECX)XEXFIL	Internal String  VMLine( Integer Slot; Reference Integer More;
(EXECX)XEXFIL	Internal Boolean  VMText( Integer Slot; String Text );
(EXECX)XEXFIL	Internal Boolean  VMMove( Integer Slot, HowMany(1) );
(EXECX)XEXFIL	Internal Simple Boolean  VMFile( String Spec; Integer Mode(VM$Read) );
(EXECX)XEXTIM	Simple String  CV( Integer Val, Wid(0), Typ(0) );
(EXECX)XEXTIM	simple integer  CvFraction( Integer Time );
(EXECX)XEXTIM	Internal simple string  CvSDat( Integer Date );
(EXECX)XEXTIM	Internal simple string  CvSTim( Integer Time );
(EXECX)XEXTIM	Internal simple string  CvSTym( Integer Time );
(EXECX)XEXTIM	Internal simple string  TymDay( Integer TimeOfDay );
(EXECX)XEXTIM	simple boolean  LeapYear( Integer Year );
(EXECX)XEXTIM	Internal simple integer  CvDate( String  Date );
(EXECX)XEXTIM	Internal simple integer  CvTime( String  Time );
(EXECX)XEXSUB	simple  SetDetach;
(EXECX)XEXSUB	BrkIni;
(EXECX)XEXSUB	internal simple integer  FndKey( String Key; String Array CMD.Names );
(EXECX)XEXSUB	internal simple string  DatStr(Integer Type, Zone(0) );
(EXECX)XEXSUB	internal simple  Timer(Reference Integer HH,MM,SS; integer Zone(0));
(EXECX)XEXSUB	internal simple boolean  Numeric(String Str);
(EXECX)XEXSUB	internal simple string  TOK (reference string S);
(EXECX)XEXSUB	internal simple string  GetFil( Reference string Str, Dev;
(EXECX)QUEDPY	internal simple  EnaTRP;
(EXECX)QUEDPY	internal simple  DisTRP;
(EXECX)QUEDPY	internal simple boolean  RunSlf;
(EXECX)QUEDPY	simple string  CVHMS( integer HMS );
(EXECX)QUEDPY	simple string  TMin( Integer Min );
(EXECX)QUEDPY	simple integer  Install( integer BP; string S );
(EXECX)QUEDPY	simple  Section( string Str, Head( NULL ); integer AddCol( 0 ) );
(EXECX)QUEDPY	simple  InitSysDpy;
(EXECX)QUEDPY	simple  InstallSystemInfo;
(EXECX)QUEDPY	simple  DisplayActive;
(EXECX)QUEDPY	simple  DisplayJobInfo;
(EXECX)QUEDPY	simple  DisplayQueueInfo;
(EXECX)QUEDPY	simple string  APage( integer B; string Y("1"), N("0"), M("-") );
(EXECX)QUEDPY	simple  DisplayFiles;
(EXECX)QUEDPY	DisplayHelp;
(EXECX)QUEDPY	SetupBuffer;
(EXECX)QUEDPY	CommandScan;
(EXECX)QUEDPY	Snooze;
(EXECX)XEXCHR	Simple  CHR;
(EXECX)XEXINT	Internal simple  IntMak( integer intChan );
(EXECX)XEXINT	simple  ESC;    ESC!_ true;   ! set ESC flag and return ;
(EXECX)XEXINT	simple  NTQ;    NTQ!_ true;   ! set NTQ flag and return ;
(EXECX)XEXINT	simple  NIC;    NIC!_ true;   ! set NIC flag and return ;
(EXECX)XEXINT	simple  Dummy;        begin end;
(EXECX)XEXINT	simple  ZAP( Integer Bits );
(EXECX)XEXINT	   Simple  ZAP}&"ZapC"&{;
(EXECX)XEXINT	simple  LOS;  GetInt( LOS!,LXROCL lor LXRICL );
(EXECX)XEXINT	simple  CHR;  GetInt( CHR!,LXRBRK );  ! check for BRK and return ;
(EXECX)XEXINT	simple  ORG;
(EXECX)XEXINT	simple  ECF( Integer Bits );    ECF!_ ECF! lor Bits;
(EXECX)XEXINT	simple  LCF( Integer Bits );    LCF!_ LCF! lor Bits;
(EXECX)XEXINT	   Simple  ECF}&"FEXC"&{;    ECF(1 lsh FEXC);
(EXECX)XEXINT	   Simple  LCF}&"FEXC"&{;    LCF(1 lsh FEXC);
(EXECX)XEXINT	simple  FEX;    FEX!_ true;
(EXECX)XEXINT	simple  SIP;    SIP!_ true;
(EXECX)XEXINT	simple  SIC;    SIC!_ true;
(EXECX)XEXINT	simple  SIS;    SIS!_ true;
(EXECX)XEXINT	simple  SIA;    SIA!_ true;
(EXECX)XEXINT	internal simple  EscDis;
(EXECX)XEXINT	internal simple  TimDis;
(EXECX)XEXINT	simple  TIM;
(EXECX)XEXINT	internal simple  NTQDis;
(EXECX)XEXINT	internal simple  PrtDis( integer Port );
(EXECX)XEXINT	internal simple  EcfDis( integer Frame );
(EXECX)XEXINT	internal simple  LcfDis( integer Frame );
(EXECX)XEXINT	internal simple  FEXDis;
(EXECX)XEXINT	internal simple  SIPDis;
(EXECX)XEXINT	internal simple  SICDis;
(EXECX)XEXINT	internal simple  SISDis;
(EXECX)XEXINT	internal simple  SIADis;
(EXECX)XEXINT	internal simple  TimEnb;
(EXECX)XEXINT	internal simple  SetTim( integer Time, Units( 1 ) );
(EXECX)XEXINT	internal simple  NtqEnb;
(EXECX)XEXINT	internal simple  EscEnb;
(EXECX)XEXINT	internal simple  PrtEnb( integer Port );
(EXECX)XEXINT	internal simple  LcfEnb( integer Frame );
(EXECX)XEXINT	internal simple  EcfEnb( integer Frame );
(EXECX)XEXINT	internal simple  FEXEnb;
(EXECX)XEXINT	simple  SIPEnb;
(EXECX)XEXINT	internal simple  SICEnb;
(EXECX)XEXINT	internal simple  SISEnb;
(EXECX)XEXINT	internal simple  SIAEnb;
(EXECX)XEXMAI	Simple  SendIt;
(EXECX)XEXLIC	internal simple string  LicErr( integer Code );
(EXECX)XEXLIC	simple string  get!line;
(EXECX)XEXLIC	internal  GetOpr( reference integer L; reference string Name );
(EXECX)XEXLIC	Simple Integer  Radix.45(Integer Ch);
(EXECX)XEXLIC	integer  CVHASH(string PW);
(EXECX)XEXLIC	internal integer  GetLic( reference integer OperName,
   