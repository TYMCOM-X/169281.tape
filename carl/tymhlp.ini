	RA	0

	KILL	NODE,HARDWARE,SLOT,CIRCUITS,LIMITS,LU,TYMNET
	KILL	ERROR,ERREND,.RANGE,.LURNG,.MLURG,.BIT.,.SET.
	KILL	..35..,..EQ..,..GT..,..LT..,ENABLE,DISABLE,SET

ENGINE	EQ	1
MACHIN	EQ	1
MICRO	EQ	2
ZITEL	EQ	1
NASYNG	EQ	0
ASYNEW	EQ	2
N.ADA	EQ	1
LBOOT	EQ	1
MEMRMK	EQ	0
R1DOWN	EQ	1
NSLOT	EQ	0
NLU	EQ	0
NTAPE	EQ	0
XSYNC	EQ	0
NSYNC	EQ	0
NLINES	EQ	0
SILINS	EQ	0
XLINKS	EQ	0
NPRINT	EQ	0
IKNRNG	EQ	1
M.NCARD	EQ	0
M.DA0	EQ	$0 80
M.DA1	EQ	$0 81
M.DA2	EQ	$0 82
M.DA3	EQ	$0 83
M.NP0	EQ	0
M.NP1	EQ	0
M.NP2	EQ	0
M.NP3	EQ	0

:	OTHER SETUP

S.NUM	EQ	-1
SI.AV0	EQ	$00FFFF0000
SI.AV1	EQ	$00FFFF0000
SI.AV2	EQ	$00FFFF0000
SI.AV3	EQ	$00FFFF0000
S.AV	EQ	$00FFFFFFFF
A.AV	EQ	$00FFFF0000
P.AV	EQ	$00FF000000
XPI.AV	EQ	$001
EBS.AV	EQ	$001
DT.AV	EQ	$001

:	NETWORKS AS OF 7/20/88

TYMNET		EQ	$A 1
BUBBNET		EQ	$A 2
TRWNET		EQ	$A 3
DECNET		EQ	$A 4
ITALNET		EQ	$A 5
SWEDNET		EQ	$A 6
NETHERNET	EQ	$A 7
SUNNET		EQ	$A 8
SWISSNET	EQ	$A 9
UCCPAC		EQ	$A 10
XEROXNET	EQ	$A 11
BOFANET		EQ	$A 12
VANET		EQ	$A 13
CHASENET	EQ	$A 14
CODAN		EQ	$A 15
BPNET		EQ	$A 16
DUNET		EQ	$A 17
LENET		EQ	$A 18
AVISO		EQ	$A 19
DIALOG		EQ	$A 20
MGT		EQ	$A 21
STAGENET	EQ	$A 22
GEONET		EQ	$A 23
ALASCOM		EQ	$A 24
CASNET		EQ	$A 25
EXXON		EQ	$A 26
INSNET		EQ	$A 27
HSBCNET		EQ	$A 28
DOLNET		EQ	$A 30
CTS		EQ	$A 31
SWBNET		EQ	$A 32
ITALCABLE	EQ	$A 34
TELEVERKET	EQ	$A 36
PHILIPS		EQ	$A 37
UKLAB		EQ	$A 38
EASTNETLAB	EQ	$A 39
DATAPAC		EQ	$A 40
TRAINING	EQ	$A 41
LENG		EQ	$A 42
SLIGOS		EQ	$A 43
WESTREGLAB	EQ	$A 44
REPAIRDEPOT	EQ	$A 45
WESTPUB		EQ	$A 46
WYNET		EQ	$A 47
HGNET		EQ	$A 48
MDISINET	EQ	$A 49
NISNET		EQ	$A 50
BABYLON		EQ	$A 52
ANZNET		EQ	$A 53
FTS2000		EQ	$A 54
CONNNET		EQ	$A 55
NTSNET		EQ	$A 56
MERCURYNET	EQ	$A 57
DEVNET		EQ	$A 58
WTSLAB		EQ	$A 63
TESTNET		EQ	$A 99

:	PRODUCT ID'S

ASAT	EQ	31
ACOM	EQ	32
XCOM	EQ	33
PBH	EQ	34
PBT	EQ	35
TII	EQ	38
BBXS	EQ	3A
ELF	EQ	3B
RAM	EQ	42
VAL	EQ	44
NVAL	EQ	44
ISCS	EQ	45
SDLC	EQ	49
TNTT	EQ	4A
UTSH	EQ	4B
NTRH	EQ	4C
VMB	EQ	4D
NEM	EQ	4F
TMCS	EQ	50
CMTI	EQ	52
TRSW	EQ	53
ITI	EQ	54
UTST	EQ	55
TOM	EQ	56
LEM	EQ	57
MUX	EQ	58
PBOM	EQ	5A
SOM	EQ	5B
PAOM	EQ	5C
TLXG	EQ	5E
XOM	EQ	5F
NTRT	EQ	60
XPC	EQ	61
SNA	EQ	62
SNAT	EQ	62
SNAH	EQ	63
TNTH	EQ	64
CMTU	EQ	65
NTCN	EQ	6A
ISRM	EQ	6D
MSRV	EQ	79
MSV	EQ	79
SHMN	EQ	7A
XPIMI	EQ	1000
IHSA	EQ	83
I2G2	EQ	8B
LHOS	EQ	8D
MDT	EQ	8E
MDH	EQ	8F
EBUS	EQ	91
EBUSMI	EQ	2000
PTI	EQ	92
CMH	EQ	93
MBAS	EQ	94
PHI	EQ	95
EXPE	EQ	99
MCP	EQ	9A
TUNL	EQ	9C

:	MACRO NAMING CONVENTIONS.

:		All macros intended for internal use start with ".".


:	RANGING MACROS.

:	There are a number of macros which accept a set of RANGE parameters.
:		The generic form for these macros is:

:			MACRO(A,B,C-D,E,F-G)

:	where A,B and E are single ports selected, and the ranges C through
:		D and F through G are selected.

: **	ERROR(text,cont)	Output configuration error to local TTY
: **	ERREND(text)		End an error message

:	Format will be:
:	ERROR:	[CR:LF]!!!! **** text ****[CR:LF]
:	ERREND(text) will add ****[CR:LF] on the current line

	GL	ERRCNT
ERRCNT	EQ	0			:Number of errors so far

ERROR	MACRO(txt,cont) [
ERRCNT	EQ	ERRCNT+1
	REMARK	%!!!! ERROR **** txt
	IF	cont 0
	ELSE
	 ERREND
	EI
]

ERREND	MACRO(txt) [
	REMARK	txt ****%
]

: **	.RANGE(LABEL,RX,MX,P)	Called to check a range of values

:	P	may be a single # N, a range of #s Ni-Nj with 0=<Ni<Nj,
:		or null
:	RX	is radix of #s N
:	MX	is max value of N (given in radix RX),
:		range is 0 to $0 0FFFFFFFF
:	LABEL	is a label for diagnostics

:	returns QR = 0 if nothing to do,
:	else returns QR = number of iterations..
:			QI = first port to do.

.RANGE	MACRO(LABEL,RX,MX,P) [
Q	EQ	$`RX -(0/P+0)		:FOR .P. = "Ni-Nj", Q = -(0/Ni-Nj) = Nj
					: else 0
QI	EQ	$`RX Q+(P+0)		:FOR .P. = "Ni-Nj", Q=Nj, QI = Nj+(Ni-Nj) = Ni
					:FOR .P. = "Ni", Q=0, QI = Ni
					:FOR .P. = null,  QI = 0
QQ	EQ	$`RX P $0 100000000	:FOR .P. = null, QQ = $0100000000
QR	EQ	1
	IF	-QI
QI	 EQ	-QI
QQ	 EQ	$0100000000
	 ERROR(LABEL`: Parameter -,1)
	 NUMBER $`RX QI
	 ERREND( not positive)
	EI
	IF	$0 QQ&1FFFFFFFF%100000000	:IF .P. NOT NULL
	 IF	QI-($`RX`MX-1)
	  ERROR(LABEL`: Parameter ,1)
	  NUMBER $`RX QI
	  REMARK	 greater than 
	  NUMBER $`RX`MX-1; ERREND
QR	  EQ	0
	 EI
	 IF	Q			:IF M NOT NULL
QR	  EQ	Q-QI+1
	  IF	Q-($`RX`MX-1)
	   ERROR(LABEL`: Parameter ,1); NUMBER $`RX Q
	   REMARK	 greater than ; NUMBER $`RX`MX-1; ERREND
QR	   EQ	0
	  EI
	  IF	QI-Q
	   ERROR(LABEL`: Range ,1); NUMBER $`RX QI
	   REMARK	-; NUMBER $`RX Q; ERREND( Backward)
QR	   EQ	0
	  EI
	 EI
	ELSE
QR	 EQ	0
	EI
	KILL	Q,QQ
]

.CXPI.	MACRO [
	IF	XPI.AV
MXPNM	EQ	O.|H.+1|
NMACH	EQ	O.|H.+2|
H.	EQ	H.+2
	IF	1-\MACHNM
MACHNM	EQ	0
HST0	EQ	0
	EI
XPITMO	EQ	0A
XPISAV	EQ	1
	ELSE
	REMARK	%XPI IS NOT SUPPORTED IN THIS CONFIGURATION.%
	EI
	]

.CEBS.	MACRO [
	IF	EBS.AV
IPINUM	EQ	1
IPRES0	EQ	1
IPGMB0	EQ	-1
	ELSE
	REMARK	%E-BUS IS NOT SUPPORTED IN THIS CONFIGURATION.%
	EI
	]

: **	Macro .BIT.(NAME,POS)	Called to locate bit at POS in NAME

.BIT.	MACRO(NAME,POS) [(NAME^((POS&1F)-1F)&1)]

:	HANDY MACROS

::	.XX. MACROS
:	THE FOLLOWING MACROS EVALUATE THE RELATIONSHIP BETWEEN TWO
:	EXPRESSIONS.  THEY EVALUATE TO 0 FOR FALSE AND 1 FOR TRUE.
:	THEY MAY BE USED IN ANY EXPRESSION AND ARE PARTICULARLY USEFUL
:	FOR IF STATMENTS.
:
:	E.G.	IF	..EQ..(.-LABEL,30)
:		REMARK %>>>> ERROR **** LABEL AREA NOT = 30 BYTES ****%
:		EI

	GL	..35..
..35..	EQ	$a 35
..EQ..	MACRO(P1,P2)[((((P1)-(P2))!((P2)-(P1)))%(1^..35..))^-..35..]
..GT..	MACRO(P1,P2)[((P2)-(P1))^-..35..]
..LT..	MACRO(P1,P2)[((P1)-(P2))^-..35..]

:
:	MACRO:  NODE
:
:	This macro is used to define the node number, kernel host number,
:	network id number, and any needed sub id's.
:
:	FORMAT:  NODE(2020,536,1)	:DEFINE AS NODE 2020, KH536, TYMNET
:
NODE	MACRO(NNUM,KHST,NID,SID) [ 
MACHNM	EQ	$8 NNUM+0
HST0	EQ	$A KHST+0
NETID	EQ	$A NID+0
SUBNET	EQ	$A SID+0
	IF	..LT..(MACHNM,$82001)
	REMARK	%NODE# MUST BE GREATER THAN 2000!%%
	EI
	IF	..GT..(MACHNM,$817777)
	REMARK	%N0DE# MUST BE LESS THAN 20000!%%
	EI
	IF	1-HST0
	REMARK	%KERNEL HOST# IS REQUIRED!%%
	EI
	IF	1-NETID
	REMARK	%NETWORK ID# IS REQUIRED!%%
	EI
	]

:
:	MACRO:	HARDWARE
:
:	This macro is used to define hardware type and configuration
:	to be used.  The first parameter defines the type of engine
:	(ei. ENGINE,MINI,TSI,NANO,MICRO,HDLCMICRO).  All other parameters
:	can be used for optional hardware (ie. MAC1,XPI,TAPE,DISK,1200,
:	2400,4800,9600).
:
:	FORMAT:	HARDWARE(ENGINE,4800)	:DEFINE STANDARD ENGINE WITH
:					: HIGH SPEED INTERRUPTS
:
MINI	EQ	1
MICRO	EQ	2
TSI	EQ	3
PICO	EQ	4
NANO	EQ	4
HDLC	EQ	5
HDLCMI	EQ	5
MAC1	EQ	  10
MACI	EQ	  10
MAC2	EQ	  20
MACII	EQ	  20
MAC3	EQ	  30
MACIII	EQ	  30
XPI	EQ	 100
DISK	EQ	 400
TAPE	EQ	 800
DISK10	EQ	1000

HARDWARE MACRO(.HTYP,.O0,.O1,.O2,.O3,.O4,.O5,.O6,.O7,.O8,.O9,.OA,.OB,.OC,.OD,.OE) [
O.0	EQ	.O0 0
O.1	EQ	.O1 0
O.2	EQ	.O2 0
O.3	EQ	.O3 0
O.4	EQ	.O4 0
O.5	EQ	.O5 0
O.6	EQ	.O6 0
O.7	EQ	.O7 0
O.8	EQ	.O8 0
O.9	EQ	.O9 0
O.A	EQ	.OA 0
O.B	EQ	.OB 0
O.C	EQ	.OC 0
O.D	EQ	.OD 0
O.E	EQ	.OE 0
	IF	.HTYP
	IF	.HTYP-5
	REMARK	%%ILLEGAL HARDWARE TYPE!%
	ELSE	:.HTYP-5
	IF	.HTYP-4
MACHIN	EQ	2
ZITEL	EQ	0
NSYNC	EQ	0
XPI.AV	EQ	0
EBS.AV	EQ	0
DT.AV	EQ	0
P.AV	EQ	0
S.AV	EQ	0FFFC0000
SI.AV0	EQ	0FFFC0000
SI.AV1	EQ	0
SI.AV2	EQ	0
SI.AV3	EQ	0
A.AV	EQ	0
	ELSE	:.HTYP-4
	IF	.HTYP-3
MACHIN	EQ	4
ZITEL	EQ	1
XPI.AV	EQ	0
EBS.AV	EQ	0
DT.AV	EQ	0
P.AV	EQ	0
S.AV	EQ	0FF000000
SI.AV0	EQ	0FF000000
SI.AV1	EQ	0
SI.AV2	EQ	0
SI.AV3	EQ	0
A.AV	EQ	0
	ELSE	:.HTYP-3
	IF	.HTYP-2
MACHIN	EQ	3
ZITEL	EQ	1
XPI.AV	EQ	0
EBS.AV	EQ	0
DT.AV	EQ	0
P.AV	EQ	0
S.AV	EQ	0F0000000
SI.AV0	EQ	0F0000000
SI.AV1	EQ	0
SI.AV2	EQ	0
SI.AV3	EQ	0
A.AV	EQ	0
	ELSE	:.HTYP-2
	IF	.HTYP-1
ZITEL	EQ	0
SI.AV0	EQ	0
SI.AV1	EQ	0
SI.AV2	EQ	0
SI.AV3	EQ	0
P.AV	EQ	0
S.AV	EQ	$0033330000
A.AV	EQ	$0080000000
XPI.AV	EQ	0
EBS.AV	EQ	0
DT.AV	EQ	0
	ELSE	:.HTYP-1
	EI	:.HTYP-1
	EI	:.HTYP-2
	EI	:.HTYP-3
	EI	:.HTYP-4
	EI	:.HTYP-5
	ELSE	:.HTYP
	REMARK	%%ILLEGAL HARDWARE TYPE!%%
	EI	:.HTYP

H.	EQ	0
	RE
	IF	..EQ..(O.|H.|,1200)
BAUDR	EQ	0
	EI
	IF	..EQ..(O.|H.|,2400)
	REMARK	%BAUDR = 1 IS NOT SUPPORTED AT THIS TIME!!%%
BAUDR	EQ	1
BAUDRS	EQ	1
A.AV	EQ	$00F0000000&A.AV
	EI
	IF	..EQ..(O.|H.|,4800)
A.AV	EQ	$00F0000000&A.AV
BAUDR	EQ	2
	EI
	IF	..EQ..(O.|H.|,9600)
	REMARK	%BAUDR = 3 IS NOT SUPPORTED AT THIS TIME!!%%
BAUDR	EQ	3
BAUDRS	EQ	1
A.AV	EQ	$0080000000&A.AV
	EI
	IF	..EQ..(O.|H.|,MAC1)
ZITEL	EQ	0
	EI
	IF	..EQ..(O.|H.|,MAC2)
ZITEL	EQ	1
	EI
	IF	..EQ..(O.|H.|,MAC3)
ZITEL	EQ	1
	EI
	IF	..EQ..(O.|H.|,XPI)
	.CXPI.
	EI
	IF	..EQ..(O.|H.|,EBUS)
	.CEBS.
	EI
	IF	..EQ..(O.|H.|,DISK)
	IF	DT.AV
MSCDSK	EQ	1
	ELSE
	REMARK	%DISK NOT ALLOWED IN THIS CONGIFURATION.%
	EI
	EI
	IF	..EQ..(O.|H.|,TAPE)
	IF	DT.AV
NTAPE	EQ	NTAPE+1
N.ADA	EQ	0
A.AV	EQ	$00FF000000&A.AV
	ELSE
	REMARK	%TAPE NOT ALLOWED IN THIS CONFIGURATION.%
	EI
	EI
	IF	..EQ..(O.|H.|,DISK10)
	IF	DT.AV
NDISK	EQ	NDISK+1
N.ADA	EQ	0
A.AV	EQ	$00FF000000&A.AV
	ELSE
	REMARK	%DISK NOT ALLOWED IN THIS CONFIGURATION.%
	EI
	EI
H.	EQ	H.+1
	ER	0F-H.
	]

:
:	MACRO:  CIRCUITS
:
:	This macro is used to define the number of circuits needed in the
:	following catagories: passthroughs, dispatcher, xray users.
:
:	FORMAT:  CIRCUITS(PASSTH,128,DISPAT,64,XRAY,4) :DEFINE 128 PASSTHROUGHS
:								64 DISPATCHER
:								 4 XRAY USERS
:
PASSTH	EQ	1
PASSTHRU EQ	1
PASSTHRUS EQ	1
DISPAT	EQ	2
DISPATCH EQ	2
DISPATCHER EQ	2
XRAY	EQ	3

CIRCUITS MACRO(.T0,.C0,.T1,.C1,.T2,.C2,.T3,.C3,.T4,.C4,.T5,.C5,.T6,.C6,.T7,.C7) [
.TT0	EQ	.T0+0	;.CC0	EQ	$A .C0+0
.TT1	EQ	.T1+0	;.CC1	EQ	$A .C1+0
.TT2	EQ	.T2+0	;.CC2	EQ	$A .C2+0
.TT3	EQ	.T3+0	;.CC3	EQ	$A .C3+0
.TT4	EQ	.T4+0	;.CC4	EQ	$A .C4+0
.TT5	EQ	.T5+0	;.CC5	EQ	$A .C5+0
.TT6	EQ	.T6+0	;.CC6	EQ	$A .C6+0
.TT7	EQ	.T7+0	;.CC7	EQ	$A .C7+0
.Q	EQ	0
	RE	8
	IF	.TT|.Q|
	IF	.TT|.Q|-3
	REMARK	%BAD CIRCUITS DEFINITION!%
	ELSE
	IF	.TT|.Q|-2
NXUBLK	EQ	.CC|.Q|
	ELSE
	IF	.TT|.Q|-1
NDP	EQ	.CC|.Q|
	ELSE
NPTHR	EQ	.CC|.Q|
	IF	NPTHR
PTHRU	EQ	0
	ELSE
PTHRU	EQ	1
	EI
	EI
	EI
	EI
	ELSE
	IF	.TT|.Q|+1
	ELSE
	REMARK	%BAD CIRCUITS DEFINITION!%
	EI
	EI
.Q	EQ	.Q+1
	ER
	]

:
:	MACRO:  SLOT
:
:	This macro is used to define the start of a slot's definitions.
:	While it defines the slot#, memory size, license, and product id,
:	subsequint calls to macros LIMITS and LU are used to define the
:	other needed information.
:
AUX	EQ	80000000
AUXCIR	EQ	80000000
SUS	EQ	1
SUSPEND	EQ	1

SLOT	MACRO(S.N,K.SZ,.LIC,.PID,X.HST) [
S.NUM	EQ	$A S.N S.NUM+1
SZ.K	EQ	$A K.SZ 1
S.LC	EQ	.LIC 0
	IF	S.NUM
P.ID	EQ	$0 .PID 0
	ELSE
P.ID	EQ	$0 .PID 38
	EI
S|$A S.NUM|CORE EQ SZ.K
S|$A S.NUM|LIC EQ S.LC
NLUS|$A S.NUM| EQ 0
..LU..	EQ	0
	IF	..EQ..(P.ID,SHMN)
HOST0	EQ	$A X.HST 0
	EI
	IF	..EQ..(P.ID,XPIMI)
SLTXMI	EQ	S.NUM
	EI
	IF	..EQ..(P.ID,EBUS)
S|$A S.NUM|L0 EQ IP.REF(0)
NLUS|$A S.NUM| EQ 1
..LU..	EQ	1
	EI
	IF	..EQ..(P.ID,EBUSMI)
IPDLC0	EQ	S.NUM
	EI
	IF	S.NUM-NSLOT
NSLOT	EQ	S.NUM
	EI
	IF	P.ID
P.N|$A S.NUM|	EQ P.ID
	EI
	]

:
:	MACRO:  LIMITS
:
:	This optional macro is used to define some limits on the slots
:	operational parameters.  The slot number is assigned by the
:	last call to the SLOT macro.
:
:	FORMAT:  LIMITS(FG,BG,SD)
:
:		FG = QUANTUM FOREGROUND TIME
:		BG = QUANTUM BACKGROUND TIME
:		SD = COUNT OF OUTSTANDING SHARED REQUESTS BEFORE DISMISS
:
:	EXAMPLE:  LIMITS(4,15,20) :SET FOREGROUND TICKS TO 4,
:				       BACKGROUND TICKS TO 15,
:				       SHARED REQUESTS TO 20.
:
LIMITS	MACRO(F.T,B.T,S.D) [
Q.FG|$A S.NUM| EQ $A F.T 0
Q.BG|$A S.NUM| EQ $A B.T 0
SH.Q|$A S.NUM| EQ $A S.D 0
	IF	Q.FG|$A S.NUM|
	ELSE
	KILL	Q.FG|$A S.NUM|
	EI
	IF	Q.BG|$A S.NUM|
	ELSE
	KILL	Q.BG|$A S.NUM|
	EI
	IF	SH.Q|$A S.NUM|
	ELSE
	KILL	SH.Q|$A S.NUM|
	EI

	]

:
:	MACRO:	LU
:
:	This macro is used to define the logical units for slots.
:	The slot number is assigned by the last call to the SLOT
:	macro.
:
:	FORMAT:  LU(TYPE,DEVICENUM)
:
:		TYPE      = SYNC|SIO|ASYNC|PRINTER
:		DEVICENUM = PHYSICAL DEVICE NUMBER
:
:	EXAMPLES:  LU(SYNC,2-3)    :DEFINE SYNC LINES 2 AND 3
:		   LU(ASYNC,0-3)   :DEFINE ASYNC GROUPS 0 THROUGH 3
:		   LU(SIO,0,2-5)   :DEFINE SIO LINES 2-5 ON MOTHER BOARD 0
:		   LU(PRINTER,0)   :DEFINE LINE PRINTER 0
:		   LU(NULL)	   :DEFINE NULL DEVICE (SKIP A LOGICAL UNIT)

NULL	EQ	0
SYNC	EQ	1
SIO	EQ	2
ASYNC	EQ	3
PRINT	EQ	4
PRINTER	EQ	4

.LURNG	MACRO(NAM,RNG,P) [
	.RANGE(LU,A,RNG,P)
	IF	QR
	RE	QR
	IF	.BIT.(NAM`.AV,QI)
S|$A S.NUM|L|..LU..| NAM`.REF(QI)
	ELSE
	REMARK	%UNIT SKIPPED.%
	EI
QI	EQ	QI+1
..LU..	EQ	..LU..+1
C.LU..	EQ	C.LU..+1
	ER
	IF	QI-.HIGH.
.HIGH.	EQ	QI
	EI
	EI
	]

.MLURG	MACRO(MB,RNG,P) [
	.RANGE(LU,A,RNG,P)
	IF	QR
	RE	QR
	IF	.BIT.(SI.AV`MB,QI)
S|$A S.NUM|L|..LU..| M.REF(MB,QI)
	ELSE
	REMARK	%SIO UNIT SKIPPED. 
	NUMBER	MB
	REMARK	,
	NUMBER	QI
	REMARK	,,
	NUMBER	SI.AV`MB
	REMARK	%
	EI
QI	EQ	QI+1
..LU..	EQ	..LU..+1
C.LU..	EQ	C.LU..+1
	ER
	IF	QI-.HIGH.
.HIGH.	EQ	QI
	EI
	EI
	]

LU     MACRO(.TYP,.L1,.L2,.L3,.L4,.L5,.L6,.L7,.L8,.L9,.LA,.LB,.LC,.LD,.LE,.LF)[
C.LU..	EQ	0
.HIGH.	EQ	0
	IF	.TYP
	IF	.TYP-4
	REMARK	%ILLEGAL LU SPEC IN SLOT 
	NUMBER	$A S.NUM
	REMARK	 UNIT 
	NUMBER	$A ..LU..
	REMARK	.%%
	ELSE	:.TYP-4
	IF	.TYP-3
	.LURNG(P,8,.L1)
	.LURNG(P,8,.L2)
	.LURNG(P,8,.L3)
	.LURNG(P,8,.L4)
	.LURNG(P,8,.L5)
	.LURNG(P,8,.L6)
	.LURNG(P,8,.L7)
	.LURNG(P,8,.L8)
	IF	$A .HIGH.-NPRINT
NPRINT	EQ	$A .HIGH.
	EI	:$A .HIGH.-NPRINT
	ELSE	:.TYP-3
	IF	.TYP-2
	.LURNG(A,16,.L1)
	.LURNG(A,16,.L2)
	.LURNG(A,16,.L3)
	.LURNG(A,16,.L4)
	.LURNG(A,16,.L5)
	.LURNG(A,16,.L6)
	.LURNG(A,16,.L7)
	.LURNG(A,16,.L8)
	.LURNG(A,16,.L9)
	.LURNG(A,16,.LA)
	.LURNG(A,16,.LB)
	.LURNG(A,16,.LC)
	.LURNG(A,16,.LD)
	.LURNG(A,16,.LE)
	.LURNG(A,16,.LF)
	IF	$A .HIGH.-NASYNG
NASYNG	EQ	$A .HIGH.
	EI	:$A .HIGH.-NASYNG
	ELSE	:.TYP-2
	IF	.TYP-1
L2.	EQ	$A .L2
	.MLURG(.L1,16,.L2)
	.MLURG(.L1,16,.L3)
	.MLURG(.L1,16,.L4)
	.MLURG(.L1,16,.L5)
	.MLURG(.L1,16,.L6)
	.MLURG(.L1,16,.L7)
	.MLURG(.L1,16,.L8)
	.MLURG(.L1,16,.L9)
	.MLURG(.L1,16,.LA)
	.MLURG(.L1,16,.LB)
	.MLURG(.L1,16,.LC)
	.MLURG(.L1,16,.LD)
	.MLURG(.L1,16,.LE)
	.MLURG(.L1,16,.LF)
.MN.	EQ	$A .L1
	IF	(.MN.+1)-M.NCARD
M.NCARD	EQ	$A .MN.+1
	EI	:(.MN.+1)-M.NCARD
	IF	.HIGH.-M.NP|.MN.|
M.NP|.MN.| EQ   .HIGH.
	EI	:.HIGH.-M.NP|.MN.|
	IF	1-S.NUM
SILINS	EQ	SILINS+C.LU..
	EI	:1-S.NUM
	ELSE	:.TYP-1
	.LURNG(S,32,.L1)
	.LURNG(S,32,.L2)
	.LURNG(S,32,.L3)
	.LURNG(S,32,.L4)
	.LURNG(S,32,.L5)
	.LURNG(S,32,.L6)
	.LURNG(S,32,.L7)
	.LURNG(S,32,.L8)
	.LURNG(S,32,.L9)
	.LURNG(S,32,.LA)
	.LURNG(S,32,.LB)
	.LURNG(S,32,.LC)
	.LURNG(S,32,.LD)
	.LURNG(S,32,.LE)
	.LURNG(S,32,.LF)
	IF	.HIGH.-NSYNC
	IF	MACHIN-2
NSYNC	EQ	.HIGH.
	ELSE
NSYNC	EQ	$A16
	EI
	EI
	IF	.HIGH.-$A16
XSYNC	EQ	1
NSYNC	EQ	$A32
	EI	:.HIGH.-$A16
	IF	1-S.NUM
NLINES	EQ	NLINES+C.LU..
	EI	:1-S.NUM
	EI	:.TYP-1
	EI	:.TYP-2
	EI	:.TYP-3
	EI	:.TYP-4
	ELSE	:.TYP
	IF	.TYP+1
	ELSE	:.TYP+1
	REMARK	%ILLEGAL LU SPEC IN SLOT 
	NUMBER	$A S.NUM
	REMARK	 UNIT 
	NUMBER	$A ..LU..
	REMARK	.%%
	EI	:.TYP+1
	EI	:.TYP
NLUS|$A S.NUM| EQ ..LU..
	IF	..LU..-NLU
NLU	EQ	..LU..
	EI	:..LU..-NLU
	]
:
:	ENABLE
:
:	This macro is used to set labels to a value of 1.
:
:	FORMAT:  ENABLE(SPAM)	:SET SPAM TO 1
:
.SET.	MACRO(NAME,VAL)[
	KILL	Q
Q`NAME	EQ	1
	IF	1-\Q
	KILL	Q`NAME
`NAME	EQ	`VAL 1
	EI
	]
ENABLE	MACRO(.L0,.L1,.L2,.L3,.L4,.L5,.L6,.L7,.L8,.L9,.LA,.LB,.LC,.LD,.LE,.LF)[
	.SET.(.L0,1)
	.SET.(.L1,1)
	.SET.(.L2,1)
	.SET.(.L3,1)
	.SET.(.L4,1)
	.SET.(.L5,1)
	.SET.(.L6,1)
	.SET.(.L7,1)
	.SET.(.L8,1)
	.SET.(.L9,1)
	.SET.(.LA,1)
	.SET.(.LB,1)
	.SET.(.LC,1)
	.SET.(.LD,1)
	.SET.(.LE,1)
	.SET.(.LF,1)
	]
:
:	DISABLE
:
:	This macro is used to set labels to a value of 0.
:
:	FORMAT:  DISABLE(SPAM)	:SET SPAM TO 0
:
DISABLE	MACRO(.L0,.L1,.L2,.L3,.L4,.L5,.L6,.L7,.L8,.L9,.LA,.LB,.LC,.LD,.LE,.LF)[
	.SET.(.L0,0)
	.SET.(.L1,0)
	.SET.(.L2,0)
	.SET.(.L3,0)
	.SET.(.L4,0)
	.SET.(.L5,0)
	.SET.(.L6,0)
	.SET.(.L7,0)
	.SET.(.L8,0)
	.SET.(.L9,0)
	.SET.(.LA,0)
	.SET.(.LB,0)
	.SET.(.LC,0)
	.SET.(.LD,0)
	.SET.(.LE,0)
	.SET.(.LF,0)
	]
:
:	SET
:
:	This macro is used to set labels to a value.
:
:	FORMAT:  SET(COUNT,7)	:SET COUNT TO 7
:
SET	MACRO(.L0,.L1,.L2,.L3,.L4,.L5,.L6,.L7,.L8,.L9,.LA,.LB,.LC,.LD,.LE,.LF)[
	.SET.(.L0,.L1)
	.SET.(.L2,.L3)
	.SET.(.L4,.L5)
	.SET.(.L6,.L7)
	.SET.(.L8,.L9)
	.SET.(.LA,.LB)
	.SET.(.LC,.LD)
	.SET.(.LE,.LF)
	]
:
:	SETGL
:
:	This macro is used to set labels to a value and make global.
:
:	FORMAT:  SETGL(COUNT,7)	:SET COUNT TO 7
:
.SETG.	MACRO(NAME,VAL)[
	KILL	Q
Q`NAME	EQ	1
	IF	1-\Q
	KILL	Q`NAME
	GL	`NAME
`NAME	EQ	`VAL 1
	EI
	]
SETGL	MACRO(.L0,.L1,.L2,.L3,.L4,.L5,.L6,.L7,.L8,.L9,.LA,.LB,.LC,.LD,.LE,.LF)[
	.SETG.(.L0,.L1)
	.SETG.(.L2,.L3)
	.SETG.(.L4,.L5)
	.SETG.(.L6,.L7)
	.SETG.(.L8,.L9)
	.SETG.(.LA,.LB)
	.SETG.(.LC,.LD)
	.SETG.(.LE,.LF)
	]
 