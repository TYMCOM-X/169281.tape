(SPL)ACCESS	new!entry;
(SPL)ACCESS	readList( string accessFile("ACCESS.LIS") );
(SPL)ACCESS	drop( r!p (entry) target );
(SPL)ACCESS	boolean  nonoctal( string s );
(SPL)ACCESS	r!p (entry)  construct( string spec );
(SPL)ACCESS	printList;
(SPL)ACCESS	setup( string command, comstr );
(SPL)ACCESS	integer  totsiz;
(SPL)ACCESS	writeList( string accessFile("ACCESS.LIS") );
(SPL)MATCHS	Internal integer  ArrMatch( String S; String Array A );
(SPL)MATCHS	Internal simple integer  StrMatch( String A,B );
(SPL)FTP20	simple  EraseString( reference string S );
(SPL)FTP20	item Zap;
(SPL)FTP20	ZapHandler;
(SPL)FTP20	simple  ZapHandlerIni;
(SPL)FTP20	assign(AuxDead_Zap,ZapHandler);
(SPL)FTP20	simple string  GetLine(integer T(0));
(SPL)FTP20	SendLine(string S);
(SPL)FTP20	boolean  !Csync;
(SPL)FTP20	string  psync( integer T );
(SPL)FTP20	simple boolean  Index (string A,B);
(SPL)FTP20	Connect;
(SPL)FTP20	Login;
(SPL)FTP20	simple  Eraser;
(SPL)FTP20	Enable;
(SPL)FTP20	Disable;
(SPL)FTP20	Quit;
(SPL)FTP20	Gateway;
(SPL)FTP20	simple  Eraser;
(SPL)FTP20	directory;
(SPL)FTP20	get;
(SPL)FTP20	send;
(SPL)GETFIL	Brk!Init;
(SPL)GETFIL	Brk!Release;
(SPL)GETFIL	Internal string  GetFil( Reference string Str;
(SPL)FTP20S	Slave.Transmit( string FileName );
(SPL)FTP20S	Slave.Receive( string FileName );
(SPL)NFICHE	string  TOK (reference string S);
(SPL)NFICHE	simple  BumpFicheFrame;
(SPL)NFICHE	simple string  Prompt( string P );
(SPL)NFICHE	simple integer  SP( String P; Integer Def );
(SPL)NFICHE	simple integer  SPO( String P; Integer Def );
(SPL)NFICHE	simple boolean  SPy( String P; Boolean Def );
(SPL)NFICHE	simple string  TypeMatch;
(SPL)NFICHE	simple string  FindType( String Str );
(SPL)NFICHE	simple string  FindPage( String Str );
(SPL)NFICHE	simple string  FindLine( String Str );
(SPL)NFICHE	simple  SymlokChecks;
(SPL)NFICHE	AdvanceFrame;
(SPL)NFICHE	simple  Print!Heading;
(SPL)NFICHE	boolean  Infile( String F );
(SPL)NFICHE	string  get!line;
(SPL)NFICHE	Each!file;
(SPL)NFICHE	Simple  GetSetupMode;
(SPL)TELCHK	simple  exit;
(SPL)TELCHK	simple  setupBreaks;
(SPL)TELCHK	boolean  somewhatEqu( string results, expected );
(SPL)TELCHK	boolean simple  isReply( string reply, expected );
(SPL)TELCHK	boolean  confirm(string msg);
(SPL)TELCHK	integer  setLogChan( string comLine );
(SPL)TELCHK	oneTransfer( string source, dest, results );
(SPL)TELCHK	simple  copyStarting;
(SPL)TELCHK	finish( integer ch, ppn, name, ext );
(SPL)TELCHK	telecom( integer ppn, name, when );
(SPL)TELCHK	boolean  setCom( integer safe array fileData );
(SPL)MARKER	simple integer  GetTab (integer Table);
(SPL)MARKER	Integer  NEWS (string FN);
(SPL)LUK	helper( string program );
(SPL)LUK	boolean  attempt(string file);
(SPL)LUK	simple integer  LookupUfd(integer dskchan, dir );
(SPL)LUK	string simple  showPpn( integer ppn );
(SPL)LUK	string simple  getUname( integer channel, aun );
(SPL)LUK	simple integer  cvdirppn(integer dskchan; string dirname);
(SPL)LUK	SetPPNsearch(integer ufdChan; string gan,uun);
(SPL)LUK	boolean  findPPN(integer ufdChan );
(SPL)LUK	simple  init; setbreak(skipStar_getbreak, "*", null,"IS");
(SPL)LUK	string  genmsk(string name);
(SPL)LUK	string  genMask(string name );
(SPL)LUK	recursive  regen( integer idx; string tail, add );
(SPL)LUK	string  buildName( string maskString );
(SPL)LUK	r!p(searchSpec)  FiddleMasks( r!p(nameList) head );
(SPL)LUK	boolean simple  acceptable( string MaskStrings );
(SPL)LUK	simple  mention!directory;
(SPL)LUK	boolean  findem( integer ufdchan; r!p (searchSpec) chase );
(SPL)LUK	simple boolean  set!file(string filename);
(SPL)LUK	simple  st!db;
(SPL)LUK	simple string  nextname;
(SPL)LUK	simple  tty!names;
(SPL)LUK	simple  set!names;
(SPL)REDSCR	Simple  Print!system!table;
(SPL)FIND	internal boolean  xpnopen(
(SPL)FIND	internal simple  xpnclose; begin
(SPL)FIND	simple integer  newbuffer(integer fpos); begin
(SPL)FIND	simple integer  newrange(integer xpos); begin
(SPL)FIND	internal simple integer  xpnword(integer xpos); begin
(SPL)FIND	internal string simple  cvr50(integer r50); begin
(SPL)FIND	integer simple  r50char(integer c); return(
(SPL)FIND	internal integer simple  r50(string s); begin
(SPL)FIND	internal boolean simple  symlok(
(SPL)FIND	internal  mullok(
(SPL)MEMCHK	Internal Integer 
(SPL)CPY	simple  InitSystem;
(SPL)CPY	internal simple 
(SPL)CPY	internal simple boolean  CChild( integer Cradle );
(SPL)CPY	simple boolean  ADot( string Str );
(SPL)CPY	boolean  WantFile( Reference Integer Filename, Extension );
(SPL)CPY	FileProc( Reference Integer Chan, Cnt, Brk, FileEof;
(SPL)CPY	simple  Package( String Host );
(SPL)SFTP	simple  BlackBall;
(SPL)SFTP	simple  IntIni;
(SPL)SFTP	simple string  INCHWL;
(SPL)SFTP	simple boolean  EBOM;
(SPL)SFTP	simple  BOUT( string S );
(SPL)SFTP	simple  LBOM;
(SPL)SFTP	simple boolean  EBIM;
(SPL)SFTP	simple string  BIN;
(SPL)SFTP	simple  LBIM;
(SPL)SFTP	CheckFSerror( string FileName );
(SPL)SFTP	CheckIOerror( string FileName );
(SPL)SFTP	simple  ReadInit;
(SPL)SFTP	READ( string FileName );
(SPL)SFTP	fout( integer C; string S );
(SPL)SFTP	WRIT( string FileName );
(SPL)TMERGE	simple  setups; 
(SPL)TMERGE	simple string  cvCommand(string s); 
(SPL)TMERGE	simple boolean  cmdequ(string command, toTest);
(SPL)TMERGE	simple string  Hval(integer v);
(SPL)TMERGE	simple string  cvOut( integer x );
(SPL)TMERGE	string simple  pVersion; 
(SPL)TMERGE	simple integer  nextP( integer ptr; reference integer loc );
(SPL)TMERGE	simple string  copies( reference integer curloc, arrDat );
(SPL)TMERGE	simple integer  bytesUp( integer pseudoPointer );
(SPL)TMERGE	integer  getOutput( string prompt,help(""); integer res(-1) ); 
(SPL)TMERGE	OutPages( r!p(map1) src; integer inch, ouch, tableSize(100) );
(SPL)TMERGE	boolean  dMap( integer DiskPageNumber );
(SPL)TMERGE	expandTable;
(SPL)TMERGE	boolean  Position( integer textPage );
(SPL)TMERGE	CopyMultiple( integer first, last );
(SPL)SWITCH	Internal String  SW!INI(String Name(null), Option(null);
(SPL)SWITCH	String  Get!line;
(SPL)ASK	Internal boolean  Ask(String Prompt);
(SPL)TURNUP	SetVariable;
(SPL)TURNUP	boolean  ParseDate;
(SPL)LINKER	simple string  TmpName(String name3);
(SPL)LINKER	boolean  SomeLeft( r!p(tmp) r );
(SPL)LINKER	string  Rdt(integer BreakT; r!p(tmp) r );
(SPL)LINKER	r!p(tmp)  SetInTemp( string name );
(SPL)LINKER	runprog(string name; integer runOffset(0) );
(SPL)LINKER	simple string  defer(string s); 
(SPL)LINKER	OneSet( string FilePart, SwitchPart );
(SPL)RCR	simple  makeBreaks;
(SPL)RCR	simple string  getString;
(SPL)RCR	simple  error(string why);
(SPL)RCR	simple  Pstr( string s );
(SPL)RCR	simple  oldArg;
(SPL)RCR	simple  oneArg(string name);
(SPL)RCR	simple  twoArg(string name, conjunction );
(SPL)RCR	onDel;
(SPL)LEXSUB	Internal Boolean  LLT(String A;  String B);
(SPL)LEXSUB	Internal Boolean  LGE(String A;  String B);
(SPL)LEXSUB	Internal Boolean  LGT(String A;  String B);
(SPL)LEXSUB	Internal Boolean  LLE(String A;  String B);
(SPL)AUXLIB	internal integer  CREAUX (string UNAME);
(SPL)AUXLIB	internal simple  AUXOUT(string S);
(SPL)AUXLIB	internal simple integer  AUXIN (integer TIM(0) );
(SPL)AUXLIB	internal simple  AUXZAP;
(SPL)AUXLIB	internal simple boolean  AuxSync(string CHS; integer TIM(0));
(SPL)FICHE	string  TOK (reference string S);
(SPL)FICHE	simple  BumpFicheFrame;
(SPL)FICHE	simple string  Prompt( string P );
(SPL)FICHE	simple integer  SP( String P; Integer Def );
(SPL)FICHE	simple integer  SPO( String P; Integer Def );
(SPL)FICHE	simple boolean  SPy( String P; Boolean Def );
(SPL)FICHE	simple string  TypeMatch;
(SPL)FICHE	simple string  FindType( String Str );
(SPL)FICHE	simple string  FindPage( String Str );
(SPL)FICHE	simple string  FindLine( String Str );
(SPL)FICHE	simple  SymlokChecks;
(SPL)FICHE	AdvanceFrame;
(SPL)FICHE	simple  Print!Heading;
(SPL)FICHE	boolean  Infile( String F );
(SPL)FICHE	string  get!line;
(SPL)FICHE	Each!file;
(SPL)FICHE	Simple  GetSetupMode;
(SPL)WHO	simple integer  StrMatch( String A,B );
(SPL)WHO	Simple  UserProc(Reference Integer Ppn; Reference String Name );
(SPL)FINDIT	Simple Simple String  CvDate ( integer Date.In );
(SPL)FINDIT	Simple String  CvTime( Integer Time );
(SPL)FINDIT	Simple Integer  Wild( Integer Card );
(SPL)FINDIT	Simple String  WildSpec( Reference String S; Reference Integer B );
(SPL)FINDIT	Simple Integer  EatOct( String S; Reference Integer Mask );
(SPL)FINDIT	Simple Integer  ScanPPN( Reference String S; Reference Integer M );
(SPL)FINDIT	String  GetSpec( Reference String S; Reference Integer P, M, B );
(SPL)FINDIT	Simple Integer  SubsetSpec( Integer F1, E1, F2, E2 );
(SPL)FINDIT	CopyRecord( r!p (file) That; Integer Name, Ext );
(SPL)FINDIT	CreateLinkRecord;
(SPL)FINDIT	boolean  WantUfd( Reference Integer Aun );
(SPL)FINDIT	UfdProc( Reference Integer Chan; Integer Array Lkb );
(SPL)FINDIT	boolean  WantFile( Reference Integer Filename, Extension );
(SPL)FINDIT	boolean  ThisFile( Reference Integer Filename, Extension );
(SPL)FINDIT	FileProc(Reference Integer Chan,Count,Brk,FileEof; Integer Array LKB);
(SPL)FINDIT	ReadFileList;
(SPL)FINDIT	PrintMissingFiles;
(SPL)PRUNE	simple  destroy( r!p(any!class) rp);
(SPL)PRUNE	r!p(fdes)  newf( string name, ext(null), 
(SPL)PRUNE	r!p(fdes)  xrxf( r!p(fdes) old );
(SPL)PRUNE	string  prtf( r!p(fdes) it );
(SPL)PRUNE	integer  compare( r!p(fdes) first, second );
(SPL)PRUNE	r!p(fdes)  merge( r!p(fdes) l1, l2 );
(SPL)PRUNE	r!p(fdes)  sort( r!p(fdes) r );
(SPL)PRUNE	applies(  doit );
(SPL)PRUNE	simple  setupX;
(SPL)PRUNE	setFileCriteria(string filename);
(SPL)PRUNE	EatUser;
(SPL)PRUNE	boolean  ringSearch( reference r!p(fdes) result;
(SPL)PRUNE	r!p(fdes)  find( string name, ext(null), user(null) );
(SPL)PRUNE	rpt( r!p(fdes) ring );
(SPL)PRUNE	boolean  verify( r!p(fdes) ring );
(SPL)PRUNE	r!p(cell)  cons(r!p(any!class) car, cdr );
(SPL)PRUNE	r!p(cell) simple  c} &{a1}&{a2}&{a3}&{a4}& {r(r!p(cell) it);
(SPL)PRUNE	simple  rplc} &{a1}&{a2}&{a3}&{a4}& {(r!p(cell) it,nv);
(SPL)PRUNE	       simple  inpbrks;
(SPL)PRUNE	r!p(fdes)  cvfd(string line);
(SPL)PRUNE	splice(r!p(fdes) a,b);
(SPL)PRUNE	addon;
(SPL)PRUNE	r!p(fdes)  ReadData( string Prunefile );
(SPL)PRUNE	r!p(fdes)  GrabFiles( integer PPN(0); string user(null) );
(SPL)PRUNE	writeData( R!p(fdes) ring; string FileName(null) );
(SPL)PRUNE	C!command( reference r!p(fdes) it );
(SPL)PRUNE	F!command( reference r!p(fdes) it );
(SPL)PRUNE	W!command( reference r!p(fdes) it );
(SPL)PRUNE	R!command( reference r!p(fdes) it );
(SPL)PRUNE	D!command( reference r!p(fdes) it );
(SPL)PRUNE	M!command( reference r!p(fdes) it );
(SPL)PRUNE	U!command( reference r!p(fdes) it );
(SPL)PRUNE	simple  setup!Text!Channel;
(SPL)PRUNE	T!command( reference r!p(fdes) it );
(SPL)PRUNE	 external  bail;
(SPL)PRUNE	simple  raid;
(SPL)PRUNE	boolean  one!command(string text);
(SPL)PRUNE	r!p(fdes)  mergein( r!p(fdes) lis, Blanks );
(SPL)PRUNE	simple  restoreCase; ttyup( baseCase ); cleanup restoreCase;
(SPL)TWOUP	simple  setupBreaks;
(SPL)TWOUP	simple boolean  match( string reply, pattern );
(SPL)TWOUP	simple string  pad( integer columns );
(SPL)TWOUP	simple string  clip( string s; reference integer size );
(SPL)TWOUP	boolean simple  setSwitches( string switchList );
(SPL)TWOUP	integer  getSource( string prompt; 
(SPL)TWOUP	integer  setOutput( string prompt, defaultDevice, defaultFile);
(SPL)TWOUP	boolean simple  breakUp( string source; integer index );
(SPL)TWOUP	simple boolean  setupPage;
(SPL)TWOUP	simple  clearPage;
(SPL)TWOUP	simple integer  getLine;
(SPL)TWOUP	string simple  nextLine;
(SPL)TWOUP	simple r!p(penders)  new!pend;
(SPL)TWOUP	doOnes;
(SPL)TWOUP	doTwos;
(SPL)PAGE	boolean  WantFile( Reference Integer Filename, Extension );
(SPL)PAGE	FileProc( Reference Integer Chan, Cnt, Brk, FileEof; Integer Array LKB );
(SPL)WHEN	integer  CheckJobs( string UserName );
(SPL)WHEN	integer  CheckLogout( string USER );
(SPL)WHEN	string  Expand (integer DATE);
(SPL)WHEN	PrintNames;
(SPL)CRFSYM	ListIni;
(SPL)CRFSYM	InitReserve( String Array A );
(SPL)CRFSYM	ReservedWordIni;
(SPL)CRFSYM	BrkIni;
(SPL)CRFSYM	Initialize!switches;
(SPL)CRFSYM	Boolean  LLT(String A;  String B);
(SPL)CRFSYM	string  TOK (reference string S);
(SPL)CRFSYM	string  EXIT;         ! string so it can be "printed" [ugh];
(SPL)CRFSYM	simple boolean  Numeric(String Str);
(SPL)CRFSYM	simple string  GetFil( Reference string Str, Dev;
(SPL)CRFSYM	simple  Print!Header;
(SPL)CRFSYM	simple  Print!Line(String Num!Tab,Line);
(SPL)CRFSYM	simple  GetLine;
(SPL)CRFSYM	simple string  Multi!Line(Integer Char);
(SPL)CRFSYM	simple string  NextName;
(SPL)CRFSYM	Recursive  New!Symbol(String Name, Type; Integer New!Value);
(SPL)CRFSYM	Print!Sorted!List(Integer Size; List Itemvar LS; Boolean Flag);
(SPL)CRFSYM	Print!Symbols(String Type, Banner; Boolean Flag(True) );
(SPL)CRFSYM	Simple String  TokenType(String Name);
(SPL)CRFSYM	simple  HELP(String Inout);
(SPL)CRFSYM	simple integer  checksw(String Nam, Txt);
(SPL)CRFSYM	boolean  legal!switch(Reference string S; String Inout);
(SPL)CRFSYM	simple string  MyTime( integer D, T );
(SPL)CRFSYM	FRONT!END;
