PROCEDURE QUICKIE.SAVE3

ENTIRE.PROCEDURE:
BEGIN

  PROCEDURE OUTPUT.HOURS.1(OUTPUT.FIELD.1)
    BEGIN
      PRINT (OUTPUT.FIELD.1 / 60) AS '3ZN', ':',
            (OUTPUT.FIELD.1 - ((OUTPUT.FIELD.1 / 60) * 60)) AS '2N'
    END

  PROCEDURE OUTPUT.HOURS.2(OUTPUT.FIELD.2)
    BEGIN
      PRINT (OUTPUT.FIELD.2 / 60) AS '5ZN', ':',
            (OUTPUT.FIELD.2 - ((OUTPUT.FIELD.2 / 60) * 60)) AS '2N'
    END

  FIELDS

    AVAILABILITY                           AS '2ZN.NN',
    AVG.AVAIL                              AS '2ZN.NN',
    AVG.MTBF                               AS '7N',
    AVG.MTBI                               AS '7N',
    AVG.MTTR                               AS '7N',
    AVG.REL                                AS '2ZN.NN',

    CLASS.ABBREV                           AS '3C',
    CLASS.INPUT                            AS '4C',
    CLASS.MATCH                            AS '3C' DEFAULT 'NO',
    CODE.TYPE                              AS '3N',
    CONTINUE                               AS '3C',

    DATE.PERIOD                            AS 'C',

    HARDWARE.REPAIR.PERIODS                AS '4N',

    INHOUSE.COUNT                          AS 'N',
    INHOUSE.FLAG                           AS '3C' DEFAULT 'NO',

    MACHINE.CLASS                          AS '3N',
    MONTH.COUNT                            AS '2N.NN',
    MTBF                                   AS '5N',
    MTBI                                   AS '5N',
    MTTR                                   AS '5N',

    NO.THRESH.COUNT                        AS '2N',

    ODD.DAYS                               AS '2N.NN',

    PREVIOUS.INHOUSE                       AS '3N',
    PREVIOUS.CLASS                         AS 'N',
    PREVIOUS.CODE                          AS '3N',
    PREVIOUS.CODE.TYPE                     AS '3C',

    RELIABILITY                            AS '2ZN.NN',
    R.END.DATE                             AS DATE 'MM-DD-YY',
    REPAIR.TIME                            AS '7N',
    REPORT.COUNT                           AS '2N',
    REPORT.END.DATE                        AS DATE 'MM-DD-YY',
    REPORT.NO                              AS '2N',
    REPORT.START.DATE                      AS DATE 'MM-DD-YY',
    R.START.DATE                           AS DATE 'MM-DD-YY',

    SCHED.TIME                             AS '7N',
    SET.NO                                 AS '2N',
    SITE.IDENT                             AS 'C',
    SITE.INPUT                             AS '3C',
    SITES                                  AS '10C',
    START.MONTH                            AS '2N',
    STEP.DATE                              AS DATE 'MM-YY',
    SUB.SYS.COUNT                          AS '2N',
    SUB.TOTAL.AVAIL                        AS '4N.NN',
    SUB.TOTAL.INTERRUPTIONS             AS '4N',
    SUB.TOTAL.INTERRUPT.TIME               AS '7N',
    SUB.TOTAL.MTBF                         AS '7N',
    SUB.TOTAL.MTBI                         AS '7N',
    SUB.TOTAL.MTTR                         AS '7N',
    SUB.TOTAL.REL                          AS '4N.NN',
    SUB.TOTAL.SCHED.TIME                   AS '7N',
    SUB.TOTAL.TIME.UP                      AS '7N',
    SUB.TOTAL.TOTAL.TIME                   AS '7N',
    SUB.TOT.UNSCH.INTERRUPTIONS          AS '4N',
    SUB.TOT.UNSCH.INTERRUPT.TIME         AS '7N',
    SYS.COUNT                              AS '2N',

    TEMP.AREA                              AS '7N',
    TEMP.DATE                              AS DATE 'MM-DD-YY',
    TOTAL.AVAIL                            AS '4N.NN',
    TOTAL.CRASHES                          AS '2ZN.N',
    TOTAL.INTERRUPTIONS                    AS '4N',
    TOTAL.INTERRUPT.TIME                   AS '7N',
    TOTAL.MTBF                             AS '7N',
    TOTAL.MTBI                             AS '7N',
    TOTAL.MTTR                             AS '7N',
    TOTAL.REL                              AS '4N.NN',
    TOTAL.SCHED.TIME                       AS '7N',
    TOTAL.SCHEDULED.TIME                   AS '7N',
    TOTAL.TIME.UP                          AS '7N',
    TOTAL.TIME.UP.UNSCHED                  AS '7N',
    TOTAL.TOTAL.TIME                       AS '7N',
    TOTAL.UNSCHED.INTERRUPTIONS            AS '4N',
    TOTAL.UNSCHED.INTERRUPT.TIME           AS '7N',
    TOT.AVG                                AS 'N'

  RELATION CLASS.TEMP IS

    KEY CLASS.ABBREV

    DATA SET.NO

  RELATION INHOUSE IS

    KEY SYSNO

  RELATION NO.THRESHOLD.LIST IS

    KEY CLASS.ABBREV

  RELATION PERFORMANCE.DATA IS

    KEY SET.NO,
        SYSNO,
        SYSTEM.ID

    DATA TOTAL.TIME,
         SCHEDULED.TIME,
         SCHED.TIME,
         TIME.UP,
         INTERRUPT.TIME,
         UNSCHED.INTERRUPT.TIME,
         INTERRUPTIONS,
         UNSCHEDULED.INTERRUPTIONS,
         REPAIR.TIME,
         HARDWARE.REPAIR.PERIODS,
         TIME.UP.UNSCHED,
         INHOUSE.FLAG

  RELATION PERCENTAGES IS

    KEY SYSNO,
        SYSTEM.ID

    DATA TOTAL.TIME,
         SCHED.TIME,
         TIME.UP,
         TIME.UP.UNSCHED,
         RELIABILITY,
         AVAILABILITY,
         INTERRUPTIONS,
         UNSCHEDULED.INTERRUPTIONS

  RELATION SYSTEM.TEMP IS
    KEY SET.NO,
        SYSNO,
        SYSTEM.ID

    DATA CLASS.ABBREV


  REPORT TO OUTPUT.FILE
    PAGE.SIZE 66
    TOP.MARGIN 1
    BOTTOM.MARGIN 2

  TYPE @CR, 'IF THIS REPORT IS PRINTED DIRECTLY TO THE TERMINAL, IT IS', @CR,
      'NECESSARY THAT THE TERMINAL CURRENTLY HAS A LINE LENGTH', @CR,
      'OF AT LEAST 132 CHARACTERS.  WOULD YOU LIKE TO CONTINUE? '
  GO:
  BEGIN
    ACCEPT CONTINUE

    IF CONTINUE = 'YES' OR 'Y'
      THEN NOTHING
      ELSE IF CONTINUE = 'NO' OR 'N'
             THEN FINISH ENTIRE.PROCEDURE
             ELSE BEGIN
                    TYPE @CR, 'PLEASE ENTER "YES" OR "Y" OR "NO" OR "N": '
                    REPEAT GO
                  END
  END  % go %

  GET.DATES:
  BEGIN
    TYPE @CR, 'PLEASE ENTER THE DATE PERIOD OF THIS REPORT.  THIS ', @CR,
         'MONTH(T), LAST MONTH(L), OR A DATE RANGE(R): '
    ACCEPT DATE.PERIOD

    CONDITIONAL ON DATE.PERIOD
      BEGIN
        'T': BEGIN
               LET TEMP.DATE = TODAY AS DATE 'MM-YY'
               LET REPORT.START.DATE = FIRST.DAY(TEMP.DATE)
               LET REPORT.END.DATE = TODAY AS DATE 'MM-DD-YY'
               LET ODD.DAYS = (DAY(TODAY) - DAY(FIRST.DAY(TEMP.DATE))) + 1
               LET MONTH.COUNT = ODD.DAYS / DAY(LAST.DAY(TEMP.DATE))
               FINISH GET.DATES
             END

        'L': BEGIN
               LET TEMP.DATE = TODAY AS DATE 'MM-YY'
               SUBTRACT 1 FROM MONTH(TEMP.DATE)
               LET REPORT.START.DATE = FIRST.DAY(TEMP.DATE)
               LET REPORT.END.DATE = LAST.DAY(TEMP.DATE)
               LET MONTH.COUNT = 1
               FINISH GET.DATES
             END

        'R': BEGIN

  GET.RANGE:
  BEGIN
                   TYPE @CR, 'PLEASE ENTER THE REPORT START AND END DATES AS ',
                        '"MM-DD-YY"', @CR, '(SEPARATE THE ENTRIES WITH COMMAS): '
                   ACCEPT REPORT.START.DATE, REPORT.END.DATE

                   IF REPORT.START.DATE GT REPORT.END.DATE
                     THEN BEGIN
                            TYPE @CR, 'THE REPORT START DATE IS GREATER THAN THE ',
                                 'END DATE.'
                            REPEAT GET.RANGE
                          END

                   IF REPORT.END.DATE GT TODAY AS DATE 'MM-DD-YY'
                     THEN BEGIN
                            TYPE @CR, 'THE REPORT END DATE CANNOT BE GREATER ',
                                 'THAN THE', @CR, 'CURRENT DATE.'
                            REPEAT GET.RANGE
                          END
  END  % get.range %

                   LET STEP.DATE = REPORT.START.DATE
                   LET START.MONTH = MONTH(REPORT.START.DATE)
                   LET ODD.DAYS = 0
                   LET MONTH.COUNT = 0
                   WHILE MONTH(STEP.DATE) LT MONTH(REPORT.END.DATE)
                     DO BEGIN
                          IF (MONTH(STEP.DATE) = START.MONTH) AND (DAY(REPORT.START.DATE) NE 1)
                            THEN BEGIN
                                   LET ODD.DAYS = (DAY(LAST.DAY(STEP.DATE)) -
                                                  DAY(REPORT.START.DATE)) + 1
                                   LET R.START.DATE = REPORT.START.DATE
                                 END
                            ELSE BEGIN
                                   LET MONTH.COUNT = MONTH.COUNT + 1
                                   LET R.START.DATE = FIRST.DAY(STEP.DATE)
                                 END
                          LET R.END.DATE = LAST.DAY(STEP.DATE)
                          ADD 1 TO MONTH(STEP.DATE)
                        END
                 IF MONTH(STEP.DATE) = START.MONTH
                   THEN BEGIN
                          IF (DAY(REPORT.START.DATE) = 1) AND (REPORT.END.DATE = LAST.DAY(STEP.DATE))
                            THEN LET MONTH.COUNT = 1
                            ELSE BEGIN
                                   LET ODD.DAYS = (DAY(REPORT.END.DATE) - DAY(REPORT.START.DATE)) + 1
                                   LET MONTH.COUNT = ODD.DAYS / DAY(LAST.DAY(STEP.DATE))
                                 END
                          LET R.START.DATE = REPORT.START.DATE
                          LET R.END.DATE = REPORT.END.DATE
                        END
                   ELSE BEGIN
                          IF REPORT.END.DATE = LAST.DAY(STEP.DATE)
                            THEN LET MONTH.COUNT = (MONTH.COUNT + 1) + (ODD.DAYS / 30)
                            ELSE BEGIN
                                   LET ODD.DAYS = ODD.DAYS + DAY(REPORT.END.DATE)
                                   LET MONTH.COUNT = MONTH.COUNT + (ODD.DAYS / 30)
                                 END
                          LET R.START.DATE = FIRST.DAY(STEP.DATE)
                          LET R.END.DATE = REPORT.END.DATE
                        END
             END  % conditional on 'r' %
      END  % conditional on date.period %
  END  % get.dates %
GET.SITE:
BEGIN
  TYPE @CR, 'PLEASE ENTER THE SITE TO BE REPORTED.  CUPERTINO(CUP),',
       @CR, 'VALLEY FORGE(VF), DALLAS/HOUSTON(DH), FREMONT(FRE), OR',
       @CR, 'ALL SITES(ALL): '
REP.GET.SITE:
BEGIN
  ACCEPT SITE.INPUT

  CONDITIONAL ON SITE.INPUT
    BEGIN
      'CUP': LET SITES = '1'
      'VF': LET SITES = '2'
      'DH': LET SITES = '3567'
      'FRE': LET SITES = '8'
      'ALL': LET SITES = '1235678'
    END
    ELSE BEGIN
           TYPE @CR, 'THIS CHOICE FOR THE SITE DOES NOT EXIST.  PLEASE ENTER', @CR,
                'THE SITE TO BE REPORTED: '
           REPEAT REP.GET.SITE
         END
END  % rep.get.site %
END  % get.site %
GET.CLASS:
BEGIN
  TYPE @CR, 'PLEASE ENTER THE MACHINE CLASS TO BE REPORTED (FOR A LIST', @CR,
       'OF THE CLASS CHOICES, TYPE "HELP"): '
REP.GET.CLASS:
BEGIN
  ACCEPT CLASS.INPUT

  IF CLASS.INPUT = 'H' OR 'HE' OR 'HEL' OR 'HELP'
    THEN BEGIN
           TYPE @CR, 'THE CLASS CHOICES ARE:'
           FOR EACH CLASS.
             TYPE @CR, @TAB 5, TRIM(ABBREV)
           TYPE @CR, @TAB 5, 'ALL', @CR
         END
  IF CLASS.INPUT = 'ALL'
    THEN NOTHING
    ELSE BEGIN
           FOR EACH CLASS.
             IF ABBREV = CLASS.INPUT
               THEN LET CLASS.MATCH = 'YES'
           IF CLASS.MATCH = 'NO'
             THEN BEGIN
                    TYPE @CR, 'THERE IS NO SUCH CLASS........', @CR,
                         'PLEASE ENTER THE CLASS TO BE REPORTED: '
                    REPEAT REP.GET.CLASS
                  END
         END
END  % rep.get.class %
END  % get.class %

LET SYS.COUNT = 0
IF CLASS.INPUT = 'ALL'
  THEN BEGIN
         LET PREVIOUS.CLASS = 0
         LET REPORT.COUNT = 0
         FOR EACH SYSTEM. WHERE (START.DATE LE REPORT.END.DATE AS DATE 'MM-DD-YY' AND END.DATE GE
                                REPORT.START.DATE AS DATE 'MM-DD-YY') SORTED ON CLASS.ID
           BEGIN
             SELECT CLASS. VIA (ID = CLASS.ID)
               THEN BEGIN
                      CONDITIONAL ON SITE.ID
                        BEGIN
                          1: LET SITE.IDENT = '1'
                          2: LET SITE.IDENT = '2'
                          3: LET SITE.IDENT = '3'
                          5: LET SITE.IDENT = '5'
                          6: LET SITE.IDENT = '6'
                          7: LET SITE.IDENT = '7'
                          8: LET SITE.IDENT = '8'
                        END
                        ELSE LET SITE.IDENT = ''
                      IF POSITION(TRIM(SITES),SITE.IDENT) > 0
                        THEN BEGIN
                               SELECT THRESHOLD. VIA (ABBREV = ABBREV OF CLASS.)
                                 THEN BEGIN
                                        IF CLASS.ID NE PREVIOUS.CLASS
                                          THEN BEGIN
                                                 LET PREVIOUS.CLASS = CLASS.ID
                                                 ADD 1 TO REPORT.COUNT
                                                 INSERT INTO CLASS.TEMP USING (ABBREV FOR CLASS.ABBREV,
                                                                              REPORT.COUNT FOR SET.NO)
                                               END
                                        INSERT INTO SYSTEM.TEMP USING (REPORT.COUNT FOR SET.NO,
                                                                      ID OF SYSTEM. FOR SYSTEM.ID,
                                                                      ABBREV FOR CLASS.ABBREV)
                                      END  % select threshold. then %
                                 ELSE SELECT NO.THRESHOLD.LIST VIA KEY
                                        THEN NOTHING
                                        ELSE INSERT INTO NO.THRESHOLD.LIST USING (ABBREV FOR CLASS.ABBREV)
                             END  % if position %
                    END  % select class. %
           END  % for each system. %
         IF COUNT(CLASS.) NE COUNT(CLASS.TEMP)
           THEN BEGIN
                  TYPE @CR, 'THERE ARE CURRENTLY NO SYSTEMS OF THE FOLLOWING CLASS(ES):'
                  FOR EACH CLASS.
                    SELECT CLASS.TEMP VIA (CLASS.ABBREV = ABBREV)
                      THEN NOTHING
                      ELSE SELECT NO.THRESHOLD.LIST VIA (CLASS.ABBREV = ABBREV)
                             THEN NOTHING
                             ELSE TYPE @CR, @TAB 5, TRIM(ABBREV)
                END
         IF COUNT(NO.THRESHOLD.LIST) > 0
           THEN BEGIN
                  TYPE @CR, 'THE REPORT(S) FOR THE FOLLOWING CLASS(ES) CANNOT BE', 
                       @CR, 'GENERATED BECAUSE THERE ARE NO THRESHOLD VALUES:'
                  FOR EACH NO.THRESHOLD.LIST
                    TYPE @CR, @TAB 5, CLASS.ABBREV
                END
         IF REPORT.COUNT = 0
           THEN FINISH ENTIRE.PROCEDURE
       END  % if class.input = 'all' %
  ELSE BEGIN
         FOR EACH CLASS. WHERE (ABBREV = CLASS.INPUT)
           FOR EACH SYSTEM. WHERE (CLASS.ID = ID OF CLASS. AND START.DATE LE REPORT.END.DATE AS
                                  DATE 'MM-DD-YY' AND END.DATE GE REPORT.START.DATE AS DATE 'MM-DD-YY')
             BEGIN
               CONDITIONAL ON SITE.ID
                 BEGIN
                   1: LET SITE.IDENT = '1'
                   2: LET SITE.IDENT = '2'
                   3: LET SITE.IDENT = '3'
                   5: LET SITE.IDENT = '5'
                   6: LET SITE.IDENT = '6'
                   7: LET SITE.IDENT = '7'
                   8: LET SITE.IDENT = '8'
                 END
                 ELSE LET SITE.IDENT = ''
               IF POSITION(TRIM(SITES),SITE.IDENT) > 0
                 THEN BEGIN
                        SELECT THRESHOLD. VIA (ABBREV = CLASS.INPUT)
                          THEN INSERT INTO SYSTEM.TEMP USING (1 FOR SET.NO,
                                                             ID OF SYSTEM. FOR SYSTEM.ID,
                                                             ABBREV FOR CLASS.ABBREV)
                        ADD 1 TO SYS.COUNT
                      END
             END
         IF SYS.COUNT = 0
           THEN BEGIN
                  TYPE @CR, 'THERE ARE CURRENTLY NO SYSTEMS OF THIS CLASS AT THIS SITE(S).'
                  FINISH ENTIRE.PROCEDURE
                END
           ELSE IF COUNT(SYSTEM.TEMP) = 0
                  THEN BEGIN
                         TYPE @CR, 'THIS REPORT CANNOT BE GENERATED - THERE ARE NO THRESHOLD',
                              @CR, 'VALUES FOR THIS CLASS.'
                         FINISH ENTIRE.PROCEDURE
                       END
                  ELSE BEGIN
                         LET REPORT.COUNT = 1
                         INSERT INTO CLASS.TEMP USING (CLASS.INPUT FOR CLASS.ABBREV,
                                                      1 FOR SET.NO)
                       END
       END  % if class.input = 'all' else %

  TYPE @CR, @CR, 'PLEASE WAIT ........', @CR

  FOR EACH SYSTEM.TEMP
      BEGIN
        LET TOTAL.TOTAL.TIME = 0
        LET TOTAL.SCHEDULED.TIME = 0
        LET TOTAL.TIME.UP = 0
        LET TOTAL.INTERRUPT.TIME = 0
        LET TOTAL.UNSCHED.INTERRUPT.TIME = 0
        LET TOTAL.INTERRUPTIONS = 0
        LET TOTAL.UNSCHED.INTERRUPTIONS = 0
        LET TOTAL.REPAIR.TIME = 0
        LET TOTAL.HARDWARE.REPAIR.PERIODS = 0
        LET TOTAL.TIME.UP.UNSCHED = 0
        LET PREVIOUS.CODE = 0
        LET PREVIOUS.CODE.TYPE = '   '

        FOR EACH TIME. VIA SYSTEM.ID = SYSTEM.ID OF SYSTEM.TEMP, WHERE (DATE. GE
                           REPORT.START.DATE AND DATE. LE REPORT.END.DATE)
          BEGIN
            IF DATE. CHANGING
              THEN LET TOTAL.TOTAL.TIME = TOTAL.TOTAL.TIME + 1440
            SELECT CODE. VIA (ID = CODE.ID)
              THEN BEGIN
                     CONDITIONAL ON TYPE.ABBREV
                       BEGIN
                    'UP': BEGIN
                                 IF SCHED.FLAG = 1
                                   THEN LET TOTAL.SCHEDULED.TIME = (STOP.TIME - START.TIME) + TOTAL.SCHEDULED.TIME
                                   ELSE LET TOTAL.TIME.UP.UNSCHED = (STOP.TIME - START.TIME) +
                                                                    TOTAL.TIME.UP.UNSCHED

                                 LET TOTAL.TIME.UP = (STOP.TIME - START.TIME) + TOTAL.TIME.UP
                               END  % conditional on 'up' %

                         'SDN': BEGIN
                                  IF SCHED.FLAG = 1
                                    THEN BEGIN
                                           IF PREVIOUS.CODE NE ID OF CODE.
                                             THEN IF PREVIOUS.CODE.TYPE = 'UP'
                                                    THEN BEGIN
                                                           ADD 1 TO TOTAL.INTERRUPTIONS
                                                           ADD 1 TO TOTAL.UNSCHED.INTERRUPTIONS
                                                         END
                                           LET TOTAL.UNSCHED.INTERRUPT.TIME = (STOP.TIME - START.TIME) +
                                                                              TOTAL.UNSCHED.INTERRUPT.TIME
                                         END
                                    ELSE IF PREVIOUS.CODE NE ID OF CODE.
                                           THEN IF PREVIOUS.CODE.TYPE = 'UP'
                                                  THEN ADD 1 TO TOTAL.INTERRUPTIONS

                                  LET TOTAL.INTERRUPT.TIME = (STOP.TIME - START.TIME) + TOTAL.INTERRUPT.TIME
                                END  % conditional on 'sdn' %

                         'LST': BEGIN
                                  IF SCHED.FLAG = 1
                                    THEN BEGIN
                                           IF PREVIOUS.CODE NE ID OF CODE.
                                             THEN IF PREVIOUS.CODE.TYPE = 'UP'
                                                    THEN BEGIN
                                                           ADD 1 TO TOTAL.INTERRUPTIONS
                                                           ADD 1 TO TOTAL.UNSCHED.INTERRUPTIONS
                                                         END

                                           LET TOTAL.UNSCHED.INTERRUPT.TIME = (STOP.TIME - START.TIME) +
                                                                              TOTAL.UNSCHED.INTERRUPT.TIME

                                           IF GROUP.ID OF CODE. = 5
                                             THEN BEGIN
                                                    ADD 1 TO TOTAL.HARDWARE.REPAIR.PERIODS
                                                    LET TOTAL.REPAIR.TIME = (STOP.TIME - START.TIME) + TOTAL.REPAIR.TIME
                                                  END
                                         END
                                    ELSE IF PREVIOUS.CODE NE ID OF CODE.
                                           THEN IF PREVIOUS.CODE.TYPE = 'UP'
                                                  THEN ADD 1 TO TOTAL.INTERRUPTIONS

                                  LET TOTAL.INTERRUPT.TIME = (STOP.TIME - START.TIME) + TOTAL.INTERRUPT.TIME
                                END  % conditional on 'lst' %
                       END  % conditional on type.abbrev %

                      LET PREVIOUS.CODE = ID OF CODE.
                      LET PREVIOUS.CODE.TYPE = TYPE.ABBREV OF CODE.
                    END  % select code. %
            END  % for each time. %

        LET TOTAL.TIME = TOTAL.TOTAL.TIME
        LET SCHEDULED.TIME = TOTAL.SCHEDULED.TIME
        LET TIME.UP = TOTAL.TIME.UP
        LET INTERRUPT.TIME = TOTAL.INTERRUPT.TIME
        LET UNSCHED.INTERRUPT.TIME = TOTAL.UNSCHED.INTERRUPT.TIME
        LET INTERRUPTIONS = TOTAL.INTERRUPTIONS
        LET UNSCHEDULED.INTERRUPTIONS = TOTAL.UNSCHED.INTERRUPTIONS
        LET REPAIR.TIME = TOTAL.REPAIR.TIME
        LET HARDWARE.REPAIR.PERIODS = TOTAL.HARDWARE.REPAIR.PERIODS
        LET TIME.UP.UNSCHED = TOTAL.TIME.UP.UNSCHED
        IF SYSNO = 13 OR 33 OR 56
          THEN INSERT INTO PERFORMANCE.DATA USING ('YES' FOR INHOUSE.FLAG)
          ELSE INSERT INTO PERFORMANCE.DATA
      END  % for each system.temp %

TYPE @CR, 'THIS RUN OF THIS PROCEDURE WILL GENERATE ', REPORT.COUNT,
     ' REPORT(S).', @CR, 'THE REPORT(S) MAY BE PRINTED EITHER TO THE ',
     'TERMINAL OR', @CR, 'OR TO A FILE(S).', @CR

LET REPORT.NO = 1
  WHILE REPORT.NO LE REPORT.COUNT
    DO FOR EACH CLASS.TEMP WHERE SET.NO = REPORT.NO
         BEGIN
GET.DESTINATION:
BEGIN
                TYPE @CR, 'THIS REPORT IS FOR CLASS = ', CLASS.ABBREV, '.'
REP.GET.DEST:
BEGIN
                TYPE @CR, 'PLEASE ENTER THE DESTINATION FOR THIS REPORT: '
                ACCEPT OUTPUT.FILE

                IF OUTPUT.FILE = 'T' OR 'TE' OR 'TER' OR 'TERM' OR 'TERMI' OR
                                 'TERMIN' OR 'TERMINA' OR 'TERMINAL'
                   THEN BEGIN
                          IF OUTPUT.FILE = 'T' OR 'TE'
                            THEN LET OUTPUT.FILE = DEFAULT
                          TYPE @CR, 'THIS REPORT WILL BE PRINTED TO THE TERMINAL.', @CR
                          FINISH GET.DESTINATION
                        END
                 IF SUBSTR(OUTPUT.FILE,1,1) NE '('
                   THEN IF LENGTH(OUTPUT.FILE) LE 10
                          THEN BEGIN
                                 IF POSITION(OUTPUT.FILE,'.') = 0
                                   THEN BEGIN
                                          IF LENGTH(OUTPUT.FILE) LE 6
                                            THEN FINISH REP.GET.DEST
                                        END
                                    ELSE IF POSITION(OUTPUT.FILE,'.') LE 7
                                           THEN IF (LENGTH(OUTPUT.FILE) - POSITION(OUTPUT.FILE,'.')) LE 3
                                                  THEN FINISH REP.GET.DEST
                               END
                TYPE @CR, 'IF THE DESTINATION OF A REPORT IS A FILE, ENTER ONLY THE', @CR,
                    'FILE IDENTIFIER (I.E., DO NOT INCLUDE A USER NAME).  THE', @CR,
                    'FILE IDENTIFIER SHOULD NOT TOTAL MORE THAN 10 CHARACTERS', @CR,
                    '(A 6 CHARACTER FILE NAME AND AN OPTIONAL SEPARATING', @CR,
                    'PERIOD AND 3 CHARACTER EXTENSION).'
               REPEAT REP.GET.DEST
END  % rep.get.dest %

                LET OUTPUT.FILE = '(' + TRIM(USER.NAME) + ')' + OUTPUT.FILE
                TYPE @CR, 'THIS REPORT WILL BE PRINTED TO THE FILE ', TRIM(OUTPUT.FILE), '.', @CR

END  % get.destination %
                WRITE REPORT
                BEGIN
      LET TOTAL.TOTAL.TIME = 0
      LET SUB.TOTAL.TOTAL.TIME = 0
      LET TOTAL.SCHED.TIME = 0
      LET SUB.TOTAL.SCHED.TIME = 0
      LET TOTAL.TIME.UP = 0
      LET SUB.TOTAL.TIME.UP = 0
      LET TOTAL.INTERRUPT.TIME = 0
      LET SUB.TOTAL.INTERRUPT.TIME = 0
      LET TOTAL.UNSCHED.INTERRUPT.TIME = 0
      LET SUB.TOT.UNSCH.INTERRUPT.TIME = 0
      LET TOTAL.INTERRUPTIONS = 0
      LET SUB.TOTAL.INTERRUPTIONS = 0
      LET TOTAL.UNSCHED.INTERRUPTIONS = 0
      LET SUB.TOT.UNSCH.INTERRUPTIONS = 0
      LET TOTAL.MTBI = 0
      LET SUB.TOTAL.MTBI = 0
      LET TOTAL.MTBF = 0
      LET SUB.TOTAL.MTTR = 0
      LET TOTAL.MTTR = 0
      LET SUB.TOTAL.MTTR = 0
      LET TOTAL.REL = 0
      LET SUB.TOTAL.REL = 0
      LET TOTAL.AVAIL = 0
      LET SUB.TOTAL.AVAIL = 0
      LET SYS.COUNT = 0
      LET SUB.SYS.COUNT = 0
      LET PREVIOUS.INHOUSE = 0
      LET INHOUSE.COUNT = 0

      PRINT @SKIP 1, @TAB 53, 'OVERALL SYSTEM PERFORMANCE', @CR, @TAB 52,
            'FROM: ', REPORT.START.DATE, '  TO: ', REPORT.END.DATE, @SKIP 1
      PRINT @TAB 20, '------HOURS AVAILABLE------', @TAB 36, '---------MEAN ',
            'TIME----------', @TAB 4, '% UP DURING', @CR
      PRINT @TAB 9, 'SYSTEM', @TAB 26, 'ACTUAL', @TAB 3, 'INTERRUPT HOURS',
            @TAB 4, 'INTERRUPTS', @TAB 5, 'BETWEEN', @TAB 4, 'BETWEEN',
            @TAB 5, 'TO', @TAB 5, 'SCHED', @TAB 4, '24', @CR
      PRINT @TAB 6, 'NUMBER', @TAB 2, 'TYPE', @TAB 3, 'TOTAL', @TAB 5, 'SCHED',
            @TAB 5, 'TOTAL', @TAB 4, 'TOTAL', @TAB 3, 'UNSCHED', @TAB 2, 'TOTAL',
            @TAB 2, 'UNSCHED', @TAB 2, 'INTERRUPTS', @TAB 2, 'FAILURE', @TAB 3,
            'REPAIR', @TAB 3, 'HOURS', @TAB 3, 'HOURS', @CR

      FOR EACH PERFORMANCE.DATA VIA (SET.NO = REPORT.NO)
        BEGIN
          PRINT @CR, @TAB 7, SYSNO, @TAB 4

          PRINT CLASS.ABBREV, @TAB 3

          LET TEMP.AREA = TOTAL.TIME
          APPLY OUTPUT.HOURS.1(TEMP.AREA)
          PRINT @TAB 3

          LET SCHED.TIME = SCHEDULED.TIME + UNSCHED.INTERRUPT.TIME
          APPLY OUTPUT.HOURS.1(SCHED.TIME)
          PRINT @TAB 3

          LET TEMP.AREA = TIME.UP
          APPLY OUTPUT.HOURS.1(TEMP.AREA)
          PRINT @TAB 2

          LET TEMP.AREA =INTERRUPT.TIME
          APPLY OUTPUT.HOURS.1(TEMP.AREA)
          PRINT @TAB 2

          LET TEMP.AREA = UNSCHED.INTERRUPT.TIME
          APPLY OUTPUT.HOURS.1(TEMP.AREA)
          PRINT @TAB 2

          PRINT INTERRUPTIONS AS '3ZN', @TAB 4

          PRINT UNSCHEDULED.INTERRUPTIONS AS '3ZN', @TAB 5

          IF INTERRUPTIONS = 0
            THEN LET MTBI = 0
            ELSE LET MTBI = TIME.UP / INTERRUPTIONS
          APPLY OUTPUT.HOURS.1(MTBI)
          PRINT @TAB 4

          IF UNSCHEDULED.INTERRUPTIONS = 0
            THEN LET MTBF = 0
            ELSE LET MTBF = TIME.UP / UNSCHEDULED.INTERRUPTIONS
          APPLY OUTPUT.HOURS.1(MTBF)
          PRINT @TAB 2

          IF HARDWARE.REPAIR.PERIODS = 0
            THEN LET MTTR = 0
            ELSE LET MTTR = REPAIR.TIME / HARDWARE.REPAIR.PERIODS
          APPLY OUTPUT.HOURS.1(MTTR)
          PRINT @TAB 2

          LET TEMP.AREA = SCHED.TIME + TIME.UP.UNSCHED
          IF TEMP.AREA = 0
            THEN LET RELIABILITY = 0
            ELSE LET RELIABILITY = (TIME.UP / TEMP.AREA) * 100
          PRINT RELIABILITY, @TAB 2

          IF TOTAL.TIME = 0
            THEN LET AVAILABILITY = 0
            ELSE LET AVAILABILITY = (TIME.UP / TOTAL.TIME) * 100
          PRINT AVAILABILITY
          IF SYSNO = 13 OR 33 OR 56
            THEN BEGIN
                   LET SUB.TOTAL.TOTAL.TIME = SUB.TOTAL.TOTAL.TIME + TOTAL.TIME
                   LET SUB.TOTAL.SCHED.TIME = SUB.TOTAL.SCHED.TIME + SCHED.TIME
                   LET SUB.TOTAL.TIME.UP = SUB.TOTAL.TIME.UP + TIME.UP
                   LET SUB.TOTAL.INTERRUPT.TIME = SUB.TOTAL.INTERRUPT.TIME + INTERRUPT.TIME
                   LET SUB.TOT.UNSCH.INTERRUPT.TIME = SUB.TOT.UNSCH.INTERRUPT.TIME + UNSCHED.INTERRUPT.TIME
                   LET SUB.TOTAL.INTERRUPTIONS = SUB.TOTAL.INTERRUPTIONS + INTERRUPTIONS
                   LET SUB.TOT.UNSCH.INTERRUPTIONS = SUB.TOT.UNSCH.INTERRUPTIONS + UNSCHEDULED.INTERRUPTIONS
                   LET SUB.TOTAL.MTBI = SUB.TOTAL.MTBI + MTBI
                   LET SUB.TOTAL.MTBF = SUB.TOTAL.MTBF + MTBF
                   LET SUB.TOTAL.MTTR = SUB.TOTAL.MTTR + MTTR
                   LET SUB.TOTAL.REL = SUB.TOTAL.REL + RELIABILITY
                   LET SUB.TOTAL.AVAIL = SUB.TOTAL.AVAIL + AVAILABILITY
                   LET SUB.SYS.COUNT = SUB.SYS.COUNT + 1

                   IF SYSNO NE PREVIOUS.INHOUSE
                     THEN BEGIN
                            ADD 1 TO INHOUSE.COUNT
                            LET PREVIOUS.INHOUSE = SYSNO
                            INSERT INTO INHOUSE
                          END
                 END
          LET TOTAL.TOTAL.TIME = TOTAL.TOTAL.TIME + TOTAL.TIME
          LET TOTAL.SCHED.TIME = TOTAL.SCHED.TIME + SCHED.TIME
          LET TOTAL.TIME.UP = TOTAL.TIME.UP + TIME.UP
          LET TOTAL.INTERRUPT.TIME = TOTAL.INTERRUPT.TIME + INTERRUPT.TIME
          LET TOTAL.UNSCHED.INTERRUPT.TIME = TOTAL.UNSCHED.INTERRUPT.TIME + UNSCHED.INTERRUPT.TIME
          LET TOTAL.INTERRUPTIONS = TOTAL.INTERRUPTIONS + INTERRUPTIONS
          LET TOTAL.UNSCHED.INTERRUPTIONS = TOTAL.UNSCHED.INTERRUPTIONS + UNSCHEDULED.INTERRUPTIONS
          LET TOTAL.MTBI = TOTAL.MTBI + MTBI
          LET TOTAL.MTBF = TOTAL.MTBF + MTBF
          LET TOTAL.MTTR = TOTAL.MTTR + MTTR
          LET TOTAL.REL = TOTAL.REL + RELIABILITY
          LET TOTAL.AVAIL = TOTAL.AVAIL + AVAILABILITY
          LET SYS.COUNT = SYS.COUNT + 1
          INSERT INTO PERCENTAGES
      END  % for each performance.data %

      PRINT @SKIP 1, @TAB 18, '-----------------------------TOTAL',
            '-----------------------------', @TAB 2,
            '------------------AVERAGE-------------------', @SKIP 1

      IF INHOUSE.COUNT = 0
        THEN PRINT @TAB 18
        ELSE BEGIN
               LET TOT.AVG = 1
               PRINT @TAB 17, '*'
             END

TOTALS.AVGS:
BEGIN
      LET TEMP.AREA = TOTAL.TOTAL.TIME
      APPLY OUTPUT.HOURS.2(TEMP.AREA)
      PRINT @TAB 1

      LET TEMP.AREA =TOTAL.SCHED.TIME
      APPLY OUTPUT.HOURS.2(TEMP.AREA)
      PRINT @TAB 1

      LET TEMP.AREA = TOTAL.TIME.UP
      APPLY OUTPUT.HOURS.2(TEMP.AREA)

      LET TEMP.AREA = TOTAL.INTERRUPT.TIME
      APPLY OUTPUT.HOURS.2(TEMP.AREA)
      PRINT @TAB 2

      LET TEMP.AREA = TOTAL.UNSCHED.INTERRUPT.TIME
      APPLY OUTPUT.HOURS.1(TEMP.AREA)

      PRINT TOTAL.INTERRUPTIONS AS '5ZN', @TAB 2

      PRINT TOTAL.UNSCHED.INTERRUPTIONS AS '5ZN', @TAB 5

      LET AVG.MTBI = TOTAL.MTBI / SYS.COUNT
      APPLY OUTPUT.HOURS.1(AVG.MTBI)
      PRINT @TAB 4

      LET AVG.MTBF = TOTAL.MTBF / SYS.COUNT
      APPLY OUTPUT.HOURS.1(AVG.MTBF)
      PRINT @TAB 2

      LET AVG.MTTR = TOTAL.MTTR / SYS.COUNT
      APPLY OUTPUT.HOURS.1(AVG.MTTR)
      PRINT @TAB 2

      LET AVG.REL = TOTAL.REL / SYS.COUNT
      PRINT AVG.REL, @TAB 2

      LET AVG.AVAIL = TOTAL.AVAIL / SYS.COUNT
      PRINT AVG.AVAIL

      IF TOT.AVG = 1
        THEN BEGIN
               LET TOTAL.TOTAL.TIME = TOTAL.TOTAL.TIME - SUB.TOTAL.TOTAL.TIME
               LET TOTAL.SCHED.TIME = TOTAL.SCHED.TIME - SUB.TOTAL.SCHED.TIME
               LET TOTAL.TIME.UP = TOTAL.TIME.UP - SUB.TOTAL.TIME.UP
               LET TOTAL.INTERRUPT.TIME = TOTAL.INTERRUPT.TIME - SUB.TOTAL.INTERRUPT.TIME
               LET TOTAL.UNSCHED.INTERRUPT.TIME = TOTAL.UNSCHED.INTERRUPT.TIME - SUB.TOT.UNSCH.INTERRUPT.TIME
               LET TOTAL.INTERRUPTIONS = TOTAL.INTERRUPTIONS - SUB.TOTAL.INTERRUPTIONS
               LET TOTAL.UNSCHED.INTERRUPTIONS = TOTAL.UNSCHED.INTERRUPTIONS - SUB.TOT.UNSCH.INTERRUPTIONS
               LET TOTAL.MTBI = TOTAL.MTBI - SUB.TOTAL.MTBI
               LET TOTAL.MTBF = TOTAL.MTBF - SUB.TOTAL.MTBF
               LET TOTAL.MTTR = TOTAL.MTTR - SUB.TOTAL.MTTR
               LET TOTAL.REL = TOTAL.REL - SUB.TOTAL.REL
               LET TOTAL.AVAIL = TOTAL.AVAIL - SUB.TOTAL.AVAIL
               LET SYS.COUNT = SYS.COUNT - SUB.SYS.COUNT
               LET TOT.AVG = 2
               PRINT @CR, @TAB 16, '**'
               REPEAT TOTALS.AVGS
             END
END  % totals.avgs %
      SELECT THRESHOLD. VIA (ABBREV = CLASS.ABBREV)
        THEN BEGIN
               LET TOTAL.CRASHES = MONTH.COUNT * (UNADJUSTED.CRASHES AS '3N.N' / 10)

               IF INHOUSE.COUNT GT 0
                 THEN BEGIN
                          PRINT @SKIP 1, @TAB 86, 'NOTE: *  ALL SYSTEMS', @CR,
                                @TAB 92, '** LESS SYSTEM(S) '
                          FOR EACH INHOUSE
                            BEGIN
                              PRINT SYSNO
                              WHILE INHOUSE.COUNT GT 1
                                DO BEGIN
                                     PRINT ', '
                                     SUBTRACT 1 FROM INHOUSE.COUNT
                                   END
                            END
                        PRINT @CR
                      END
                 ELSE PRINT @SKIP 3
               PRINT @TAB 54, 'SYSTEMS BELOW THRESHOLD', @CR, @TAB 44,
                     'THRESHOLD:  LESS THAN', UNADJUSTED.PERCENT AS '2ZN.NN',
                     '% RELIABILITY OR', @CR, @TAB 56, 'GREATER THAN ',
                     TOTAL.CRASHES, ' CRASHES', @SKIP 1
               PRINT @CR, @TAB 43, '------HOURS AVAILABLE------', @TAB 4,
                     '% UP DURING', @CR
               PRINT @TAB 32, 'SYSTEM', @TAB 26, 'ACTUAL', @TAB 3, 'SCHED',
                     @TAB 4, '24', @TAB 6, 'INTERRUPTS', @CR
               PRINT @TAB 29, 'NUMBER', @TAB 2, 'TYPE', @TAB 3, 'TOTAL', @TAB 5,
                     'SCHED', @TAB 5, 'TOTAL', @TAB 4, 'HOURS', @TAB 3, 'HOURS',
                     @TAB 2, 'TOTAL', @TAB 2, 'UNSCHED', @CR

               FOR EACH PERCENTAGES
                 BEGIN
                   IF RELIABILITY < UNADJUSTED.PERCENT OR
                      UNSCHEDULED.INTERRUPTIONS > TOTAL.CRASHES
                     THEN BEGIN
                            PRINT @CR, @TAB 30, SYSNO, @TAB 4

                            PRINT CLASS.ABBREV, @TAB 3

                            LET TEMP.AREA = TOTAL.TIME
                            APPLY OUTPUT.HOURS.1(TEMP.AREA)
                            PRINT @TAB 3

                            APPLY OUTPUT.HOURS.1(SCHED.TIME)
                            PRINT @TAB 3

                            LET TEMP.AREA = TIME.UP
                            APPLY OUTPUT.HOURS.1(TEMP.AREA)
                            PRINT @TAB 2

                            PRINT RELIABILITY, @TAB 2

                            PRINT AVAILABILITY, @TAB 2

                            PRINT INTERRUPTIONS AS '3ZN', @TAB 4

                            PRINT UNSCHEDULED.INTERRUPTIONS AS '3ZN'
                          END  % if reliability %
                 END  % for each percentages %
             END  % select threshold. %

ADD 1 TO REPORT.NO
DELETE FROM PERCENTAGES ALL
DELETE FROM INHOUSE ALL
END  % write.report %
END  % select class.temp %
END  % entire.procedure %
RKJ:d