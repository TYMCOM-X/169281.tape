title	TAUX	network transparent link program
debug==1			;=1 to trace special interrupts
minver==13			;version rh
majver==1			;version lh

twoseg
loc	137
xwd	majver,minver
reloc	400000

X==	0			;be careful - for null job
P==	1			;stack pointer
A==	2			;for interrupt routines
B==	3
C==	4
D==	5
TC==	6			;TTY character
PC==	7			;PTY character
.T1==	10			;for TTY character interrupts
.T2==	11
.T3==	12
.T4==	13
P1==	14			;for PTY character interrupts

if2 <ifn DEBUG,<printx [debug switch enabled]>>
;;	gettab tables
.GTPRV==6			;privelege word
.GTUNM==-22			;user name
.GTUN1==-21			;user name (continued)

;;	interrupt causes
.IACHR==1			;character received
.IAORG==6			;orange ball received
.IAZAP==7			;circuit zapper received
.IAYEL==11			;yellow ball received
.IAGOB==12			;character gobbler received
.IATCC==13			;terminal characteristic changed in PTY
.IANTQ==13			;notice to quit

;;	auxcal function codes
.AXI8S==1			;input image character and skip
.AXO8==	3			;output image character
.AXCBI==6			;clear input buffer
.AXCBO==7			;clear output buffer (send gobbler)
.AXLDE==11			;leave deffered echo
.AXSYB==12			;send yellow ball
.AXCFS==64			;change file status bits for port
.AXSOB==70			;send orange ball
.AXTCN==73			;read/set term char by number
.AXTCP==74			;read changed term char from PTY
.AXOSF==76			;output string as will fit

;;	fatal error message macro
define	fatal (M)	<
	jrst	[reset
		outstr [asciz "M"]
		exit
		]	>

;;	debug error message macro
ifn	debug,<define	bug (M)	<outstr [asciz "[M]"]>>
ife	debug,<define	bug (M)	<;>>

subttl	create circuit and initialize
;	* initialize the stack
;	* create circuit
;	* set mode on our end of circuit
;	* set mode on command port
;	* set logout on disconnect

array	PDL[40]			;stack
array	AUXSTR[20]		;aux circuit login string

; circuit := Do.creaux( @asciz!name )
;returns -1 on failure
do.cre:	MOVE	T1,-1(p)
	CREAUX	T1,
	 JRST	[push	p,t1
		 pushj	p,auxerr
		 hrroi	t1,-1
		 jrst	.+1]
	sub	sp,[xwd 2,2]
	jrst	@2(p)

	HRLM	T1,PP#		;aux circuit port number in lh(PP)
	SETOM	TT#		;TTY port #

	HRROI	T1,.AXCFS	;change file status for command port
	AUXCAL	T1,214		;image binary no echo

	HRROI	T1,.GTPRV	;set logout on disconnect
	GETTAB	T1,
	 fatal	<?cant get JBTPRV>
	TRZ	T1,3B20		;all off=logout on disconnect
	SETPRV	T1,

subttl	initialize interrupt system
;	* reset and enable INTADR system
;	* assign causes to channels
;	* enable all channels

	MOVE	T1,[VECDAT,,VECTOR]	;load the vector
	BLT	T1,VECTOR+VECLEN-1

	MOVE	T1,[6,,VECTOR]		;clear and enable system
	INTADR	T1,
	 fatal	<?cant initialize INTADR system>
	
	MOVE	T1,[.IANTQ,,ZAP..C]	;NTQ 
	INTASS	T1,
	 fatal	<?cant assign NTQ>

	HRLOI	T1,<.IAZAP>B26+ZAP..C	;PTY ZAP
	HLR	T1,PP
	TINASS	T1,
	 fatal	<?cant assign PTY ZAP>

	HRLOI	T1,<.IAORG>B26+ORG.TC	;ORANGE BALL from TTY 
	HRR	T1,TT
	TINASS	T1,
	 fatal	<?cant assign ORANGE BALL for TTY>

	HRLOI	T1,<.IAORG>B26+ORG.PC	;ORANGE BALL from PTY 
	HLR	T1,PP
	TINASS	T1,
	 fatal	<?cant assign ORANGE BALL for PTY>

	HRLOI	T1,<.IAYEL>B26+YEL.TC	;YELLOW BALL from TTY 
	HRR	T1,TT
	TINASS	T1,
	 fatal	<?cant assign YELLOW BALL for TTY>

	HRLOI	T1,<.IAYEL>B26+YEL.PC	;YELLOW BALL from PTY 
	HLR	T1,PP
	TINASS	T1,
	 fatal	<?cant assign YELLOW BALL for PTY>

	HRLOI	T1,<.IAGOB>B26+GOB.TC	;GOBBLER from TTY
	HRR	T1,TT
	TINASS	T1,
	 fatal	<?cant assign GOBBLER for TTY>

	HRLOI	T1,<.IAGOB>B26+GOB.PC	;GOBBLER from PTY
	HLR	T1,PP
	TINASS	T1,
	 fatal	<?cant assign GOBBLER for PTY>

	HRLOI	T1,<.IACHR>B26+CHR.TC	;CHAR from TTY
	HRR	T1,TT
	TINASS	T1,
	 fatal	<?cant assign CHAR for TTY>

	HRLOI	T1,<.IACHR>B26+CHR.PC	;CHAR from PTY
	HLR	T1,PP
	TINASS	T1,
	 fatal	<?cant assign CHAR for PTY>

	OUTSTR	[asciz "[network passthrough created]
"]

	SETO	X,			;enable all interrupt channels
	INTENB	X,
	 fatal	<?cant enable interrupt channels>

WAIT:	SETZ	X,		;don't wake up for anything
	HIBER	X,
	 JRST	WAIT
	JRST	WAIT

subttl	interrupt routines for special balls

ZAP..:	bug <ZAP..>
;	MOVEI	A,10
;	SLEEP	A,
	OUTSTR	[asciz "[network passthrough deleted]"]
	HRROI	A,.AXSOB	;try to send an orange ball to "terminal"
	HRL	A,TT
	AUXCAL	A,
	EXIT

ORG.T:	MOVEM	A,orgTsa#
	bug <ORG.T>
	HRROI	A,.AXSOB	;send orange ball to PTY
	HLL	A,PP
	AUXCAL	A,
	MOVE	A,orgTsa 
	DISMIS

ORG.P:	MOVEM	A,orgPsa# 
	bug <ORG.P>
	HRROI	A,.AXSOB	;send orange ball to TTY
	HRL	A,TT
	AUXCAL	A,
	MOVE	A,orgPsa 
	DISMIS

YEL.T:	MOVEM	a,yelTsa#
	bug <YEL.T>
	HRROI	A,.AXSYB	;send yellow ball to PTY
	HLL	A,PP
	AUXCAL	A,
	MOVE	a,yelTsa
	DISMIS

YEL.P:	MOVEM	a,yelPsa#
	bug <YEL.P>
	HRROI	A,.AXSYB	;send yellow ball to TTY
	HRL	A,TT
	AUXCAL	A,
	MOVE	a,yelPsa
	DISMIS

GOB.T:	movem	a,gobTsa#
	HRROI	A,.AXCBO	;send gobbler to PTY
	HLL	A,PP
	AUXCAL	A,
	bug <GOB.T>
	move	a,gobTsa
	DISMIS

GOB.P:	movem	a,gobPsa#
	HRROI	A,.AXCBO	;send gobbler to TTY
	HRL	A,TT
	AUXCAL	A,
	bug <GOB.P>
	move	a,gobPsa
	DISMIS

subttl	interrupt routines for terminal originated traffic
;	T1-T4 are reserved for these routines

CHR.T:	movem	t1,chrTsa#
	movem	tc,chrTs1#
	HRROI	T1,.AXI8S	;get next character
	HRL	T1,TT
	AUXCAL	T1,TC
	 jrst	[move	t1,chrTsa
		 move	tc,chrTs1
		 DISMIS]	;no more characters
	HRROI	T1,.AXO8	;output to PTY 
	HLL	T1,PP
	AUXCAL	T1,TC
	TRZ	TC,200
	exch	tc,former.c#
	CAIN	TC,former.c	;two identical in a row?
	 CAIE	TC,"X"-100	;is it a ^X?
	  JRST	CHR.T
	SETO	TC,
	ZAPCIR	TC,		;zap the circuit
	JRST	CHR.T

subttl	interrupt routines for PTY originated traffic
;	P1 are reserved for these routines

i.ac == 15	;at random
old.ac:	

CHR.P:	movem	i.ac,chrP.sa#
	movem	pc,chrP.s1#
	HRROI	i.ac,.AXI8S	;get next character
	HLL	i.ac,PP
	AUXCAL	i.ac,PC
	 jrst	[move	i.ac,chrP.sa
		 move	pc,chrP.s1
		 DISMIS]	;no more characters
skipn  .flag.
 pushj p,@.proc.
sosl o.room
 idpb pc,o.ptr
	HRROI	i.ac,.AXO8	;output character
	HRL	i.ac,TT
	AUXCAL	i.ac,PC
	JRST	CHR.P		;try again

subttl	command line rescan and login string parsing routines

glog:	rescan			;back up input
glog1:	inchrw T3
	caige T3,40
	jrst oldlog
	caie T3,";"
	jrst glog1
glog2:	move T1,[point 7,auxstr]
	movei T2,^d17
gl2lp:	inchrw T3		;eat to first real char (non spc,tab)
	caie T3," "
	 cain T3,11
	  jrst gl2lp
	caie T3,":"		;if he says :system, use his name
	 jrst ldlp+1		; otherwise, presume normal

	hrroi T4,.gtunm 	;get user name of this job
	gettab T4,
	 halt .
de.lup0:
	setz	T3,
	lshc	T3,6
	addi	T3,40
	idpb	T3,T1
	jumpn	T4,de.lup0

	hrroi T4,.gtun1 	;get user name of this job (part 2)
	gettab T4,
	 halt .
	jumpe	t4,unm.done
de.lup1:
	setz	T3,
	lshc	T3,6
	addi	T3,40
	idpb	T3,T1
	jumpn	T4,de.lup1

unm.done:
	movei T3,":"
	skipa
ldlp:	 inchrw T3
	cain T3," "
	 jrst ldlp
	cain T3,";"
	 jrst auxdon
	cain T3,15
	 jrst	[inchrw
		jrst auxdon]
	caig T3,"z"
	 caige T3,"a"
	  jrst .+2
	  subi T3,40
	idpb T3,T1
	sojg  T2,ldlp

	movei T3,";"
auxdon: idpb T3,T1
	movei T3,0
	idpb T3,T1
	popj p,
oldlog: cain T3,15
	  inchrw T3	; skip <lf>
	outstr [asciz "Login: "]
	jrst glog2

subttl	AUXERR(T1) aux circuit error routine  
; 	T1 = major,,minor problems ... returns with error reason output

r2==2	;this page only, clobber is OK

AUXERR:	move	t1,-1(p)
	hlrz 	r2,T1
	xct	ercod(r2)
	outstr	(r2)
	sub	p,[xwd 2,2]
	jrst	@2(p)
ercod:	move  r2,err1(T1)
	movei r2,[asciz "?AC lic required - too many circuits"]
	movei r2,[asciz "?AC license required"]
	movei r2,[asciz "?Monitor out of room"]
	movei r2,[asciz "?No response from supervisor to request "]
	movei r2,[asciz "?No response from supervisor to user name "]
	movei r2,[asciz "?No circuit supplied by supervisor"]
	movei r2,[asciz "?Error response from supervisor to request"]
err1:	[asciz "?FUBAR"]
	[asciz "?Login string format error"]
	[asciz "?User name not in mud"]
	[asciz "?Bad mud"]
	[asciz "?Host not available"]
	[asciz "?Dialout/downline-load protocol error"]
	[asciz "?Monitor too slow - time out"]
	[asciz "?Access barred"]
	[asciz "?error code 8 from supervisor"]
	[asciz "?error code 9 from supervisor"]
	[asciz "?error code 10 from supervisor"]

subttl	define interrupt vector and channel numbers

VECDAT:	;; interrupt vectors
define	INTDEF (x) < irp x <
EXP 0,x				;;load vector table
x'C==<.-VECDAT>/2		;;define interrupt channel number
>>
intdef	<GOB.T,GOB.P>
intdef	<CHR.T,ORG.T,YEL.T>
intdef	<CHR.P,ORG.P,YEL.P>
intdef	<ZAP..>
VECLEN==.-VECDAT

lit
reloc	0
var
VECTOR:	block ^D72

end	START
    