














                               Engine Pascal User's Guide


























                                     Tymshare Inc.

                              Network Technology Division

                                     March 25, 1982



          ^                                                                  ^
          ^       This document is the sole property and confidential        ^
          ^     information of Tymshare, Inc., and may not be copied in      ^
          ^    whole or part or disclosed to any third party without the     ^
          ^                prior written consent of Tymshare.                ^
          ^                                                                  ^








          Engine Pascal User's Guide                            March 25, 1982



                                        CONTENTS                                        ________


          1.0 OVERVIEW ..................................................... 1

             1.1 History and Development of Engine Pascal .................. 1

             1.2 Requirements .............................................. 1

             1.3 Related Publications ...................................... 2

          2.0 COMPILING A PASCAL PROGRAM ................................... 3

             2.1 Compiler Options .......................................... 3

             2.2 Running CPAS1 ............................................. 4

             2.3 Running OBJNIB ............................................ 4

             2.4 Format and Structure of Compiled Code ..................... 5

          3.0 LOADING AN ENGINE SLOT ....................................... 6

             3.1 Tymfile Parameters for the Pascal Nucleus ................. 6

                3.1.1 HOST0 ................................................ 6

                3.1.2 SLOTSZ ............................................... 6

                3.1.3 NTERM ................................................ 6

                3.1.4 NAUX ................................................. 6

                3.1.5 AUXTIM ............................................... 7

                3.1.6 BBMSG ................................................ 7

                3.1.7 NDTRB ................................................ 7

                3.1.8 DTRACE ............................................... 7

                3.1.9 CCONST ............................................... 7

                3.1.10 CLCOR ............................................... 8

                3.1.11 ECOUNT .............................................. 8

                3.1.12 IOMXRT .............................................. 8

                3.1.13 MAXCHAR ............................................. 8

                3.1.14 BFLT.P .............................................. 8

                3.1.15 DDISK ............................................... 9


                                                                        Page i


          Engine Pascal User's Guide                            March 25, 1982



                3.1.16 DTAPE ............................................... 9

                3.1.17 DPRINT .............................................. 9

                3.1.18 MINPRO ............................................. 10

                3.1.19 LPROMPT ............................................ 10

                3.1.20 CRERR .............................................. 10

                3.1.21 CRSTOP ............................................. 10

                3.1.22 ACECHO ............................................. 11

                3.1.23 HSTATE ............................................. 11

                3.1.24 LVNQUE ............................................. 11

                3.1.25 LVDSKO ............................................. 11

                3.1.26 LVNDSK ............................................. 11

                3.1.27 LVPDKO ............................................. 11

             3.2 Sample Tymfile ........................................... 12

             3.3 Command File ............................................. 13

             3.4 Running NAD to Create a Slot NIB File .................... 14

             3.5 Running LOADII to Load a Slot ............................ 15

             3.6 Job and Slot Status Information .......................... 17

                3.6.1 Execute Command ..................................... 18

                3.6.2 Halt Command ........................................ 18

                3.6.3 Quit Command ........................................ 18

                3.6.4 Zap Command ......................................... 18

                3.6.5 Status Command ...................................... 18

                3.6.6 Query Background Command ............................ 20

                3.6.7 Query Foreground Command ............................ 20

                3.6.8 Crash Code Command .................................. 21

                3.6.9 Crash Register Command .............................. 21

                3.6.10 Query Host Command ................................. 22



                                                                       Page ii


          Engine Pascal User's Guide                            March 25, 1982



                3.6.11 Query Who Command .................................. 22

                3.6.12 Query CPU Command .................................. 22

                3.6.13 LMAC Command ....................................... 22

                3.6.14 Slot Command ....................................... 22

                3.6.15 Query History Command .............................. 23

                3.6.16 Query Port Command ................................. 23

                3.6.17 Hang Kernel Port Command ........................... 23

                3.6.18 Read Entry Table Command ........................... 23

          4.0 WRITING A CONCURRENT (ENGINE) PASCAL PROGRAM ................ 24

             4.1 The Engine Pascal Environment ............................ 24

                4.1.1 The Process ......................................... 24

                4.1.2 The Monitor ......................................... 24

                4.1.3 The Class ........................................... 24

                4.1.4 The Pascal Nucleus .................................. 24

             4.2 Designing a Concurrent Program ........................... 25

                4.2.1 Design Considerations ............................... 25

                4.2.2 A Concurrent Pascal Problem ......................... 25

                4.2.3 A Concurrent Program ................................ 27

             4.3 Memory Use Considerations ................................ 34

             4.4 Recommended Coding Style ................................. 35

                4.4.1 Program Files ....................................... 35

                4.4.2 Program Structure ................................... 37

                4.4.3 Modules ............................................. 38

                4.4.4 Routines ............................................ 39

                4.4.5 Statements .......................................... 39

                4.4.6 Naming Conventions for Variables .................... 41

             4.5 Using the CONCAT Program ................................. 42



                                                                      Page iii


          Engine Pascal User's Guide                            March 25, 1982



                4.5.1 Name Command ........................................ 43

                4.5.2 Master Directory Command ............................ 43

                4.5.3 Exclude Command ..................................... 43

                4.5.4 Include Command ..................................... 44

                4.5.5 Remote Command ...................................... 44

                4.5.6 Substitute Command .................................. 44

                4.5.7 Example of the CONCAT Program ....................... 45

          5.0 PASCAL I/O .................................................. 46

             5.1 Input/Output Device Types ................................ 47

             5.2 IO Results ............................................... 47

             5.3 Disk Device .............................................. 48

                5.3.1 Disk IO Operations .................................. 48

                5.3.2 Disk Unit Information ............................... 49

                5.3.3 Disk IO Results ..................................... 50

                5.3.4 Disk IO Parameters .................................. 51

             5.4 Tape Device .............................................. 52

                5.4.1 Tape IO Operations .................................. 52

                5.4.2 Tape Unit Information ............................... 53

                5.4.3 Tape IO Results ..................................... 53

                5.4.4 Tape IO Parameters .................................. 54

             5.5 Printer Device ........................................... 55

                5.5.1 Printer IO Operations ............................... 55

                5.5.2 Printer IO Results .................................. 56

                5.5.3 Printer IO Parameters ............................... 57

             5.6 System Device ............................................ 58

                5.6.1 System IO Operations ................................ 58

                5.6.2 System Information .................................. 59



                                                                       Page iv


          Engine Pascal User's Guide                            March 25, 1982



                5.6.3 System IO Results ................................... 59

                5.6.4 System IO Parameters ................................ 60

             5.7 Crash Device ............................................. 61

                5.7.1 Crash IO Operations ................................. 61

                5.7.2 Crash Error Codes ................................... 62

                5.7.3 Crash IO Results .................................... 62

                5.7.4 Crash IO Parameters ................................. 63

             5.8 Port Device .............................................. 64

                5.8.1 Port IO Parameters .................................. 64

                5.8.2 Port IO Operations .................................. 65

                5.8.3 Needle Information .................................. 74

                5.8.4 Disconnecting a Port ................................ 74

                5.8.5 Break Key Processing ................................ 74

                5.8.6 Line Editing ........................................ 75

             5.9 Logical Volume Device .................................... 76

                5.9.1 Logical Volume IO Parameters ........................ 76

                5.9.2 Logical Volume IO Operations ........................ 77

                5.9.3 Logical Volume Information .......................... 82

             5.10 File System ............................................. 84

                5.10.1 File System Components ............................. 84

                5.10.2 Using the File System .............................. 86

             5.11 EXRCS1 .................................................. 87

                5.11.1 Dump Command ....................................... 87

                5.11.2 Write Command ...................................... 87

                5.11.3 Incarnation Command ................................ 87

                5.11.4 Quit Command ....................................... 87

             5.12 EXRCS3 .................................................. 88



                                                                        Page v


          Engine Pascal User's Guide                            March 25, 1982



                5.12.1 Close File Command ................................. 88

                5.12.2 Delete File Command ................................ 88

                5.12.3 Extend File Command ................................ 88

                5.12.4 Free Space Command ................................. 88

                5.12.5 Initialize Command ................................. 88

                5.12.6 File Length Command ................................ 89

                5.12.7 Make File Command .................................. 89

                5.12.8 Next File Command .................................. 89

                5.12.9 Open File Command .................................. 89

                5.12.10 Print Command ..................................... 89

                5.12.11 Quit Command ...................................... 89

                5.12.12 Read File Command ................................. 90

                5.12.13 File Status Command ............................... 90

                5.12.14 Write Command ..................................... 90

          6.0 COMPILER ERROR MESSAGES ..................................... 91

          7.0 CRASH CODES ................................................. 99

          8.0 PROGRAM WRITING AIDS ....................................... 100

             8.1 Library of Existing Routines ............................ 100

             8.2 VUE Macros .............................................. 100

          9.0 DEBUGGING HINTS ............................................ 102

             9.1 Examining Permanent Variable Storage of Monitors ........ 102

             9.2 Examining Permanent Variable Storage of Processes ....... 102

             9.3 Examining Permanent Variable Storage of Classes ......... 103

          Index .......................................................... 104









                                                                       Page vi


          Engine Pascal User's Guide                            March 25, 1982



          SECTION 1.0 OVERVIEW          ____________________

          The Engine Pascal User's Guide  describes the procedures for writing              __________________________
          and compiling Pascal programs for a TYMNET Engine.  Engine Pascal is
          a version of Concurrent  Pascal that enables a user  to write struc-
          tured, concurrent programs for multi-user applications without being
          concerned with process scheduling.  Sequential Pascal, a subset lan-
          guage, may be  used to write recursive programs which  may be called
          and executed from within a concurrent Pascal program.  This combina-
          tion  permits rapid  implementation  of  highly complex,  multi-user
          applications with a minimum of bugs.


          SECTION 1.1 History and Development of Engine Pascal          ____________________________________________________

          The  Pascal language  was originally  designed by  Niklaus Wirth  in
          1970, in  an attempt to develop  a simpler, more  efficient language
          than was available at the time.  In 1975, Per Brinch Hansen designed
          the Concurrent  Pascal language  as a vehicle  for expressing,  in a
          high level language, the structure and logic of both synchronous and
          asynchronous multiple  process  applications.   Al  Hartmann  subse-
          quently wrote the  first Concurrent Pascal compiler for a  PDP 11 in
          1974, which enabled sequential processes to  be carried out simulta-
          neously, and therefore,  even more efficiently.  Another  version of
          Concurrent Pascal was later written for an INTERDATA system by David
          Neal at the University of Kansas.

          Engine Pascal was written by staff  at Tymshare's Data Network Divi-
          sion in 1979 for use on a TYMNET Engine.  It is an enhanced, partic-
          ularized version of the Concurrent  Pascal written at the University
          of Kansas.  Where the University of Kansas version generates pseudo-
          code which must be run through  an interpreter for execution, Engine
          Pascal generates  machine code which may  be executed directly  by a
          TYMNET Engine.  In addition, where the  University of Kansas Concur-
          rent Pascal only interfaces with standard I/O devices, Engine Pascal
          may also interface  directly with the network,  treating the network
          itself as an I/O device.


          SECTION 1.2 Requirements          ________________________

          Using Engine Pascal requires a familiarity  with TYMNET Engines run-
          ning ISIS.   It requires a familiarity  with a Tymcom-10  editor for
          writing Pascal programs, and with the Tymcom-10 operating procedures
          for preparing Pascal programs and loading them into a TYMNET Engine.
          Lastly, it requires a familiarity  with Concurrent Pascal as defined
          by Per Brinch Hansen in The  Architecture of Concurrent Programs.  A                                  ________________________________________
          listing of related publications appears below.








                                                            OVERVIEW    Page 1


          Engine Pascal User's Guide                            March 25, 1982



          SECTION 1.3 Related Publications          _________ ______________________

          The following publications are helpful aids for preparing concurrent
          l programs for a TYMNET Engine.

          Brinch  Hansen,  Per.   The  Architecture  of  Concurrent  Programs.                                  ___________________________________________
               Englewood Cliffs, N. J., 1977.

          Jensen, Kathleen and Wirth, Niklaus.  Pascal User Manual and Report.                                                _____________________________
               New York, 1974.

          Tymshare, Inc.  ISIS-II Reference Manual.  Cupertino, Calif., 1981.                          ________________________

          Tymshare, Inc.  LOADII User's Guide.  Cupertino, Calif., 1980.                          ___________________

          Tymshare, Inc.  SYSGEN Reference Manual.  Cupertino, Calif., 1981.                          _______________________

          Tymshare, Inc.  Tools and Utilities.  Cupertino, Calif., 1981.                          ___________________






































                                                            OVERVIEW    Page 2


          Engine Pascal User's Guide                            March 25, 1982



          SECTION 2.0 COMPILING A PASCAL PROGRAM          ______________________________________

          The Engine  Pascal source program must  be compiled on  a Tymcom-10.
          This  section describes  the procedures  for  converting the  Pascal
          source file  into Engine  code required  for loading  into a  TYMNET
          Engine, including a list of the compiler options.  The Pascal source
          file must first be converted into  object and/or listing files using
          CPAS1 (see Section 2.2).  The object file may then be converted into
          a NAD Image Binary (NIB) file using OBJNIB (see Section 2.3).


          SECTION 2.1 Compiler Options          ____________________________

          Compiler options  may be specified in  a list preceding  the program
          declaration in the source code.

          The individual options, which are  described below, must be enclosed
          in parentheses and  separated by commas.  Note that  the system will
          only recognize  the first character of  each option; hence  only the
          first character  needs to  be specified.   Unrecognized options  are
          ignored.  The options are:

               1.   Check = suppresses  generation of  range checking  of sub-
                    scripts.

               2.   List  = suppresses  the inclusion  of source  code in  the
                    listing file.

               3.   Number = suppresses  the inclusion of source  line numbers
                    in  the object  code.  The  result is  smaller and  faster
                    object code, with fewer run time diagnostics.

               4.   Summary =  causes selected statistics  to be  displayed at
                    the terminal at the  end of the compilation.   The exhaus-
                    tion of  certain parameter  tables used  in the  third and
                    fourth pass will also be displayed.

               5.   Xref = causes a cross reference  listing to be included in
                    the listing file.

          The format  of the statement containing  the compiler options  is as
          follows:

               (l,n,x)












                                          COMPILING A PASCAL PROGRAM    Page 3


          Engine Pascal User's Guide                            March 25, 1982



          SECTION 2.2 Running CPAS1          _________________________

          CPAS1 is  a program for  converting the  Pascal source file  into an
          object file  and/or a  listing file.  The  object file  contains the
          source code converted  into Engine code.  Depending  on the compiler
          options chosen (see  Section 2.1), the listing file  may contain the
          source code, with line numbers or other information added to facili-
          tate debugging.  The procedure is as follows:

               -run (epascal)cpas1
               OBJECT    = filename.obj
               LIST      = filename.lst
               SOURCE    = filename.cpa
               CPASCAL ENGINE-1 OF 16 DECEMBER 1981
                1 2 3 4 5 6 X 7
               EXIT

          where:

               filename.obj = the filename of  the object file to  be created,
                              with an extension ".obj".

               filename.lst = the filename of the listing  file to be created,
                              with an extension ".lst".

               filename.cpa = the filename of the Pascal  source code, with an
                              extension ".cpa".

          When the system exits from CPAS1,  the object and listing files have
          been created.  Note that the filename extensions ".obj", ".lst", and
          ".cpa" are used by convention.


          SECTION 2.3 Running OBJNIB          __________________________

          OBJNIB is a utility program that  converts the object file generated
          by CPAS1 into a NIB file required  for loading into a TYMNET Engine.
          In the example that follows, user input appears in lowercase; system
          output appears in uppercase.

               run (epascal)objnib
               PASCAL E-CODE TO NAD IMAGE BINARY CONVERTER - VERSION 1.3
               CONCURRENT PASCAL OBJECT <INPUT> FILE : filename.obj
               NAD <OUTPUT> FILE NAME : filename.nib
               HEX VALUE OF E-CODE LOAD ADDRESS (DEFAULT 20000)  <cr>


               TOTAL BYTES INPUT: 2276
               TOTAL RECORDS OUTPUT:  2
               END OF SAIL EXECUTION






                                          COMPILING A PASCAL PROGRAM    Page 4


          Engine Pascal User's Guide                            March 25, 1982



          where:

               filename.obj = the name of  the object file generated  by CPAS1
                              (see Section 2.2).

               filename.nib = the  name of  the NIB  file to  be generated  by
                             OBJNIB.

               e-code load address = the  load address  for  the Engine  code.
                                     The  default  address   is  20000,  which
                                     should be invoked by  entering a carriage
                                     return.

          When the system responds with "END  OF SAIL EXECUTION", the NIB file
          has  been created.   Note  that system  output  normally appears  in
          upper- and lowercase.  The format of the NIB file is fully described
          in Tools and Utilities (see Section 1.3).             ___________________


          SECTION 2.4 Format and Structure of Compiled Code          _________________________________________________

          The compiled  object code is  a sequence  of 32 bit  fullwords, each
          left justified in a  36 bit TYMCOM-10 word, which is  then padded on
          the right.  The addresses are included, starting with 20000 (in hex-
          adecimal).  The structure of the file  containing the object code is
          as follows:

               -    program length (fullword constant).

               -    code length (fullword constant).

               -    stack length (fullword constant).

               -    variable length (fullword constant).

               -    bit flags (fullword constant)

               -    reserved for future use (fullword constant)

               -    reserved for future use (fullword constant)

               -    reserved for future use (fullword constant)

               -    first executable instructions (branch to main routine).

               -    code.

               -    table of constants.








                                          COMPILING A PASCAL PROGRAM    Page 5


          Engine Pascal User's Guide                            March 25, 1982



          SECTION 3.0 LOADING AN ENGINE SLOT          __________________________________

          This section contains  a description and a sample of  a slot Tymfile
          and a command file,  both of which are required to  configure a slot
          for running Engine Pascal.  It also contains the procedures required
          for loading  an Engine slot with  the Pascal Nucleus and  the Pascal
          program.

          Note:  Refer  to the SYSGEN Reference  Manual and the  LOADII User's                               ________________________          _____________
          Guide to configure and load a slot (see Section 1.3).          _____


          SECTION 3.1 Tymfile Parameters for the Pascal Nucleus          _____________________________________________________

          This  section  contains  a description  of  the  Tymfile  parameters
          required to configure a slot for executing an Engine Pascal program.
          The  Tymfile must  be set  up by  the  user to  reflect the  desired
          configuration prior to assembling the Pascal Nucleus with NAD.


          3.1.1 HOST0                _____

          Syntax: HOST0 EQ #
          Default: None
          Description: HOST0 specifies the host  number, in decimal, to report
               to the network Supervisor.


          3.1.2 SLOTSZ                ______

          Syntax: SLOTSZ EQ #
          Default: None
          Description:  SLOTSZ specifies  the size of the memory  in the slot,
               in kilobytes.


          3.1.3 NTERM                _____

          Syntax: NTERM EQ #
          Default: 0
          Description: NTERM specifies  the number of terminals to  be used in
               this slot.  The maximum number of  terminals that may be speci-
               fied is  127 minus  the value specified  for NAUX  (see Section
               3.1.4).


          3.1.4 NAUX                ____

          Syntax: NAUX EQ #
          Default: 0
          Description: NAUX specifies  the number of auxiliary  circuits to be
               used in  this slot.  The  maximum number of  auxiliary circuits
               that may  be specified  is 127  minus the  value specified  for
               NTERM (see Section 3.1.3).


                                              LOADING AN ENGINE SLOT    Page 6


          Engine Pascal User's Guide                            March 25, 1982



          3.1.5 AUXTIM                ______

          Syntax: AUXTIM EQ #
          Default: 200
          Description:   AUXTIM  specifies  the   timeout  for  circuit  build
               requests, in seconds.   A status of "timeout"  will be returned
               to the "port_param"  record (see Section 5.8.1)  if the circuit
               request is not completed for any reason during this interval.


          3.1.6 BBMSG                _____

          Syntax: BBMSG EQ #
          Default: 0
          Description: BBMSG specifies whether or not transmission errors will
               be returned to  the "port_param" record during  port input (see
               Sections 5.8.1 and  5.8.2).  If BBMSG =  0, transmission errors
               will not be  returned.  If BBMSG = 1,  transmission errors will
               be returned.


          3.1.7 NDTRB                _____

          Syntax: NDTRB EQ #
          Default: The number of disk devices + the number of tape devices.
          Description:  NDTRB  specifies  the  number of  disk  and  tape  I/O
               requests that may be processed  simultaneously, up to a maximum
               of 32.


          3.1.8 DTRACE                ______

          Syntax: DTRACE EQ #
          Default: 1
          Description: DTRACE specifies  whether or not disk  or tape requests
               are traced.   A status  of "complete" will  be returned  to the
               "disk_param" or the "tape_param" record (see Sections 5.3.4 and
               5.4.4).  If DTRACE = 0, tracing will not occur.  If DTRACE = 1,
               tracing will occur.


          3.1.9 CCONST                ______

          Syntax: CCONSTnnnnn
          Default: None
          Description: CCONST may  be used to define one or  more constants in
               the Tymfile which  can be accessed by an  Engine Pascal program
               using the "read_constant"  operation of the System  Device (see
               Section 5.6).  The range of "nnnnn" is 0 - 65535.







                                              LOADING AN ENGINE SLOT    Page 7


          Engine Pascal User's Guide                            March 25, 1982



          3.1.10 CLCOR                 _____

          Syntax: CLRCOR EQ #
          Default: 1
          Description: CLRCOR specifies whether or  not core residing beyond a
               parent  process is  cleared after  restarting  the system.   If
               CLRCOR = 0, the  core will not be cleared.  If  CLRCOR = 1, the
               core will be cleared.


          3.1.11 ECOUNT                 ______

          Syntax: ECOUNT EQ #
          Default: 0
          Description: ECOUNT specifies whether a  process entry table will be
               created to count the number of  times entry points of processes
               in the Pascal Nucleus have been called.  If ECOUNT = 0, a count
               of Nucleus entries will not be kept.  If ECOUNT = 1, a count of
               Nucleus entries will  be kept.  The count may  be checked using
               the Read  Entry Table  command (see  Section 3.6.18).   The bit
               array "PCNTFL" is used to determine for which process(es) entry
               point counts will be kept.


          3.1.12 IOMXRT                 ______

          Syntax: IOMXRT EQ #
          Default: 96
          Description: IOMXRT  determines the  maximum I/O  polling rate,  per
               second, in the range of 1 - 600.


          3.1.13 MAXCHAR                 _______

          Syntax: MAXCHAR EQ #
          Default: 256
          Description: MAXCHAR specifies the number  of input characters to be
               buffered before backpressuring the  network.  Note that MAXCHAR
               must be big enough to perform any "receive_character" operation
               using a Port IO Operation (see Section 5.8.2).


          3.1.14 BFLT.P                 ______

          Syntax: BFLT.P EQ #
          Default: 8
          Description: BFLT.P  specifies the  number of  bufferlets per  port.
               Each bufferlet can store 14 bytes of port data.  A value in the
               range of 4 - 20 is preferred.







                                              LOADING AN ENGINE SLOT    Page 8


          Engine Pascal User's Guide                            March 25, 1982



          3.1.15 DDISK                 _____

          Syntax: DDISK(n1,n2,n3)
          Default:  No disk devices will be supported.
          Description: DDISK specifies the disk devices for the slot, where:

               n1 = the EPascal disk number. It must be in the range 0 - 7.

               n2 = the ISIS logical unit number.

               n3 = the number  of the  disk blocks  to be  used, in  256 byte
                    blocks.  The maximum  number of blocks is  825,740.  If no
                    amount is specified, the actual  size assigned to the ISIS
                    logical unit in the ISIS disk file will be used.

               Note that DDISK must be specified for each disk device.  A max-
               imum of eight disk devices may be specified.


          3.1.16 DTAPE                 _____

          Syntax: DTAPE(n1,n2)
          Default: No tape devices will be supported.
          Description: DTAPE specifies the tape devices for the slot, where:

               n1 = the Engine  Pascal tape device number.  It must be  in the
                    range 0 - 3.

               n2 = the ISIS logical unit number.

               Note that DTAPE must be specified for each tape device.


          3.1.17 DPRINT                 ______

          Syntax: DPRINT(n1,n2)
          Default: No printers will be supported.
          Description: DPRINT specifies the printer devices to be used for the
               slot, where:

               n1 = the EPascal printer device number. It must be in the range
                    0 - 3.

               n2 = the ISIS logical unit number.

               Note that DPRINT must be specified for each printer device.










                                              LOADING AN ENGINE SLOT    Page 9


          Engine Pascal User's Guide                            March 25, 1982



          3.1.18 MINPRO                 ______

          Syntax: MINPRO EQ #
          Default: 50
          Description: MINPRO specifies  the number of processes  and monitors
               that the Nucleus will support in  addition to the two processes
               per port device (NTERM  + NAUX) it normally  supports (see Sec-
               tions 3.1.3 and 3.1.4).  A  typical Pascal program requires one
               process per  port device plus 10  to 20 other  processes; hence
               the default value of MINPRO is  usually quite adequate.  A pro-
               gram with many more processes in addition to those required for
               port devices may require that MINPRO  be set to a value greater
               than 50.  Not  all processes need be used.  Note  that if fewer
               processes are needed,  MINPRO may be set to  a negative number,
               as long as: MINPRO + (2 * (NTERM +NAUX)) > 0


          3.1.19 LPROMPT                 _______

          Syntax: LPROMPT EQ  #
          Default: 0
          Description: LPROMPT specifies whether or not the system prompt will
               appear.  If  LPROMPT = 0, there  will be no system  prompt.  If
               LPROMPT = 1, the system prompt will be ">".  Note that the sys-
               tem prompt appears on the user's  terminal when the Pascal slot
               successfully reads the user's login request (needle).


          3.1.20 CRERR                 _____

          Syntax: CRERR EQ #
          Default: 1
          Description: CRERR specifies whether or not  the slot will automati-
               cally crash due to an error in the Pascal program.  This option
               is provided because a user may not want a multi-process slot to
               crash if there  is an error in  only one of the  processes.  If
               CRERR = 0, the slot will not crash when an error occurs.


          3.1.21 CRSTOP                 ______

          Syntax: CRSTOP EQ #
          Default: 0
          Description: CRSTOP specifies whether or not the slot will halt when
               a slot crash occurs.  Halting the slot enables better debugging
               of the  Pascal program.  If CRSTOP  = 0, the slot  will restart
               automatically when  a crash  occurs.  If CRSTOP  = 1,  the slot
               will be halted when a crash occurs.








                                             LOADING AN ENGINE SLOT    Page 10


          Engine Pascal User's Guide                            March 25, 1982



          3.1.22 ACECHO                 ______

          Syntax: ACECHO EQ #
          Default: 0
          Description: ACECHO specifies  whether or not echoing  will occur on
               auxiliary circuits built to the slot.  If  ACECHO = 0, no echo-
               ing will occur.  If ACECHO = 1,  echoing will occur.  Echo con-
               trol will be the same as it is for terminals.


          3.1.23 HSTATE                 ______

          Syntax: HSTATE EQ <UP|DOWN|SHUT|GONE>
          Default: UP
          Description: HSTATE specifies  the initial state of  the Pascal host
               at startup.


          3.1.24 LVNQUE                 ______

          Syntax: LVNQUE EQ #
          Default: None
          Description: LVNQUE specifies  the size of the  I/O transfer request
               queue for logical volumes.


          3.1.25 LVDSKO                 ______

          Syntax: LVDSKO EQ #
          Default: None
          Description:  LVDSKO specifies  the number  of physical  disks in  a
               series of logical volumes.


          3.1.26 LVNDSK                 ______

          Syntax: LVNDSK EQ #
          Default: None
          Description: LVNDSK specifies the  number of series of  logical vol-
               umes to be generated in the system.


          3.1.27 LVPDKO                 ______

          Syntax: LVPDKO EQ #
          Default: 0
          Description: LVPDKO specifies the number of the first Pascal disk in
               the disk series.








                                             LOADING AN ENGINE SLOT    Page 11


          Engine Pascal User's Guide                            March 25, 1982



          SECTION 3.2 Sample Tymfile          __________________________

          : NODE 151 SLOT 2 Pascal Nucleus TYM file
          :
                  RA      $0 0A  :Radix is decimal

          :       ISIS slot configuration
          :
          HOST0   EQ      1304   :Host number
          SLOTSZ  EQ      375    :SIZE OF SLOT

          :       Port configuration
          :
          NTERM   EQ      10     :Number of terminals
          NAUX    EQ      10     :Number of Aux Circuit ports

          :       Disk configuration
          :           The macro 'DDISK' is used to define a disk device.
          :           Its format is
          :               DDISK (Pascal disk no.,ISIS logical unit no.,size)
          :               or
          :               DDISK(Pascal disk no.,ISIS logical unit no.)
          :
          :               The size, if given, is in 256 byte blocks.  If the
          :               size is not given, the actual size of the disk
          :               device will be used.
          :               Each disk to be used must be defined in this way.
          :               The Pascal disk numbers must be in the range 0 - 7.
          :
                  DDISK(4,6)     :Disk 4 is logical unit 6, use actual size
                  DDISK(5,7)     :Disk 5 is logical unit 7, use actual size

                  Tape configuration
          :               The 'DTAPE' macro is used to define tape devices.
          :               The usage is:
          :                       TAPE(Pascal tape no.,ISIS logical unit no.)
          :
          :               Each tape drive used must be defined in this way.
          :               The Pascal tape numbers must be in the range 0 - 3.
          :
                  DTAPE(0,4)     :Tape 0 is logical unit 4

          :       Other parameters
          :
          MINPRO  EQ      50     :Minimum number of processes to allocate
          LPROMP  EQ      1      :If 1, prompt with '>' at login
          CRERR   EQ      0      :If 1, crash slot on any Pascal error
          CRSTOP  EQ      1      :If 1, freeze slot on crash
          ACECHO  EQ      1      :If 1, enable echoing on aux circuits built
                                 : to slot.  Echo control will be the same as
                                 : terminals.  If 0, no echoing is ever done.
          HSTATE  EQ      UP     :Initial state of the Pascal host.
                                 : State may be UP, DOWN, SHUT, or GONE.
          BFLT.P  EQ      8      :Number of bufferlets per port.


                                             LOADING AN ENGINE SLOT    Page 12


          Engine Pascal User's Guide                            March 25, 1982



          SECTION 3.3 Command File          ________________________

          The command  file contains the  names of files  that NAD can  use to
          assemble and create  the NIB file for  the Pascal Nucleus.   It con-
          tains the  names of the Init  file, the Tymfile, the  Pascal Nucleus
          source code to be assembled, and the name of the NIB file to be cre-
          ated.  File  naming conventions are  described in Section  4.4.1.  A
          sample command file is as follows:

               ;@(ISIS2)NUCL06.I05
               ;@ND0150.T02
               ;@(ISIS2)NUCL06.R05
               1;FND0150.X02
               sege,sesize;pseg0,s0size;pseg1,s1size;p%p%q

          where:

               NUCL06.I05 = the name of the init file,  which exists on a mas-
                            ter directory.  By convention, "06" is the version
                            number  and "05"  is the  revision  number of  the
                            code.

               ND0150.T02 = the name of the user created Tymfile, which exists
                            in the user's directory.  By convention, "0150" is
                            the node  number and  "02" is  the slot  number in
                            which the code is to run.

               NUCL06.R05 = the name of the file containing the Pascal Nucleus
                            source code,  which exists on a  master directory.
                            By convention, "06" is the version number and "05"
                            is the revision number of the code.

               ND0150.X02 = the name of the NIB file to be created, and stored
                            in the user's directory.  By convention, "0150" is
                            the node  number and  "02" is  the slot  number in
                            which the code is to run.

               sege,sesize;p = instructs NAD to save  the contents of "segment
                               E" of the ISIS slot.

               seg0,s0size;p = instructs NAD to save  the contents of "segment
                               0" of the ISIS slot.

               seg1,s1size;p = instructs NAD to save  the contents of "segment
                               1" of the ISIS slot.

               %p = instructs NAD to save the symbol table.

               %q = results in an exit from NAD.

          The ";@" instructs  NAD to assemble the specified  source file.  The
          "1;F" instructs  NAD to  create the specified  NIB file,  which will
          override any  existing file with that  name.  Note that  the command
          file should be in the user's directory, not in a master directory.


                                             LOADING AN ENGINE SLOT    Page 13


          Engine Pascal User's Guide                            March 25, 1982



          SECTION 3.4 Running NAD to Create a Slot NIB File          _________________________________________________

          NAD is used to  create a binary image of the  source files contained
          in the command file, namely the Init file, the Tymfile, and the Pas-
          cal Nucleus source code.  The created  binary image, or NIB file, is
          the runtime support for  the Pascal Nucleus in  Engine code, config-
          ured according to the parameters specified  in the Init file and the
          Tymfile.  An example of how to  run NAD follows.  User input appears
          in lowercase; NAD output appears in uppercase.


               -r nad
               070681
               ;x   nd0150.c02

               ;@   (ISIS2)NUCL06.I05

               END OF ASSEMBLY
               ;@   ND0150.T02

               END OF ASSEMBLY
               ;@   (ISIS2)NUCL06.R05

               CONCURRENT Pascal Nucleus 08/10/81

               PORT CONFIGURATION - 10 TERMINAL DEVICES, 10 CIRCUIT DEVICES.

               THIS IS VERSION 6.5

               COMFIL 0 0
               TRACE 10283 10324
               CRASH 10324 10424
               BID 10424 10434
               TIMOUT 10434 10508
               OUTNUM 10508 116
               BUFFER 116 0E42
               FRONTLIB V0.12 11-19-81, SCY
               FRONT 0E42 111BC
               COMMON  V 1.8, 11-06-81, SMF
               COMMON 111BC 111BC
               STATUS 111BC 1138C
               NUCDB  V 0.1, 01-26-82, SCY
               NUCDB 1138C 117CC
               FORGND  V 0.9, 01-26-82, SCY
               DSKDRV  V 1.5 01-26-82, SCY
               DSKDRV 118A6 11EC0
               LPRDRV  V 1.1 01-26-82, SCY
               LPRDRV 11EC0 1207E
               PSEUDO  V 1.5 01-18-82, RNP
               PSEUDO 1207E 1286E
               TTYDRV  V 1.3 01-26-82, SCY
               TTYDRV 1286E 138D0
               NUCIO   V 1.2 12-08-81, MDS
               NUCIO  138D0 13B0C


                                             LOADING AN ENGINE SLOT    Page 14


          Engine Pascal User's Guide                            March 25, 1982



               NUCLUS  V 0.106 01-26-82, SCY
               NUCLUS 13B0C 146D0
               TTYDRV 146D0 1488A
               RING  50C8 1488A

               333K-bytes left for Pascal Code Area
               SEGMENT 0-LENGTH 22860D, REQUIRES 5A00X BYTES OF CORE.
               SEGMENT 1-LENGTH 18708D, REQUIRES 4A00X BYTES OF CORE.
               SEGMENT 2-LENGTH 65536D, REQUIRES 10000X BYTES OF CORE.
               SEGMENT 3-LENGTH 65536D, REQUIRES 10000X BYTES OF CORE.
               SEGMENT 4-LENGTH 65536D, REQUIRES 10000X BYTES OF CORE.
               SEGMENT 5-LENGTH 65536D, REQUIRES 10000X BYTES OF CORE.
               SEGMENT 6-LENGTH 65536D, REQUIRES 10000X BYTES OF CORE.
               SEGMENT 7-LENGTH 14080D, REQUIRES 3700X BYTES OF CORE.
               SEGMENT 0E-LENGTH 254D, REQUIRES 100X BYTES OF CORE.
                      375D K-BYTES OF CORE
               END OF ASSEMBLY
               1;F   ND0150.X02

               SEGE,SESIZE;P
               SEG0,S0SIZE;P
               SEG1,S1SIZE;P
               %P
               %Q
               EXIT

          Note that when  the user enters "r  nad" and a carriage  return, the
          system  will respond  with the  version  number of  NAD, a  carriage
          return, and  a linefeed.   The user  must then  enter ";x",  without
          entering a carriage  return.  The system will respond  by moving the
          cursor over three  spaces, at which point the user  should enter the
          name of  the command file  to be used  to create the  Pascal runtime
          support code, followed by a carriage  return.  NAD will then execute
          the NAD commands in the file specified with the ";x" command.


          SECTION 3.5 Running LOADII to Load a Slot          _________________________________________

          LOADII is used to load the assembled Pascal runtime support NIB file
          (the Nucleus) and  the (compiled) Pascal code NIB file  into a slot.
          Both NIB files must  be loaded when the slot is  first being loaded.
          Subsequent modification  of the Pascal  code requires only  that the
          Pascal code  NIB file be loaded,  independent of the  Pascal runtime
          support code.  An example of running LOADII  to load the Pascal run-
          time support code NIB file and the Pascal code NIB file follows.  An
          example of running LOADII to load modified Pascal code into the slot
          also  follows.   User  input appears  in  lowercase;  LOADII  output
          appears in uppercase.








                                             LOADING AN ENGINE SLOT    Page 15


          Engine Pascal User's Guide                            March 25, 1982



          To load a slot  with Pascal run time support code  and Engine Pascal
          code, proceed as follows:

          -run (isis)loadii

          NODE LOADER VERSION- 2.09
          ENTER FUNCTION:s
          ENTER KERNEL HOST NUMBER:150
          CIRCUIT BUILT
          ENTER SLOT NUMBER:1
          ENTER FILE FOR SLOT: nd0150.x05+nd0150.p05
          INITIALIZING MAC
          TRANSMITTING SEGMENT 14
          SENDING DATA TO ADDRESS:00000 BYTES=   16992
          SENDING DATA TO ADDRESS:10000 BYTES=   12956
          SENDING DATA TO ADDRESS:20000 BYTES=   22764
          SLOT 1 LOADED

          EXIT


          To perform a partial slot load (loading modified Engine Pascal code,
          for example), proceed as follows:

          -run (isis)loadii

          NODE LOADER VERSION- 2.09
          ENTER FUNCTION:p
          ENTER KERNEL HOST NUMBER:150
          CIRCUIT BUILT
          ENTER SLOT NUMBER:1
          ENTER FILE FOR SLOT:nd0150.p05
          SENDING DATA TO ADDRESS:20000 BYTES=   22764
          SLOT 1 LOADED

          EXIT

          where:

               s = the instruction to load the entire slot.

               p = the instruction to load a partial slot.

               150 = the Kernel host number, defined in the ISIS Tymfile.

               1 = the slot number.

               nd0150.x05 = the filename of  the Pascal run time  support code
                            NIB file.

               nd0150.p05 = the filename of the Engine Pascal NIB file.





                                             LOADING AN ENGINE SLOT    Page 16


          Engine Pascal User's Guide                            March 25, 1982



          SECTION 3.6 Job and Slot Status Information          ___________________________________________

          The user may obtain slot status  information regarding a Pascal pro-
          gram by using the Dynamic Debugging Tool (DDT).  To use the DDT, the
          user must run NAD, specify a NIB  file, and log into the ISIS Kernel
          Host.  An example follows.  A list of the DDT commands available for
          getting slot status information follows the example.

               -r nad
               082280
               %f   nd0150.x02

               ;g
               DATA RANGES READ:
               0-6063 10000-1356F 0E0000-0E00FD

               %g
               ;c   user4:150;
               WORKING
               CIRCUIT READY

               NODE: 150
               HOST: 150

               SLOT #:  ;r02.
               *

          where:

               %f = nd0150.x02 = specifies the  current NIB  file.  Note  that
                                 the system  generates the spaces  between the
                                 "%f" and the filename.

               ;g = causes the  binary data  in the specified  NIB file  to be
                    copied into NAD local image.

               %g = causes the  symbol table in the  NIB file to be  copied to
                    the local image.

               ;c   user4:150; = use the  username "user4" to log  into Kernel
                                 host 150 of the  Engine containing the Pascal
                                 program.

               ;r02. = the number of the slot containing the Pascal program.

               * = the system prompt while using DDT.










                                             LOADING AN ENGINE SLOT    Page 17


          Engine Pascal User's Guide                            March 25, 1982



          The DDT commands  available for getting slot  status information are
          listed below.  A description of each  command is included.  The ISIS                                                                          ____
          Reference Manual  contains a complete  listing of the  DDT commands.          ________________
          Each of the  commands is terminated by a carriage  return except for
          the Quit command.


          3.6.1 Execute Command                _______________

          Syntax: :e
          Description: Execute enables the user to start execution of the slot
               host, i.e., the Pascal program.


          3.6.2 Halt Command                ____________

          Syntax: :h
          Description: Halt enables  the user to stop the  job associated with
               the slot.


          3.6.3 Quit Command                ____________

          Syntax: %q
          Description: Quit enables the user to get out of NAD.


          3.6.4 Zap Command                ___________

          Syntax: :z

          Description:  Zap  enables the  user  to  log  off from  the  Kernel
               directly by  zapping the circuit to  the slot DDT.   The system
               will respond with  "Logging off?" to confirm  your intention to
               log off.  Enter ":z"  again to confirm the  logoff.  Enter any-
               thing else to abort the logoff.


          3.6.5 Status Command                ______________

          Syntax: ::?stat
          Description: Status  enables the user  to get  information regarding
               the status  of all processes  in his Pascal  program, including
               the state, the  priority, and the line number  of each process.
               In addition, if the compiler option  "number" is in effect, the
               current core address and the name will be listed for each proc-
               ess or procedure (see Section 2.1).









                                             LOADING AN ENGINE SLOT    Page 18


          Engine Pascal User's Guide                            March 25, 1982



               The processes and procedures include:

                    RUN = indicates that the process is currently running.

                    RDY = indicates that the process is in the Ready Queue.

                    IO  = indicates that the process is waiting for completion
                          of input or output.

                    WAI = indicates that the process is in the One Second Wait
                          Queue.

                    GAT = indicates that the  process is waiting to  enter the
                          monitor gate.

                    DLY = indicates that the  process is delayed in  a monitor
                          queue.

                    END = indicates that the process has terminated.

               The priority levels are:

                    0 = Disk monitor.

                    1 = Monitor.

                    2 = Disk.

                    3 = Normal.

                    4 = CPU bound.

               Level zero processes have the  highest priority.  All processes
               start  with level  three  priority.  The  line  number will  be
               approximate if the process is running.  Note that the slot dis-
               play is dynamic,  so that  if more than  20 processes  are dis-
               played, the state of the first ones  may not be accurate by the
               time the later ones are displayed.

               When the Status command is entered,  the system will prompt the
               user for a  subset of commands, with ":>".   The valid commands
               are:

               ::ALL        Print the status of all processes.

               ::PR n       Print the status of process "n".

               ::Q          Exit to DDT.

               ::EX         Exit from machine.

               ::HELP or ?  Print this list of commands.




                                             LOADING AN ENGINE SLOT    Page 19


          Engine Pascal User's Guide                            March 25, 1982



          Example:

          *::?stat

          :>::all
          Process 1: state=END priority=3 addr=26426 in process   MAIN_PROCESS
          Process 2: state=DLY priority=1 addr=24C1C in procedure DISK_INPUT
          Process 3: state=DLY priority=1 addr=24EBC in procedure DISK_INPUT
          Process 4: state=IO  priority=1 addr=23554 in procedure QUIT
          Process 5: state=WAI priority=3 addr=24404 in process   SEND_PROCESS
          Process 6: state=IO  priority=3 addr=246DC in procedure PROCESS_CHAR
          Process 7: state=DLY priority=1 addr=234E4 in procedure DELAY_RECEIVER
          Process 8: state=IO  priority=3 addr=21268 in procedure READ_LINE

          Note: This example  was generated with the  "number" compiler option
          set (see Section 2.1).



          3.6.6 Query Background Command                ________________________

          Syntax: ::?bt
          Description: Query Background  enables the user to get  a listing of
               the  currently running  background Program  Status Double  Word
               (PSD), which consists of the Program  Status Word (PSW) and the
               Program Counter.



          3.6.7 Query Foreground Command                ________________________

          Syntax: ::?ft
          Description: Query Foreground  enables the user to get  a listing of
               the currently running foreground PSD.






















                                             LOADING AN ENGINE SLOT    Page 20


          Engine Pascal User's Guide                            March 25, 1982



          3.6.8 Crash Code Command                __________________

          Syntax: :r crat,nn
          Description: Crash  Code enables  the user  to read  the crash  code
               table when a crash occurs, where "nn" is the number of bytes to
               be read.   The output  includes the address  of the  crash code
               count, the crash  count for that slot, the crash  code, and the
               crash register  save area.  Crash  codes are listed  in Section
               7.0.

          Example:

               :r crat,4C
               00060  0008  0027  0001  3F5A  0001  4128  0000  0000
               00070  0000  0010  0000  0000  0000  0000  0001  4128
               00080  0000  0000  0000  0002  0000  3ADC  0000  0000
               00090  0000  0000  0001  3F5A  0000  3ADC  0002  0310
               000A0  0002  02D4  0002  02FC  0002  004C

               where:

               0008 = the crash count.

               0027 = the crash code.

               0001  3F5A = address where the crash occurred.

               0001  4128 = the address the crash was called from.

               0000  0000 = the beginning of the crash register save area
                            (Register 0 - Register 15).



          3.6.9 Crash Register Command                ______________________

          Syntax: :r crreg,nn
          Description:  Crash Register enables the user to read the crash reg-
               ister for a slot when a crash  occurs, where "nn" is the number
               of bytes  to be read.   This command  is similar to  Crash Code
               above, except that only the crash register save area is output.
          Example:

               :r crreg,40
               0006C  0000  0000  0000  0000  0000  0000  0000  0000
               0007C  0001  4128  0000  0000  0000  0002  0000  3ADC
               0008C  0000  0000  0000  0000  0001  3F5A  0000  3ADC
               0009C  0002  0310  0002  02D4  0002  02FC  0002  004C








                                             LOADING AN ENGINE SLOT    Page 21


          Engine Pascal User's Guide                            March 25, 1982



          3.6.10 Query Host Command                 __________________

          Syntax: ::?host
          Description: Query Host causes a listing  of hosts being used by the
               slot.  The  listing is in  the form "n HOST  m HAS j  PORTS, IS
               state", where:

               n = the relative host number for that slot, in hexadecimal.

               m = the host number, in decimal.

               j = the number of ports, in decimal.

               state = the state of the Host.  The possible states are: gone!,
                       down!, shut, or answered.


          3.6.11 Query Who Command                 _________________

          Syntax: ::?who
          Description: Query Who causes a listing of the current status of the
               DDT for each  slot, including a history of the  two most recent
               users to log into each slot.


          3.6.12 Query CPU Command                 _________________

          Syntax: ::?cpu
          Description: Query CPU  produces a ratio of real  and slot (virtual)
               time,  output as  a percentage.   In addition,  the total  span
               (number of bytes)  of the  input and output  rings in  the dis-
               patcher is output.


          3.6.13 LMAC Command                 ____________

          Syntax: ::?lmac
          Description: LMAC instructs the Control Table Area (CTA) in the ISIS
               Dispatcher to be set up with segments for the slot.  There must
               be sufficient memory to  set up the desired  Memory Access Con-
               troller (MAC) areas, or an error will occur.


          3.6.14 Slot Command                 ____________

          Syntax: ::?slot
          Description: Slot causes the output of the current slot number.









                                             LOADING AN ENGINE SLOT    Page 22


          Engine Pascal User's Guide                            March 25, 1982



          3.6.15 Query History Command                 _____________________

          Syntax:  ::?hist
          Description: Query History causes  a listing of all  system diagnos-
               tics, beginning with the oldest diagnostics.


          3.6.16 Query Port Command                 __________________

          Syntax: ::?port
          Description: Query Port causes a listing  of all users of the Kernel
               ports.


          3.6.17 Hang Kernel Port Command                 ________________________

          Syntax: ::?hang n
          Description: Hang Kernel Port causes the  user on the specified port
               "n" to be hung.  The specified port number may be derived using
               the Query Port command described above.


          3.6.18 Read Entry Table Command                 ________________________

          Syntax: :rentrtb,nn
          Description: Read Entry Table causes  the Pascal Nucleus entry point
               table to  be output, for "nn"  bytes.  The entry table  keeps a
               count of the number of times an  entry point in the Nucleus has
               been called.  Entry table counting is enabled using "ECOUNT" in
               the Tymfile  (see Section  3.1.11).  The  twelve Nucleus  entry
               points are:

               Name        Function               ____        ________
               DELAYC      Put the process in the delay queue variable.
               CONTNC      Put the delayed process back to ready queue.
               NUCIOC      Nucleus I/O request.
               PREEMC      Place the result in the process header and
                           terminate execution of a sequential program.
               WAITC       The process has been preempted and placed in the
                           one second wait queue.
               REALTC      Fetch realtime.
               CONSTC      Fetch the address of the constants.
               GTINIC      Initialize a monitor.
               GTENTC      Process enter a monitor.
               GTLEAC      Process leave a monitor.
               INITPC      Initialize a Child Process.
               ENDP        End the process currently running.









                                             LOADING AN ENGINE SLOT    Page 23


          Engine Pascal User's Guide                            March 25, 1982



          SECTION 4.0 WRITING A CONCURRENT (ENGINE) PASCAL PROGRAM          ________________________________________________________

          This section contains  a description of  the Engine  Pascal environ-
          ment, and a discussion of  considerations when designing and writing
          an Engine Pascal program.  It also  includes an outline of an Engine
          Pascal program as an example of Concurrent Pascal.


          SECTION 4.1 The Engine Pascal Environment          _________________________________________

          The Engine  Pascal environment  provides for  three data  types that
          contribute to the  efficient structure of concurrent  programs.  The
          three types are processes, monitors, and classes.  The Engine Pascal
          environment also includes the Pascal  Nucleus, which oversees Engine
          Pascal operations.


          4.1.1 The Process                ___________

          A process consists of one or  more data structures, and a sequential
          algorithm with a set of local variables.   A process may run concur-
          rently with other processes, competing  with them for CPU resources.
          Several named instances of a process may be declared.


          4.1.2 The Monitor                ___________

          A monitor is a key concept in  Engine Pascal.  It consists of one or
          more data structures,  and a set of executable routines  that can be
          performed on  that structure by  specified processes.   Although the
          routines may be requested by  several processes simultaneously, only
          one process  will be permitted to  execute a monitor routine  at any
          given time.  Several  named instances of a monitor  may be declared.
          Processes  call monitors  to communicate  with them  and with  other
          processes.


          4.1.3 The Class                _________

          A class consists of one or  more data structures and some executable
          routines which define all of the  permissible operations that may be
          performed on  the data structure(s).   Several instances of  a class
          may be declared; however, each instance  within a monitor, class, or
          process must have a  unique name, and may only be  associated with a
          single process.


          4.1.4 The Pascal Nucleus                __________________

          The Pascal Nucleus  consists of a set of routines  that schedule the
          use of CPU resources among processes,  and oversee the proper use of
          monitors by processes.  It also acts as the interface to various I/O
          devices, and to TYMNET, through ISIS.   The Pascal program calls the
          appropriate Nucleus routine when one of these services is needed.


                       WRITING A CONCURRENT (ENGINE) PASCAL PROGRAM    Page 24


          Engine Pascal User's Guide                            March 25, 1982



          SECTION 4.2 Designing a Concurrent Program          __________________________________________

          This section addresses the design considerations of an Engine Pascal
          program.  It includes a discussion of  the analysis of a programming
          problem, and the resources available for meeting those requirements.
          Also included is a specific programming problem, and an outline of a
          sample program for that problem.


          4.2.1 Design Considerations                _____________________

          Engine Pascal is  suitable for   network intensive,  concurrent pro-
          grams that are to  run on a TYMNET Engine.  The  application that an
          Engine Pascal program is to be written  for should be evaluated as a
          system, and the operations of that system should be identified.

          Concurrent operations are  those which are to  occur simultaneously.
          Distinct  processes  must be  used  for  each of  those  operations.
          Synchronous operations  are those which  must occur in  a particular
          order.  A  single process  may be  used to  support a  collection of
          synchronous operations.  Asynchronous operations are those which may
          occur in any  order.  Typically, such operations  should be assigned
          to separate processes.

          A monitor  must be used as  a communications interface, to  pass any
          data, or to synchronize signals, between processes.  A process which
          invokes a monitor  is said to "enter" that monitor,  or a particular
          routine in that monitor.

          Note that multiple copies (or instances) of a single process or mon-
          itor may be required (with multi-user applications, for example).



          4.2.2 A Concurrent Pascal Problem                ___________________________

          The problem outline defines  some of the basic operations  of a res-
          taurant using a  concurrent program.  Several of  the operations may
          be grouped as the waiter's responsibilities, such as taking an order
          from a customer  and delivering it to the kitchen,  bringing wine to
          the  patron, bringing  a dish  to  the patron,  clearing the  table,
          bringing the check to the table, and collecting the payment from the
          customer.  Other operations may  be grouped as the  chef's responsi-
          bilities, such as reading the order,  preparing the proper dish, and
          placing the dish to be picked up by a waiter on the hot table.

          Two points of  communication, or interfaces, between  the waiter and
          the chef must be considered.  One is the "carousel" where the waiter
          places an order, and where the chef gets  the next dish he must pre-
          pare.  The other is the "hot table" where the chef places a prepared
          dish to be picked up by the waiter.





                       WRITING A CONCURRENT (ENGINE) PASCAL PROGRAM    Page 25


          Engine Pascal User's Guide                            March 25, 1982



          The fact that there  are likely to be several waiters  or chefs, who
          may or may  not be performing  the same respective  tasks simultane-
          ously, makes  this hypothetical  restaurant a  candidate for  Engine
          Pascal.  A program  written to accommodate several  waiters or chefs
          will treat these "simultaneous"  operations concurrently, which will
          appear simultaneous to hypothetical patrons.

          Each of these  operations may be treated  as a routine.  All  of the
          routines required  for being a waiter  may be collected in  a single
          unit of type "process".  The following  group of routines, then, may
          be defined as the waiter process:

               taking an order from a patron.
               bringing the order to the kitchen.
               bringing wine to the patron.
               bringing food to the patron.
               clearing the table.
               bringing the check to the patron.
               collecting the money and returning the change.

          Similarly, the  following group  of routines may  be defined  as the
          chef process:

               deciding on a menu for the day.
               getting the next order to be prepared.
               preparing salad.
               preparing soup.
               preparing the main dish.
               preparing dessert.
               putting each prepared dish on the hot table to be picked up.

          The routines  which act  as interfaces between  the waiter  and chef
          processes may be defined using the following monitors:

               the waiter placing his order on the "carousel" in the kitchen.
               the chef taking an order from the carousel.
               the chef placing the prepared dish on the hot table.
               the waiter retrieving the prepared dish from the hot table.

          A main process must also be written to declare the desired number of
          processes and monitors, and to initialize the required processes and
          monitors.  An  outline of the  program which runs  this hypothetical
          restaurant appears in the following section.













                       WRITING A CONCURRENT (ENGINE) PASCAL PROGRAM    Page 26


          Engine Pascal User's Guide                            March 25, 1982



          4.2.3 A Concurrent Program                ____________________

          This section  contains an  outline of a  program for  the restaurant
          operation described in the previous section.


          type carousel_def = monitor;

               "This  monitor  is for  placing  orders.   It is  an  interface
               between the waiter and the chef processes, and is equivalent to
               the order carousel where orders are queued up to be prepared."


          procedure initialize_carousel_def;

               "This procedure clears  from the order carousel  any extraneous
               orders that may have been left from the day before."


          procedure ENTRY drop_off_request;

               "This procedure enables a waiter to place  an order on the car-
               ousel.   It is  an  entry procedure  which  is  invoked by  the
               place_order procedure in waiter_process."


          procedure ENTRY get_request_for_dish;

               "This procedure enables  a chef to get the next  order from the
               carousel.  It  is an  entry procedure which  is invoked  by the
               what_next procedure in chef_process.


          begin

               "This is the  initial routine in the  carousel_def monitor.  It
               invokes the initialize_carousel_def procedure to ready the car-
               ousel for use.

          end;     "carousel monitor definition"
















                       WRITING A CONCURRENT (ENGINE) PASCAL PROGRAM    Page 27


          Engine Pascal User's Guide                            March 25, 1982



          type hot_table_def = monitor;

               "This monitor is  for food that has been prepared  and is ready
               to be  served.  It  is an  interface between  the chef  and the
               waiter processes, and is equivalent to the hot table where food
               to be delivered to a patron is placed."


          procedure initialize_hot_table;

               "This procedure clears the hot table of any food left over from
               a previous day.


          procedure ENTRY pick_up_dish;

               "This procedure enables a  waiter to pick up a dish  for one of
               his patrons.  It is an entry  procedure which is invoked by the
               save_dish procedure in waiter_process.


          procedure ENTRY put_dish_on_hot_table;

               "This procedure enables a chef to  place a prepared dish on the
               hot table.   It is an entry  procedure which is invoked  by the
               dish_prepared procedure in chef_process.


          begin

               "This  is the  initial routine  in the  hot_table monitor.   It
               invokes  the initialize_hot_table  procedure to  ready the  hot
               table for use.

          end;      "hot_table definition"





















                       WRITING A CONCURRENT (ENGINE) PASCAL PROGRAM    Page 28


          Engine Pascal User's Guide                            March 25, 1982



          type waiter_process = process (place_order : carousel_def;
                                         where_to_get_food : hot_table_def);

               "This process defines the tasks of a waiter.  The parameters in
               the declaration identify the monitors it is linked to."


          procedure initialize_waiter;

               "This  procedure prepares the waiter for the tasks of the day."


          procedure take_order;

               "This procedure  instructs a  waiter to  take an  order from  a
               patron."


          procedure bring_order_to_kitchen;
             place_order.drop_off_request;

               "This procedure  instructs a  waiter to place  an order  on the
               carousel.   It invokes  the drop_off_request  procedure in  the
               carousel monitor."


          procedure get_wine;

               "This procedure instructs a waiter to  get drinks or wine for a
               patron."


          procedure bring_dish;
             where_to_get_food.pick_up_dish;

               "This procedure instructs a waiter to bring a dish to a patron.
               It invokes the  pick_up_dish procedure  in the  hot_table moni-
               tor."


          procedure clear_table;

               "This procedure instructs a waiter to clear a patron's table."


          procedure bring_check;

               "This procedure  instructs a  waiter to  bring the  check to  a
               patron."







                       WRITING A CONCURRENT (ENGINE) PASCAL PROGRAM    Page 29


          Engine Pascal User's Guide                            March 25, 1982



          procedure return_change;

               "This procedure instructs a waiter  to bring the correct change
               to a patron."


          begin   "waiter_process routine"

               "This is the  initial routine for  the waiter process.  It pre-
               pares  the waiter  for the  tasks of  the day,  and cycles  him
               through his various tasks."

             initialize_waiter;
             cycle
                take_order;
                bring_order_to_kitchen;
                get_wine;
                bring_dish;
                clear_table;
                bring_check;
                return_change
             end "of cycle"

          end;    "waiter_process routine"
































                       WRITING A CONCURRENT (ENGINE) PASCAL PROGRAM    Page 30


          Engine Pascal User's Guide                            March 25, 1982



          type chef_process (carousel : carousel_def;
                             hot_table : hot_table_def);

               "This process defines  the tasks of a chef.   The parameters in
               the declaration identify the monitors it is linked to."


          procedure initialize_chef;

               "This procedure  prepares the chef for  the tasks of  the day."
               It includes housekeeping, such as sharpening knives, etc.


          procedure next_order;
             next_order_on_carousel.get_request_for_dish;

               "This procedure instructs the chef to  get the next order to be
               prepared.  It invokes the get_request_for_dish procedure in the
               carousel_def monitor."


          procedure prepare_soup;

               "This procedure instructs a chef to prepare an order of soup."


          procedure prepare_salad;

               "This procedure instructs a chef to prepare an order of salad."


          procedure prepare_prime_rib;

               "This procedure instructs  a chef to prepare an  order of prime
               rib."


          procedure prepare_lemon_chicken;

               "This  procedure  instructs  a  chef to  prepare  an  order  of
               lemon_chicken."


          procedure prepare_lamb_chops;

               "This procedure  instructs a chef to  prepare an order  of lamb
               chops.


          procedure prepare_salmon_steak;

               "This procedure instructs a chef to  prepare an order of salmon
               steak."



                       WRITING A CONCURRENT (ENGINE) PASCAL PROGRAM    Page 31


          Engine Pascal User's Guide                            March 25, 1982



          procedure prepare_special_of_the_day;

               "This procedure  instructs the chef  to prepare the  special of
               the day for a patron."


          procedure dish_prepared;
             hot_table.put_dish_on_hot_table;

               "This procedure  instructs the chef to  put a prepared  dish on
               the hot table.  It  invokes the put_dish_on_hot_table procedure
               in the hot_table monitor."


          begin     "chef_process routine"

               "This is the initial routine for the chef process.  It prepares
               the chef for the  tasks of the day, and cycles  him through the
               preparation of various dishes."

             initialize_chef;
             cycle
                next_order;
                case dish of
                   soup : prepare_soup;
                   salad : prepare_salad;
                   prime_rib : prepare_prime_rib;
                   lemon_chicken : prepare_lemon_chicken;
                   lamb_chops : prepare_lamb_chops;
                   salmon_steak : prepare_salmon_steak;
                   special_of_the_day : prepare_special_of_the_day
                end; "case of"
                put_dish_on_hot_table
             end "cycle"

          end;     "chef_process routine"




















                       WRITING A CONCURRENT (ENGINE) PASCAL PROGRAM    Page 32


          Engine Pascal User's Guide                            March 25, 1982



          "This is the  main process.  The required number of  chef and waiter
          processes are  declared.  In  addition, the  variable hot_table,  of
          type hot_table_def,  is declared.   The variable  carousel, of  type
          carousel_def, is also declared.  Each  of the chef processes, waiter
          processes, and the carousel_def and  hot_table monitors are initial-
          ized.  These processes run concurrently, which causes the restaurant
          program to run efficiently."


          var
             chef1 : chef_process;
             chef2 : chef_process;               "declare chef processes"
             chef3 : chef_process;

             waiter1 : waiter_process;
             waiter2 : waiter_process;
             waiter3 : waiter_process;           "declare waiter processes"
             waiter4 : waiter_process;
             waiter5 : waiter_process;

             hot_table :  hot_table_def;         "declare variable hot_table
                                                    of type hot_table_def"
             carousel : carousel_def;            "declare variable carousel
                                                    of type carousel_def"

          begin   "main process"

             init hot_table;                     "causes the initial routine
                                                    in the hot_table monitor
                                                    to be executed"

             init carousel                       "causes the initial routine
                                                    in the carousel_def
                                                    monitor to be executed"

             init chef1 (carousel, hot_table);
             init chef2 (carousel, hot_table);   "initializes
             init chef3 (carousel, hot_table);      chef processes"

             init waiter1 (carousel, hot_table);
             init waiter2 (carousel, hot_table);
             init waiter3 (carousel, hot_table); "initializes
             init waiter4 (carousel, hot_table);     waiter processes"
             init waiter5 (carousel, hot_table)

          end.    "main process"










                       WRITING A CONCURRENT (ENGINE) PASCAL PROGRAM    Page 33


          Engine Pascal User's Guide                            March 25, 1982



          SECTION 4.3 Memory Use Considerations          _____________________________________

          This section contains information regarding variable storage alloca-
          tion when designing an Engine  Pascal program.  It addresses methods
          available for  minimizing storage of  permanent variables  and stack
          variables to  keep from running  out of  memory when the  program is
          running.

          Permanent variables are  variables declared outside of  the routines
          in processes,  monitors, and classes.   The storage  requirement for
          permanent variables accounts for all  permanent variables being used
          in the  program.  The  permanent variable  storage requirements  for
          each system component, especially each process, may be obtained from
          the listing generated using the  "xref" compiler option (see Section
          2.1).  Permanent  variable storage  is determined  at compile  time,
          allocated at run time, and is "fixed".

          Temporary variables  are variables declared in  routines (procedures
          or  functions).  They  are stored  in a  stack.  The  stack size  is
          determined by the storage requirements of the "worst case" of proce-
          dure nesting in the program.  The  stack requirements for each proc-
          ess may be obtained from the listing generated using the "xref" com-
          piler option  (see Section 2.1).   The total stack  requirements for
          the program is the sum of the stack space required for each process.
          Even though  the size of  the stack  varies during run  time because
          temporary variables  only exist  for the  duration of  the procedure
          call, the high water mark must still  be accounted for when allocat-
          ing stack space.

          Note that monitors or classes are variables owned by a process.  The
          memory required for them is part of the memory requirements for that
          process.  Note  also that the memory  required for a process  is not
          actually allocated  until the  process is  initialized at  run time.
          The following considerations address some of the tradeoffs that must
          be made regarding  memory utilization when designing  or debugging a
          concurrent program.


          1.   Permanent Variables vs. Stack Variables  -- A balance should be
               struck between the use of permanent  variables and stack varia-
               bles.  For example, if stack variables are substituted for per-
               manent variables and used in routines  that do not increase the
               stack size  (not added to the  longest set of  nested routines,
               for example) , less memory is used.

          2.   Monitors vs. Classes -- Using a unit monitor instead of several
               copies of  a class or  process minimizes total  storage.  Note,
               however, that  whether such  use of  monitors is  beneficial to
               program efficiency depends on their utilization.

          3.   Structure of Routines -- Excessive  nesting of routines results
               in unnecessary stack overhead.




                       WRITING A CONCURRENT (ENGINE) PASCAL PROGRAM    Page 34


          Engine Pascal User's Guide                            March 25, 1982



          4.   Location of Permanent  Variables -- Permanent variables  can be
               passed down to  second level operations  and used as  work buf-
               fers.  In other  words, a single permanent variable  of a given
               size may be used as a variable of a different type in secondary
               routines to minimize variable storage.  Similarly, the declara-
               tion of a global  variable is more efficient  than the declara-
               tion of local variables in separate routines.

          5.   Increasing Specific Operations  on a Data Structure  vs. Perma-
               nent  Residency  of  a  Complete  Data  Construct  --  Consider
               increasing operations that can be used to get specific informa-
               tion from a data structure controlled by a monitor, rather than
               creating an operation that requires the  use of the entire data
               structure.   While it  would require  writing additional  code,
               only the essential  information would be sought.   As a result,
               less  storage would  be required  by the  calling routine,  and
               there would be less irrelevant information returned.

          6.   Location of  routines --  Since classes  can be  shared, it  is
               ideal to place all common routines in a class to minimize vari-
               able storage.


          SECTION 4.4 Recommended Coding Style          ____________________________________

          This section contains  a description of the  standards and practices
          that have been developed for  writing Engine Pascal programs.  These
          standards contribute to  easier writing and debugging of  code in an
          environment in which  several programmers may be  working on modules
          of a larger  project.  In the list that follows,  practices that are
          essentially required are noted below  as Recommended Standards (RS).
          Practices that reflect  a more personal programming  style are noted
          below as Suggested Practices (SP).   The areas discussed include the
          organization  of  source  files,  and  the  structure  of  programs,
          modules, and routines.


          4.4.1 Program Files                _____________

          A program that is longer than  1000 lines should be partitioned into
          multiple source files  (RS).  Each system type  declaration, as well
          as the  prologue defining  constants and  global type  declarations,
          should be retained in a separate  source file.  Note that the source
          file which contains the global  type declarations should precede the
          system type  declarations.  It  is supported  by the  CONCAT program
          which combines the desired source  modules prior to compilation (see
          Section 4.5).

          The following  conventions regarding  filenames are  also suggested.
          Filenames  should be  mnemonic.   If the  file  contains code  being
          developed, then the  filename extension should contain  the revision
          number of  the code  in the file  (SP).  If  the file  contains code
          being  loaded into  a  specific slot,  then  the filename  extension
          should contain the slot number.  Sample filenames are listed below.


                       WRITING A CONCURRENT (ENGINE) PASCAL PROGRAM    Page 35


          Engine Pascal User's Guide                            March 25, 1982



          These files contain code being developed.

               HOST.B02 = the concatenation command file for revision 2 of the
                          HOST file.

               HOST.R02 = revision 2 of the concatenated HOST source module.

               HOST.O02 = the object  code for revision  2 of the  HOST source
                          code.

               HOST.L02 = the listing file  for revision 2 of  the HOST source
                          code.

               HOST.C02 = the command file used to run CONCAT and OBJNIB using
                          revision 2 of the HOST source code.


          These files contain code to be loaded in a specific slot.

               ND3777.C02 = the NAD command file for slot 2 of node 3777.

               ND3777.P02 = the Pascal object code for slot 2 of node 3777.

               ND3777.X02 = the Pascal Nucleus for slot 2 of node 3777.

               ND3777.Z01 = object code  for the Pascal  Nucleus in slot  1 of
                            node 3777.

               ND3777.N01 = the NIB file for slot 1 of node 3777.



























                       WRITING A CONCURRENT (ENGINE) PASCAL PROGRAM    Page 36


          Engine Pascal User's Guide                            March 25, 1982



          4.4.2 Program Structure                _________________

          The recommended convention  for the structure of  the Pascal program
          is as follows (RS):

               global declarations

                  CONST
                  TYPE (nonsystem)
                  TYPE (system)

               local declarations

               initial procedure

          Nonsystem type  declarations contain nonexecutable code.   They also
          contain global  variables required by  any system  type declarations
          that follow it.

          System type  declarations contain  executable code  in a  process, a
          class,  or a  monitor.  Note  that  any type  declarations that  are
          unique to a process, a class, or a monitor should be defined locally
          rather than globally.

          The program  should be written in  lowercase, with selective  use of
          uppercase (RS).   The use  of uppercase  is not  system significant.
          Note the following exceptions:

               1.  Comments may be written in mixed case (RS).

               2.  The name of  a procedure should be written  in uppercase in
                   the procedure declaration (SP).

               3.  Pascal reserved words should be  written in lowercase, with
                   the following exceptions: ENTRY, IN, AND, OR, and NOT (SP).

               4.  Enumeration  constants should  be written  in uppercase  to
                   distinguish them from variable names (SP).

               5.  Identifiers should be written in lowercase (SP).

          The  following convention  regarding program  format  and layout  is
          recommended:

               1.  Each system  type declaration  should begin  on a  new page
                   (RS).

               2.  Each routine or  program block should begin on  a new page,
                   and should be  fully contained on that one  page to improve
                   its readability (SP).

               3.  Use tabs set  at 3, 5, 7, 9,  and 11; or tabs set  at 4, 7,
                   10, 13, and 16 (SP).  Avoid deeper indentations.



                       WRITING A CONCURRENT (ENGINE) PASCAL PROGRAM    Page 37


          Engine Pascal User's Guide                            March 25, 1982



               4.  If more than five or six  levels of indentation are needed,
                   consider putting deeply nested code in a separate procedure
                   (SP).

               5.  Use blank lines to delineate a group of related statements,
                   headed by a comment describing the  purpose of those state-
                   ments (SP).

               6.  Use white space and underscores to make arguments and para-
                   meters more readable.  For example, use:

                   routine_call (first_parameter, second_parameter);

                   rather than:

                   routinecall(firstparameter,secondparameter);

               7.  Statements at the  same syntactic level should  be indented
                   equally to improve readability of the program (RS).

               8.  If a structured statement requires  more than one line, all
                   lines after the first should be indented (RS).



          4.4.3 Modules                _______

          A module is considered  to be a unit of source  text which typically
          defines a class, process, or monitor.  A module should be structured
          as follows:

               header
               constants
               types
               internal procedures and functions
               external (ENTRY) procedures and functions
               initial procedure

          The header should contain the following information as comments:

               1.  A description of the function and purpose of the module.

               2.  A list of other system types required by this module.

               3.  A description of  the function of each entry  point in this
                   module.

               4.  A description of the revision  history, including the date,
                   the changes, and the author of the changes.

               5.  The name of the module source file.





                       WRITING A CONCURRENT (ENGINE) PASCAL PROGRAM    Page 38


          Engine Pascal User's Guide                            March 25, 1982



          The  internal and  external  procedures  should not  be  intermixed,
          except that an internal  procedure used by only  one external proce-
          dure may be located just prior to that procedure.


          4.4.4 Routines                ________

          The following conventions  should be observed when  writing routines
          (procedures or functions).

               1.  A routine  should be  preceded by  a header  describing the
                   function of the  routine, and  any assumptions  or restric-
                   tions involved in calling that routine (RS).

               2.  The formal  parameters of the  routine should  be carefully
                   documented as to  whether they are input,  output, or both.
                   In  addition, any  units of  measure  should be  explicitly
                   stated.  For  example, if  an input  parameter is  used for
                   time of day, it should be stated that the parameter expects
                   the time to be  expressed in seconds past  midnight, Green-
                   wich Mean Time (GMT) (RS).

               3.  An attempt  should be made  to keep  a routine on  a single
                   page, to improve its readability.


          4.4.5 Statements                __________

          The following conventions are recommended for statements (RS).

               1.  Keywords bounding  a compound statement should  be indented
                   equally.  This includes  BEGIN-END, CASE-END, REPEAT-UNTIL,
                   and CYCLE-END  statements.  Internal  statements should  be
                   indented further, as follows:

                   case variable_type of
                      value_1: statement_1;
                      value_2: statement_2;
                      value_3: statement_3
                   end;

               2.  A BEGIN-END  block should be  indented from  its containing
                   statement, as follows:

                   if <condition> then
                      begin
                         statement_1;
                         statement_2
                      end
                   else
                      begin
                         statement_3;
                         statement_4
                      end;


                       WRITING A CONCURRENT (ENGINE) PASCAL PROGRAM    Page 39


          Engine Pascal User's Guide                            March 25, 1982



               3.  If the  END keyword appears more  than a few  lines distant
                   from the start of the BEGIN  statement, a comment should be
                   included to  link them together.   In addition,  if several
                   END statements appear in close  proximity to one another, a
                   comment should  be included  to link  each of  them to  its
                   partner.  For example:

                   begin
                      if <condition> then
                         begin
                            statement_1;
                            case <variable_type> of
                               1: statement_a;
                               2: statement_b;
                               3: if <condition> then
                                  begin
                                     statement_2;
                                     statement_3
                                  end   "if"
                            end   "case"
                         end   "then"
                      else   "not if"
                         begin
                            statement_4;
                            repeat
                               statement_5;
                               statement_6
                            until <condition>
                         end   "else"
                   end;   "block"


























                       WRITING A CONCURRENT (ENGINE) PASCAL PROGRAM    Page 40


          Engine Pascal User's Guide                            March 25, 1982



          4.4.6 Naming Conventions for Variables                ________________________________

          The following conventions should be used for naming variables (RS).

               1.  Use an underscore for improved readability.  For example:

                   first_index_entry     instead of     firstindexentry

               2.  Use  meaningful variable  names  instead of  abbreviations.
                   For example:

                   terminal_status_record     instead of     trm_st_rcd

               3.  Use names consistently.  For example, if you declare:

                   type internal_record_type

                   then declare:

                   internal_record:internal_record_type;
                   temporary_internal_record: internal_record_type;

                   instead of:

                   internal_message: internal_record_type;
                   temporary_area: internal_record_type;

               4.  Use the same name for procedure call arguments and the pro-
                   cedure parameter  list whenever possible.  For  example, if
                   the procedure parameter list reads:

                   procedure read_data (buffer : line;
                                        count : integer);

                   Use the same  variable names  in the  procedure call  argu-
                   ments, as follows:

                   read_data (buffer, count);

                   instead of:

                   read_data (input_area, i);

               5.  Parallel instances of a variable should have the same name.
                   For example, if a type declaration has the name:

                   type utility_type = class;

                   then  all processes  declaring  an  instance of  this  type
                   should use the same name "utility".






                       WRITING A CONCURRENT (ENGINE) PASCAL PROGRAM    Page 41


          Engine Pascal User's Guide                            March 25, 1982



               6.  Declarations of variables  should be accompanied by  a com-
                   ment stating the  purpose of the variable,  and the meaning
                   of any specific values.  For example:

                   index : integer;     "index for characters in input line"
                   more : boolean;      "true if not all input characters
                                         scanned"



          SECTION 4.5 Using the CONCAT Program          ____________________________________

          The CONCAT program is designed  to concatenate several Pascal source
          files into a  single file, which may  then be compiled as  an Engine
          Pascal program.  These  individual source files, or  modules, may be
          in the user's directory, in the master directory, or both.

          The CONCAT program includes the concept  of a Master directory, from
          which code is normally taken, and the local directory (the directory
          currently being used), to  facilitate the maintenance of  large sys-
          tems in which  several programmers are updating  and testing various
          components simultaneously.  When an  individual programmer considers
          a component ready for use by others,  he moves it from his directory
          into the  Master directory,  where all users  may access  the latest
          version of code.

          To use the CONCAT program, the user must first create a command file
          containing the commands  described in Sections 4.5.1  through 4.5.6.
          He must then create a file  called "CONCAT.CMD", containing the name
          of the command file.  The CONCAT program will automatically look for
          a file named  CONCAT.CMD to find the  name of the command  file.  If
          the user does  not have a file named CONCAT.CMD  containing the name
          of the command file, the CONCAT program will prompt the user for the
          name of the command file.

          The command  file may  contain the  commands described  below.  Each
          command consists of  a single letter, followed by  a space, followed
          by an argument.  More than one command may appear on a line but they
          must be separated by at least one space.  Note that the order of the
          commands in  the command  file is  important; they  must follow  the
          order as listed below.  Failure to observe  the proper order of com-
          mands may produce undesired results.

          To run the CONCAT program, the user must enter:

               run (epascal)concat










                       WRITING A CONCURRENT (ENGINE) PASCAL PROGRAM    Page 42


          Engine Pascal User's Guide                            March 25, 1982



          The CONCAT commands are as follows:



          4.5.1 Name Command                ____________

          Syntax: N <output filename>
          Default: None, this command and its argument must be specified.
          Description: The  Name command closes  the previous output  file (if
               any), and opens the specified file  for receiving the concaten-
               ated output file  from the CONCAT program.  Note  that the Name
               command must  precede any Include  commands it applies  to (see
               Section 4.5.4).


          4.5.2 Master Directory Command                ________________________

          Syntax: M <nnnnnnnnnnn>
          Default: If the command  is omitted, any Include  or Remote commands
                   will apply to files in the  user's directory.  If the PPN =
                   0 or  is omitted, the  user's directory will  be considered
                   the master directory.
          Description: The  Master Directory command specifies  the Programmer
               Project Number (PPN)  of the master directory  from which files
               will be  taken when the Include  or the Remote command  is used
               (see Sections  4.5.4 and 4.5.5).   The PPN  is a pair  of octal
               numbers separated by a  comma that may be obtained  from a TYM-
               COM-10 monitor using  the PPN command.  These  two numbers must
               be  entered as  a single  eleven  digit number  for the  Master
               Directory command.   Note that the  first number may  contain a
               maximum of  five digits,  and the second  number may  contain a
               maximum of  six digits.  If either  number is shorter  than its
               respective maximum length,  it must be padded on  the left with
               zeros.  For example, if the PPN  is "5,267", the number entered
               using the Master Directory command must be "00005000267".

               The  command must  precede  any Include  or  Remote command  it
               applies  to.  More  than one  Master Directory  command may  be
               used.  Note  that if the  Master Directory command  argument is
               zero, the  CONCAT program will  equate the master  directory to
               the user's directory.


          4.5.3 Exclude Command                _______________

          Syntax: E <filename>
          Default: None.
          Description: The Exclude  command causes the CONCAT  program to take
               the specified filename from the  user's directory when referred
               to in subsequent Include commands regardless of any outstanding
               Master Directory commands  (see Sections 4.5.2 and  4.5.4).  In
               effect, it excludes a file from a master directory if a file of
               the same  name exists in the  user's directory.  Note  that the
               Exclude command must precede the Include command it relates to.


                       WRITING A CONCURRENT (ENGINE) PASCAL PROGRAM    Page 43


          Engine Pascal User's Guide                            March 25, 1982



          4.5.4 Include Command                _______________

          Syntax: I <filename>
          Default: None.
          Description: The  Include command  causes the  specified file  to be
               appended to the output file.   Note that the specified filename
               should not  include a  directory prefix or  a PPN  postfix.  If
               there is  no Master  Directory command  to correspond  with the
               Include  command, the  specified file  will be  taken from  the
               user's directory.  (see Sections 4.5.2 and 4.5.3).


          4.5.5 Remote Command                ______________

          Syntax: R <filename>
          Default: None.
          Description: The  Remote command causes  the CONCAT program  to stop
               using the current command  file, and to begin  using the speci-
               fied file  as a command file.   Note that one may  not reinvoke
               the original command file after using a new command file.


          4.5.6 Substitute Command                __________________

          Syntax: S <old filename> <new filename>
          Default: None.
          Description: The  Substitute command  causes the  file with  the new
               filename to be appended  to the output file in place  of a file
               with the  old filename when  an Include command  containing the
               specified old filename is encountered (see Section 4.5.2).  The
               file with the  old filename will not be appended  to the output
               file.  Note that  the Substitute command takes  precedence over
               the Exclude  command, which will operate  on the file  with the
               new filename.






















                       WRITING A CONCURRENT (ENGINE) PASCAL PROGRAM    Page 44


          Engine Pascal User's Guide                            March 25, 1982



          4.5.7 Example of the CONCAT Program                _____________________________


          If the Master Directory contains the following files:

               FILE1.PAS
               FILE2.PAS
               FILE3.PAS
               JOIN.CTL

          If the contents of the file JOIN.CTL (the command file in the Master
          directory) is:

               I FILE1.PAS
               I FILE2.PAS
               I FILE3.PAS

          If the user's directory contains the following files:

               FILE1.PAS
               FILE3.PAS
               MY.CTL
               CONCAT.CMD

               and if the contents of CONCAT.CMD is the filename MY.CTL, which
               contains the following commands:

               N BIGFIL.PAS
               M <master ppn>
               E FILE3.PAS    R JOIN.CTL

               then the command "run(epascal)concat"  will cause the following
               files to be merged in a file named "BIGFIL.PAS".

               FILE1.PAS       from the Master Directory
               FILE2.PAS       from the Master Directory
               FILE3.PAS       from the user's directory.



















                       WRITING A CONCURRENT (ENGINE) PASCAL PROGRAM    Page 45


          Engine Pascal User's Guide                            March 25, 1982



          SECTION 5.0 PASCAL I/O          ______________________

          Input and output in the Engine  Pascal environment are controlled by
          routines located in the Pascal Nucleus, which are called from within
          the Pascal program.  The statement used to call that procedure spec-
          ifies the  input/output device, the name  of the record  required to
          pass control information between the program and the device, and the
          name of the buffer containing any necessary data.  The statement has
          the following general form:

               io (data_buffer, parameter, device, unit_number);

          where:

               io = the statement which calls the Nucleus I/O routines.

               data_buffer = the name of the buffer containing data to be used
                             for the input/output process.  Note that the var-
                             iable reference "data_buffer"  must be assignable
                             at the point of call.  It must either be a varia-
                             ble  local to  the system  type  or routine  from
                             which the call is being made, or, if an argument,
                             it must be a "var" argument.  This method is true
                             even if  the "io" call  will not modify,  or even
                             reference the "data_buffer".

                             Also,  if the  "data_buffer" is  modified by  the
                             "io" call, no  check will be made  to ensure that
                             the variable  is not  overwritten, i.e,  that the
                             memory following may be  modified without causing
                             a range error.   This is the only  instance where
                             an out of range reference  will not cause a range
                             error.

               parameter = the name of the record controlling the operation to
                           be performed.

               device = the name of the type of device to be used.

               unit_number = the logical unit number of the device to be used.

          Certain data  types, and variables using  these data types,  must be
          defined or declared  before the procedure can be  called from within
          the Pascal  program.  These data types  define the various  types of
          devices,  the types  of  input/output  operations, and  input/output
          results for each  device type.  It also includes  a parameter record
          for each device  type, which passes control  information between the
          program and the specified device.  This  section contains a descrip-
          tion of the  various device types, followed by a  description of the
          data type  declarations required  for each  device type.   Note that
          there is  a section describing the  data type declarations  for each
          device  type with  the exception  of "aux"  and "terminal"  devices,
          which are discussed in the section describing port devices (see Sec-
          tions 5.1 and 5.8).


                                                         PASCAL I/O    Page 46


          Engine Pascal User's Guide                            March 25, 1982



          SECTION 5.1 Input/Output Device Types          _____________________________________


          The input/output devices used in the  Pascal program must be defined
          in a type declaration statement at  the outset of the program.  Note
          that the devices  specified in the type  declaration are positional;
          all must be specified.  The device type declaration has the form:

              TYPE device = (disk, tape, printer, system, crash, terminal,
                             aux, logical_volume);

          where:

              disk = disk devices.

              tape = tape devices.

              printer = line printers.

              system = a pseudo-device which allows the Pascal program to con-
                       trol the host, by communicating with ISIS.

              crash = a pseudo-device which allows the  Pascal program to wait
                      for or simulate a Pascal error,  halt or restart a slot,
                      or kill a process.

              terminal = terminals, which  are able to  build circuits  to the
                         slot containing the Pascal program (externally initi-
                         ated circuits).

              aux = auxiliary circuits, which may be built  by the Pascal pro-
                    gram from the  slot containing the program to  the same or
                    any other host normally accessible  in the network (inter-
                    nally initiated circuits).

              logical_volume = a  pseudo-device  which   manages  multi-volume
                               applications of a Pascal program.


          SECTION 5.2 IO Results          ______________________

          The results  of an input/output  operation returned to  the "status"
          parameter in the "param" record for each  device type must be previ-
          ously defined in a type declaration at the outset of the Pascal pro-
          gram.  Note that  the "io_result" type declaration  is standard, and
          only  needs  to  be  declared  once   for  all  device  types.   The
          "io_result" types are described separately for each device type (see
          Sections 5.3 through 5.9).  The "io_result" type declaration has the
          form:

              TYPE io_result = (complete, intervention, transmission, failure,
                                end_file, end_medium, start_medium,
                                program_error,break_key, orange_ball, busy,
                                time_out);


                                                         PASCAL I/O    Page 47


          Engine Pascal User's Guide                            March 25, 1982



          SECTION 5.3 Disk Device          _______________________

          This section describes the data types  that must be specified to use
          disk drives for Pascal input or output.  It also contains a descrip-
          tion of system responses returned  to the parameter record regarding
          the input/output process.

          Multiple disk operations may be  specified using Engine Pascal.  The
          maximum number  of disk devices permitted  is specified in  the ISIS
          Tymfile (see Section 3.1.7).


          5.3.1 Disk IO Operations                __________________

          A disk input/output  operation specified in the  Pascal program must
          be previously  defined in a  type declaration  at the outset  of the
          program.  The disk operation is specified in the "operation" parame-
          ter of the "disk_param" record (see Section 5.3.4).  The disk opera-
          tion type declaration has the form:

               TYPE disk_operation = (read, write, attach, detach, unit_info);

          where:

               read = inputs a transfer length  of consecutive bytes specified
                      in  "arg2" starting  from the  page  index specified  in
                      "arg1" of the "disk_param" record (see Section 5.3.4).

               write = outputs a transfer  length of consecutive  bytes speci-
                       fied in "arg2"  starting from the page  index specified
                       in  "arg1"  of  the "disk_param"  record  (see  Section
                       5.3.4).

               attach = attach a  logical disk  unit to  this slot.   No other
                        slot may use this disk device.

               detach = detach a logical disk unit from this slot.

               unit_info = returns information about the disk unit to a record
                           of type "disk_info" (see Section 5.3.2).

          Note that  the "disk_operation"  type declaration  must precede  the
          "disk_param" record declaration (see Section 5.3.4).













                                                         PASCAL I/O    Page 48


          Engine Pascal User's Guide                            March 25, 1982



          5.3.2 Disk Unit Information                _____________________

          Information about the disk device being used is returned to a record
          of type  "unit_info_record".  The record "unit_info_record"  has the
          following form:

               TYPE unit_info_record =
                   record
                       logical_unit_number,
                       device_status,
                       protection_mask,
                       default_block_size,
                       start_cylinder_number,
                       number_of_cylinders,
                       sectors_per_track,
                       tracks_per_cylinder,
                       device_address,
                       global_unit_number,
                       unit_name,
                       device_type,
                       number_of_sectors: integer
                   end;

          where:

               logical_unit_number = the  logical  unit  number  of  the  disk
                                     device.

               device_status = the status of the disk unit.

               protection_mask = the ISIS unit license, or protection mask for
                                 the disk device, where:

                        1 = the slot can attach or detach the disk unit.
                        2 = write access to the disk device is permitted.
                        4 = read access to the disk device is permitted.

               default_block_size = default block size for the disk device.

               start_cylinder_number = the  starting  cylinder number  on  the
                                       disk for this device.

               number_of_cylinders = the number  of cylinders on the  disk for
                                     this device.

               sectors_per_track = the number  of sectors  per track  for this
                                   device.

               tracks_per_cylinder = the  number of  tracks  per cylinder  for
                                     this device.

               device_address = the  hardware  controller   address  for  this
                                device.



                                                         PASCAL I/O    Page 49


          Engine Pascal User's Guide                            March 25, 1982



               global_unit_number = the global unit number for this device.

               unit_name = the device name, in ASCII.

               device_type = the device type  (should be 0 for disk device).

               number_of_sectors = the actual number of sectors for this unit.

          No other  value will be  returned to  the "status" parameter  of the
          "disk_param" record.  Note that the "unit_info_record" type declara-
          tion must precede the "disk_operation" type declaration (see Section
          5.3.1).


          5.3.3 Disk IO Results                _______________

          The valid "io_result"  values (see Sections 5.2  and 5.3.4) returned
          to "status" in the "disk_param" record are:

               complete = the operation has succeeded.

               intervention = the operation  has failed,  but may  be repeated
                              after manual intervention.

               transmission = the operation  has failed due to  a transmission
                              error, but may be repeated immediately.

               failure = the operation has  failed.  The reason is  defined by
                         the "status2"  parameter of  the "disk_param"  record
                         (see Section 5.3.4).

               program_error = the operation  failed due  to an  error in  the
                               Pascal program.

               busy = an operation was attempted on a  device which was in use
                      and could not support multiple requests.

          Note  that  the  "io_result"  type   declaration  must  precede  the
          "disk_param" record declaration (see Section 5.3.4).

















                                                         PASCAL I/O    Page 50


          Engine Pascal User's Guide                            March 25, 1982



          5.3.4 Disk IO Parameters                __________________

          The "disk_param" record that passes  control information between the
          Pascal program and the disk device must  be defined at the outset of
          the program.  The "disk_param" record declaration has the form:

               TYPE disk_param =
                   record
                       operation: disk_operation;
                       status: io_result;
                       status2: integer;
                       arg1: integer;
                       arg2: integer
                    end;

          where:

               operation = the  type of  disk operation  being performed  (see
                           Section 5.3.1).

               status = returns  the result  of the  disk operation  performed
                        (see Section 5.3.3).

               status2 = the controller status for the disk operation, where:

                         -1 = a failure was due to an invalid unit number.
                         -2 = a failure was due to an invalid device type.

               arg1 = used to specify the sector number  where a read or write
                      disk operation is to begin.
                      returns the number of bytes transferred during a read or
                      write disk operation.

               arg2 = used to specify the number of bytes transferred during a
                      read or write disk operation.
                      If status = "failure", it will  return the disk I/O sta-
                      tus, where:

                      0   Complete.
                      1   (ISIS) Bad memory address.
                      2   (ISIS) No access allowed to this unit.
                      3   (ISIS) Memory read/write protection failure.
                      4   (ISIS) Virtual block out of allocated area on disk.
                      5   (ISIS) Kernel tables VBN past EOV.
                      6   (ISIS) Kernel tables cylinder overflow past EOV.
                      7   Disk seek error.
                      8   Controller error.
                      9   Aborted by (DDT) Quit character.
                      10  Odd byte count.
                      11  Invalid cylinder overflow indication.
                      12  Defective sector in alternate cylinder.
                      13  Defective sector, and no alternate cylinders.
                      14  Cylinder map not readable.
                      15  Defective cylinder; alternate assigned.


                                                         PASCAL I/O    Page 51


          Engine Pascal User's Guide                            March 25, 1982



                      18  Device not available.
                      19  Write attempted on write protected volume.
                      20  Unit attached, but it is write protected.
                      21  Unit attached to another slot.
                      22  Operation ignored for this type of unit.
                      24  Recovered Error Correcting Code (ECC) error.



          SECTION 5.4 Tape Device          _______________________

          This section describes the data types  that must be specified to use
          tape drives for Pascal input or output.  It also contains a descrip-
          tion of system responses returned  to the parameter record regarding
          the input/output process.


          5.4.1 Tape IO Operations                __________________

          A tape input/output  operation specified in the  Pascal program must
          be previously  defined in a  type declaration  at the outset  of the
          program.  The "tape_operation" is specified in the "operation" para-
          meter  of  the   "tape_param"  record  (see  Section   5.4.4).   The
          "tape_operation" type declaration has the form:

              TYPE tape_operation = (input, output, attach, detach, tape_info,
                                     move_tape);

          where:

              input = inputs a maximum of transfer length of consecutive bytes
                      from the tape.   The actual number of  bytes transferred
                      is specified in  "arg1" of the "tape_param"  record (see
                      Section 5.4.4).

              output = outputs transfer  length of consecutive bytes  to tape,
                       if there is room for them (see Section 5.4.4).

              attach = attach a logical tape unit to this slot.

              detach = detach a logical tape unit from this slot.

              tape_info = returns information about the tape  unit to a record
                          of type "tape_info_record" (see Section 5.4.2).

              move_tape = performs an  operation as defined  by "arg1"  of the
                          "tape_param" record (see Section 5.4.4).

          Note that  the "tape_operation"  type declaration  must precede  the
          "tape_param" record declaration (see Section 5.4.4).






                                                         PASCAL I/O    Page 52


          Engine Pascal User's Guide                            March 25, 1982



          5.4.2 Tape Unit Information                _____________________

          Information about the tape device being used is returned to a record
          of type "tape_info_record", which has the form:

               TYPE tape_info_record =
                   record
                       unit_number,
                       device_status,
                       protection_mask,
                       default_block_size: integer
                   end;

          where:

               unit_number = the logical unit number of the tape device.

               device_status = the status of the tape device.

               protection_mask = the ISIS unit license, or protection mask for
                                 the tape device, where:

                        1 = the slot can attach or detach the tape unit.
                        2 = write access to the tape device is permitted.
                        4 = read access to the tape device is permitted.

               default_block_size = default block size for the tape device.


          5.4.3 Tape IO Results                _______________

          The valid io_result values (see Sections  5.2 and 5.4.4) returned to
          "status" in the "tape_param" record are:

               complete = the operation has succeeded.

               intervention = the operation  has failed,  but may  be repeated
                              after manual intervention.

               transmission = the operation  has failed due to  a transmission
                              error, but may be repeated immediately.

               failure = the operation failed.  The reason is defined by "sta-
                         tus2" in the "tape_param" record (see Section 5.4.4).

               end_file = an end of file mark was reached.

               end_medium = an end of medium was reached.

               start_medium = a start of medium was reached.

               program_error = the operation  failed due  to an  error in  the
                               Pascal program.



                                                         PASCAL I/O    Page 53


          Engine Pascal User's Guide                            March 25, 1982



               busy = an operation was attempted on a  device which was in use
                      and could not support multiple requests.

          No other  value will  be returned to  the "status"  parameter.  Note
          that the "io_result" type declaration  must precede the "tape_param"
          record declaration (see Section 5.4.4).


          5.4.4 Tape IO Parameters                __________________

          The "tape_param"  record, which  passes control  information between
          the Pascal program and the tape device,  must be defined at the out-
          set of  the program.   The "tape_param"  record declaration  has the
          form:

               TYPE tape_param =
                   record
                       operation: tape_operation;
                       status: io_result;
                       status2: integer;
                       arg1: integer;
                       arg2: integer
                    end;

          where:

               operation = returns the type of  tape operation being performed
                           (see Section 5.4.1).

               status = returns the result  of the  tape operation  being per-
                        formed (see Section 5.4.3).

               status2 = the controller status for the tape operation, where:

                         -1 = the failure was due to an invalid unit number.
                         -2 = the failure was due to an invalid device type.

               arg1 = used to  specify the number  of bytes to  be transferred
                      during an input or output tape operation.
                      For "move_tape" operations, it defines an operation per-
                      formed by the tape device, as follows:

                      0 = backspace -- moves tape back one record.
                      1 = foreward_file -- moves tape foreward to the next
                                           file mark.
                      2 = backward_file -- moves tape backward to the previous
                                           file mark.
                      3 = write_eof -- writes an end of file mark on the tape.
                      4 = rewind -- rewinds the tape to the load point.
                      5 = unload -- put tape offline.
                      6 = write_gap -- put an erase gap on the tape.
                      7 = set_low -- Set low density on a dual density tape
                                     drive.  Note that a dual density tape
                                     drive defaults to high density.


                                                         PASCAL I/O    Page 54


          Engine Pascal User's Guide                            March 25, 1982



               arg2 = returns the tape input/output status, where:

                      0   Complete.
                      1   (ISIS) Bad memory address.
                      2   (ISIS) No access allowed to this unit.
                      3   (ISIS) Memory read/write protection failure.
                      4   (ISIS) Virtual block out of allocated area on disk.
                      5   (ISIS) Kernel tables VBN past EOV.
                      6   (ISIS) Kernel tables cylinder overflow past EOV.
                      7   Disk seek error.
                      8   Controller error.
                      9   Aborted by (DDT) Quit character.
                      10  Odd byte count.
                      11  Invalid cylinder overflow indication.
                      12  Defective sector in alternate cylinder.
                      13  Defective sector, and no alternate cylinders.
                      14  Cylinder map not readable.
                      15  Defective cylinder; alternate assigned.
                      16  End of file detected.
                      17  End of volume detected.
                      18  Device not available.
                      19  Write attempted on write protected volume.
                      20  Unit attached, but it is write protected.
                      21  Unit attached to another slot.
                      22  Operation ignored for this type of unit.
                      23  Selector timeout.
                      24  Recovered Error Correcting Code (ECC) error.



          SECTION 5.5 Printer Device          __________________________

          This section describes the data types  that must be specified to use
          printers for Engine Pascal output.


          5.5.1 Printer IO Operations                _____________________

          A printer operation specified  in the Pascal program  must be previ-
          ously defined  in a type declaration  at the outset of  the program.
          The "print_operation" is specified in the operation parameter of the
          "print_param"  record (see  Section  5.5.3).  The  "print_operation"
          type declaration has the form:

               TYPE print_operation = (data, text, new_line, form_feed,
                                       repeat_char);

          where:

               data = send  the contents  of  the  "data_buffer" to  the  ISIS
                      printer  driver,  with no  immediate  translation.   The
                      "data_buffer" should  be a  string of  characters, where
                      special use is made of several characters, as follows:



                                                         PASCAL I/O    Page 55


          Engine Pascal User's Guide                            March 25, 1982



                      Hexadecimal_Code   Meaning                      ___________ ____   _______
                             00          End of line -- Print command.
                           01-3F         Blank compression -- output this
                                         number of blanks.
                             40          Form feed -- eject paper.
                           41-7F         Character compression -- repeat
                                         preceding character 40 times.
                           80-FF         Data characters -- print directly.

               The value of "arg1" in  the "print_param" record should contain
               the number of characters to be  sent (see Section 5.5.3).  This
               parameter is useful for  sending large blocks of  properly for-
               matted data  to a printer.   Using this parameter  requires the
               proper use of parity bits.

               text = print  the ASCII  text contained  in the  "data_buffer".
                      The Nucleus will set the parity bits on all of the char-
                      acters, and send the buffer  to ISIS.  The buffer should
                      be an array  of characters.  The value  of "arg2" should
                      contain the number of characters to print.

               new_line = end the current line being printed and set the posi-
                          tion for the next line.   The value of "arg1" should
                          be the number of lines to move in the range 0 - 3.

               form_feed = end  the current  page and  begin a  new page.  The
                           value of  "arg1" is the  channel number on  the new
                           page.  If  "arg1" =  0, a top  of form  action will
                           occur.

               repeat_char = print a  character several  times in  succession.
                             The value  of "arg1" is  the number of  times the
                             character should  be repeated, in  the range  1 -
                             63.  The "data_buffer" should contain the charac-
                             ter to be printed.  This  operation is useful for
                             printing text which has been  stored or transmit-
                             ted in a compressed form.


          5.5.2 Printer IO Results                __________________

          The valid "io_result"  values (see Sections 5.2  and 5.5.3) returned
          to "status" in the "print_param" record are:

               complete = the operation has succeeded.

               intervention = the operation  has failed,  but may  be repeated
                              after manual intervention.

               transmission = the operation  has failed due to  a transmission
                              error, but may be repeated immediately.

               failure = the operation failed.  The reason is defined by "sta-
                         tus2" in the "print_param" record (see Section 5.5.3)


                                                         PASCAL I/O    Page 56


          Engine Pascal User's Guide                            March 25, 1982



               program_error = the operation  failed due  to an  error in  the
                               Pascal program.

               busy = an operation was attempted on a  device which was in use
                      and could not support multiple requests.

          No other  value will  be returned to  the "status"  parameter.  Note
          that the "io_result" type declaration must precede the "print_param"
          record declaration (see Section 5.5.3).


          5.5.3 Printer IO Parameters                _____________________

          The "print_param"  record, which passes control  information between
          the Pascal program and the printer, must be defined at the outset of
          the program.  The "print_param" record has the form:

               TYPE print_param =
                  record
                      operation: print_operation;
                      status: io_result;
                      status2: integer;
                      arg1: integer;
                      arg2: integer
                  end;

          where:

               operation = returns the type  of printer  operation being  per-
                           formed, as  defined in  the printer  operation type
                           declaration (see Section 5.5.1).

               status = specifies the  result of  the printer  operation being
                        performed, as defined in the "io_result" type declara-
                        tion (see Section 5.5.2).

               status2 = not used for printer devices.

               arg1 = varies for each type of operation (see Section 5.5.1).

               arg2 = varies for each type of operation (see Section 5.5.1).















                                                         PASCAL I/O    Page 57


          Engine Pascal User's Guide                            March 25, 1982



          SECTION 5.6 System Device          _________________________

          The system device is a pseudo-device which allows the Pascal program
          to control the status of the host.  Note that the system device does
          not use  the "data_buffer" parameter in  the statement used  to call
          the input/output  procedure in the Nucleus.   The user must  enter a
          dummy variable in the call statement.


          5.6.1 System IO Operations                ____________________

          A system  IO operation  specified in  the program  defines the  host
          state.  The system IO operation must be previously defined in a type
          declaration at the outset of the program.  The operation may then be
          specified in the "operation" parameter  of the "system_param" record
          (see Section  5.6.4).  The  "system_operation" type  declaration has
          the form:

               TYPE system_operation = (up, down, shut, gone, system_info,
                                        free_core, read_constant,
                                        get_checksum);

          where:

               up = the host  is brought  up, and is  in an  "answered" state.
                    This is the normal operating state of a host.

               down = the host is brought down, such that the host will not be
                      in a state to accept network circuits.

               shut = the host  is running but will  not allow users  to build
                      circuits to it.   Users with "shut override"  status may
                      build circuits to a shut host.

               gone = the host is not known by the rest of the network.

               system_info = returns information about  the system environment
                             to a  record of  type "system_info"  (see Section
                             5.6.2).

               free_core = returns the amount of memory  in the slot which has
                           not been allocated to any processes, to the parame-
                           ter "arg1" of  the "system_param" record  (see Sec-
                           tion 5.6.4).

               read_constant = returns the user defined value specified in the
                               "arg2" parameter  of the  "system_param" record
                               (see Section 5.6.4).

               get_checksum = returns  the  vertical  checksum  value  in  the
                              "arg2"  parameter of  the "system_param"  record
                              (see Section 5.6.4).   The byte count  is speci-
                              fied in "arg1".



                                                         PASCAL I/O    Page 58


          Engine Pascal User's Guide                            March 25, 1982



          5.6.2 System Information                __________________

          Information about the system environment may be returned to a record
          of  type "system_info_record".   This information  is constant,  and
          only needs to  be read once during  a run of a  Pascal program.  The
          record "system_info_record" has the form:

               TYPE system_info_record =
                       record
                           NTERM,
                           NAUX,
                           host,
                           node,
                           slot,
                           kernel_host,
                           isis_version,
                           Nucleus_version: integer
                       end;

          where:

               NTERM = the number of terminal devices specified in the "NTERM"
                      parameter of the Nucleus Tymfile (see Section 4.1.4).

               NAUX = the  number of  aux  circuit  devices specified  in  the
                      "NAUX"  parameter of  the Nucleus  Tymfile (see  Section
                      4.1.4).

               host = the  host number, in decimal.   Note that only  one host
                    may be associated with a Pascal program.

               node =  the node number, in octal.

               slot = the slot number, in decimal.

               kernel_host = the Kernel Host number, in decimal.

               isis_version = the  ISIS  version  and   revision,  in  decimal
                              (100D*V+R).

               Nucleus_version = the Nucleus  version and  revision, in  octal
                                  (256D*V+R).


          5.6.3 System IO Results                _________________

          The valid "io_result"  values (see Sections 5.2  and 5.6.4) returned
          to "status" in the "sys_param" record are:

               complete = the operation has succeeded.

               failure = the operation failed.   The reason is defined  by the
                         "status2" parameter in the "system_param" record (see
                         Section 5.6.4).


                                                         PASCAL I/O    Page 59


          Engine Pascal User's Guide                            March 25, 1982



               program_error = the operation  failed due  to an  error in  the
                               Pascal program.

               busy = an operation was attempted on a  device which was in use
                      and could not support multiple requests.

          No other  value will  be returned to  the "status"  parameter.  Note
          that the  "io_result"  type  declaration   must  precede  the  "sys-
          tem_param" record declaration (see Section 5.6.4).


          5.6.4 System IO Parameters                ____________________

          The "system_param" record, which  passes control information between
          the Pascal  program and the  system device,  must be defined  at the
          outset of  the program.  The  "system_param" record  declaration has
          the form:

               TYPE system_param =
                   record
                       operation: system_operation;
                       status: io_result;
                       status2: integer;
                       arg1: integer;
                       arg2: integer
                    end;

          where:

               operation = specifies the type  of system operation  being per-
                           formed, as  defined in the  "system_operation" type
                           declaration (see Section 5.6.1).

               status = returns the result of the system  operation to be per-
                        formed, as defined in the "io_result" type declaration
                        (see Section 5.6.3).

               status2 = not used for system devices.

               arg1 = specifies the amount  of free core left,  when using the
                      "free_core" operation.
                      specifies which ordinal constant (CCONST) in the Tymfile
                      is   to  be   returned   in   "arg2"  when   using   the
                      "read_constant"  operation  (see Section  3.1.9).   Note
                      that a value  of "0" will cause the  number of constants
                      defined in the Tymfile to be returned to "arg2".

               arg2 = returns the  value of the  constant CCONST  specified in
                      "arg1" when using the "read_constant" operation.  CCONST
                      is contained in the Tymfile (see Section 3.1.9).
                      returns  the  vertical  checksum value  when  using  the
                      "get_cksum" operation.




                                                         PASCAL I/O    Page 60


          Engine Pascal User's Guide                            March 25, 1982



          SECTION 5.7 Crash Device          ________________________

          The crash device  is a pseudo-device which allows a  program to wait
          for a Pascal error, simulate a  Pascal error, restart the slot, halt
          the slot, or kill a process.


          5.7.1 Crash IO Operations                ___________________

          The crash operation must be previously defined in a type declaration
          at the outset  of the program.  The operation may  then be specified
          in the "operation" parameter  of the "crash_param" record  (see Sec-
          tion 5.7.4).  The "crash_operation" type declaration has the form:

               TYPE crash_operation = (wait, signal, restart, halt, kill);

          where:

               wait = causes the calling process to  wait until a Pascal error
                      occurs.   The  "data_buffer"  should   be  of  the  type
                      "array[1..3]  of integer".   The three  elements of  the
                      array will contain the error code, the offending process
                      number, and  the source  line number,  respectively (see
                      Section 5.7.2).

               signal = causes an error to be generated  for the calling proc-
                        ess, and  terminates the process (see  Section 5.7.2).
                        Note that  the data  block is  not used,  so the  user
                        should insert a dummy argument.

               restart = causes an ISIS crash type 1 (restart) to occur, which
                         causes  the  slot  and  the   Pascal  program  to  be
                         restarted and  reinitialized.  All  active ports  are
                         disconnected.  Note that the data  block is not used,
                         so the user should insert a dummy argument.

               halt = causes the HALT SVC to be executed, halting the slot.

               kill = stops the process  specified in the "arg1"  parameter of
                      the "crash_param" record (see Section 5.7.4).
















                                                         PASCAL I/O    Page 61


          Engine Pascal User's Guide                            March 25, 1982



          5.7.2 Crash Error Codes                _________________

          The  error  codes generated  when  the  Pascal program  crashes  are
          returned to  the first  word of  the "data_buffer"  with the  "wait"
          operation (see Section 5.7.1).  The codes are as follows:

               1   Terminated.
               2   Overflow error.
               3   Range error.
               4   Variant error.
               5   Heap limit.
               6   Stack limit.
               7   Code limit.
               8   Time limit.
               9   Call error.
               10  Space limit.
               11  Core limit.
               12  Parameter limit.
               13  Virtual limit.
               14  Software simulated error.
               15  Killed.



          5.7.3 Crash IO Results                ________________

          The valid "io_result" values (see Section 5.2 and 5.7.4) returned to
          "status" in the "crash_param" record are:

               complete = the operation has succeeded.

               failure = the operation failed.   The reason is defined  by the
                         "status2" parameter in the  "crash_param" record (see
                         Section 5.7.4).

               program_error = the operation  failed due  to an  error in  the
                               Pascal program.

               busy = an operation was attempted on a  device which was in use
                      and could not support multiple requests.

          No other  value will  be returned to  the "status"  parameter.  Note
          that the "io_result" type declaration must precede the "crash_param"
          record declaration (see Section 5.7.4).












                                                         PASCAL I/O    Page 62


          Engine Pascal User's Guide                            March 25, 1982



          5.7.4 Crash IO Parameters                ___________________

          The "crash_param"  record, which passes control  information between
          the Pascal  program and the  system device,  must be defined  at the
          outset of the program.  The "crash_param" record declaration has the
          form:

               TYPE crash_param =
                   record
                       operation: crash_operation;
                       status: io_result;
                       status2: integer;
                       arg1: integer;
                       arg2: integer
                    end;

          where:

               operation = specifies the type  of system operation  being per-
                           formed, as  defined in  the "crash_operation"  type
                           declaration (see Section 5.7.1).

               status = returns the result  of the crash operation  being per-
                        formed, as defined in the "io_result" type declaration
                        (see Section 5.7.3).

               status2 = not used for crash devices.

               arg1 = the number  of the process  being stopped by  the "kill"
                      operation (see Section 5.7.1).

               arg2 = not used for crash devices.
























                                                         PASCAL I/O    Page 63


          Engine Pascal User's Guide                            March 25, 1982



          SECTION 5.8 Port Device          _______________________

          The TYMNET  network appears as  a port  device to the  Engine Pascal
          program.  Each port is connected to  the system in full duplex mode,
          enabling Engine Pascal to perform send and receive operations simul-
          taneously.  They may be connected in  one of two ways, externally or
          internally.   A  terminal logging  into  the  system results  in  an
          "externally initiated  circuit".  An auxiliary  circuit or  a normal
          circuit generated by the Engine Pascal program results in an "inter-
          nally initiated circuit".   While the two circuit  types are treated
          as separate  device types, they are  both controlled using  the same
          parameters described in  the following sections.  The  prefix "port"
          is used in  the examples of parameters for port  devices.  Note that
          separate records and record names must be generated for terminal and
          auxiliary circuits if they are both used in the Pascal program.


          5.8.1 Port IO Parameters                __________________

          The "port_param" record that passes  control information between the
          Pascal program and the terminal device must be defined at the outset
          of the program.  The "port_param" record declaration has the form:

               TYPE port_param =
                   record
                       operation: port_operation;
                       status: io_result;
                       status2: integer;
                       arg1: integer;
                       arg2: integer
                   end;

          where:

               operation = defines the type of port operation being performed,
                           as defined  in the port operation  type declaration
                           (see Section 5.8.2).

               status = returns the  result of  the port  operation preformed.
                        The "io_result" parameters are described for each type
                        of operation (see Section 5.8.2).

               status2 = not used for port devices.

               arg1 = specifies or  returns a value  depending on the  type of
                      operation being performed  by the port device  (see Sec-
                      tion 5.8.2).

               arg2 = specifies or  returns a value  depending on the  type of
                      operation being performed  by the port device  (see Sec-
                      tion 5.8.2).





                                                         PASCAL I/O    Page 64


          Engine Pascal User's Guide                            March 25, 1982



          5.8.2 Port IO Operations                __________________

          A port operation specified in the  Pascal program must be previously
          defined in  a type declaration  at the  outset of the  program.  The
          type of operation  is specified in the "operation"  parameter of the
          "port_param" record (see Section  5.8.1).  The "port_operation" type
          declaration has the form:

               TYPE port_operation = (get_char, get_line, send, disconnect,
                                      clear_break, set_system, set_terminal,
                                      yellow_ball, detect, build_aux_circuit,
                                      terminal_info, send_b1msg, get_needle,
                                      zap, sup_log_msg, set_break_char,
                                      set_bell, build_normal_circuit);

          where:

               1.   get_char =  inputs the number  of characters  specified in
                    "arg1" of  the "port_param" record from  the "data_buffer"
                    (see Sections 5.8.1  and 5.0).  The operation  will not go
                    to completion  until there are exactly  "arg1" characters,
                    or  until  a break,  a  timeout,  or a  failure  condition
                    exists.  The  "arg2" parameter in the  "port_param" record
                    may be  used to specify an  input timeout, in  seconds.  A
                    value of zero in "arg2" disables  the timeout.  Line edit-
                    ing will  not be performed  by the Nucleus,  although line
                    edit  echoing will  be performed  if  edit characters  are
                    defined (see Section 5.8.6).  The valid "io_result" values
                    returned to "status" in the  "port_param" record (see Sec-
                    tions 5.2 and 5.8.1) are:

                    complete = the operation has been  completed, and the num-
                         ber  of  characters  specified in  "arg1"  have  been
                         returned to the caller.

                    transmission =  a black  ball has  been received,  and the
                         "get_char" operation is terminated.  The value speci-
                         fied  in "arg2"  indicates the  number of  characters
                         input ahead  of the black  ball, and returned  to the
                         caller.  If  multiple black balls are  received while
                         the "get_char" operation is pending, only one "trans-
                         mission"  status  will be  returned,  and  characters
                         between the black balls will  be discarded.  A subse-
                         quent "get_char" operation will  return valid charac-
                         ters received  after all  of the  black balls.   (see
                         Section 3.1.6).

                    failure =  the circuit  no longer  exists.  This  occurred
                         because of a port disconnect condition.  No data will
                         be transferred, and subsequent "read_char" operations
                         will fail until another circuit is built.





                                                         PASCAL I/O    Page 65


          Engine Pascal User's Guide                            March 25, 1982



                    break_key = a break message has been received (see Section
                         5.8.5).  All characters in the  input buffer has been
                         discarded.  Characters entered  after the "break_key"
                         was detected will be returned  normally when a subse-
                         quent read type operation is issued.

                    timeout = the  input timeout has expired.   The characters
                         read  before the  timeout  expired  are left  in  the
                         "data_buffer", with the  number of  characters speci-
                         fied in "arg2".

                    No other value will be returned to the "status" parameter.

               2.   get_line = inputs up to a maximum of the number of charac-
                    ters specified  in "arg1" of  the "port_param"  record (or
                    until  a   carriage  return   is  encountered)   from  the
                    "data_buffer" (see Section 5.8.1).  The parity bit will be
                    stripped from the characters sent  unless "8 bit input" is
                    set using the "set_terminal"  operation below.  The "arg2"
                    parameter  specifies the  timeout length,  in seconds.   A
                    value of  zero in  "arg2" will  disable the  timeout.  All
                    delete characters (X'7F')  will be removed from  the input
                    data.  The  valid "io_result" values returned  to "status"
                    in the  "port_param" record (see  Sections 5.2  and 5.8.1)
                    are:

                    complete  =  a line  of  data  has  been returned  to  the
                         "data_buffer".  This  occurs when  a carriage  return
                         character  (:13:) is  detected in  the input  stream.
                         The value of "arg2" will contain the actual number of
                         characters in the line, regardless of the size of the
                         "data_buffer", making it possible to determine if any
                         characters have been lost because a user entered more
                         than  "arg1" characters  before  entering a  carriage
                         return.

                    transmission  =  one  (or  more)  black  balls  have  been
                         received.  The  "data_buffer" on  the input  side has
                         been zapped and the current  line has been discarded.
                         Only one "transmission" status  will be returned even
                         if more than one black ball is received during a sin-
                         gle operation.  (see Section 3.1.6).

                    failure =  the circuit  no longer  exists.  This  occurred
                         because of a port disconnect condition.  No data will
                         be transferred, and  subsequent "get_line" operations
                         will fail until another circuit is built.









                                                         PASCAL I/O    Page 66


          Engine Pascal User's Guide                            March 25, 1982



                    break_key = an ISIS break key message (:174:) was detected
                         in the  input stream during the  "get_line" operation
                         (see  Section 5.8.5).   All characters  in the  input
                         buffer  have  been  discarded.   Characters  received
                         after the  break key  was detected  will be  returned
                         when a subsequent "get_line" operation is issued.

                    timeout = the input timeout  expired.  The characters read
                         before the  timeout occurred  have been  left in  the
                         data buffer,  with the number  of characters  left in
                         the buffer in "arg2".

                    No other value will be returned to the "status" parameter.

               3.   send = outputs a string of  characters "arg1" in length to
                    the output  buffer (see  Section 5.8.1).   Although output
                    normally occurs instantaneously,  a timeout  may be set in
                    "arg2" to account  for delays caused by  circuit backpres-
                    sure.  The  valid "io_result" values returned  to "status"
                    in the  "port_param" record (see  Sections 5.2  and 5.8.1)
                    are:

                    complete = the  output characters have been  placed in the
                         output buffer for this port.

                    failure = no  circuit exists.  Output  data has  been dis-
                         carded.

                    break_key  = the  port  is in  break  status (see  Section
                         5.8.5).  Output data has been  discarded.  All subse-
                         quent "send" operations will  return "break_key" sta-
                         tus until a "clear_break"  operation is performed for
                         this port.

                    timeout =  the output  timeout expired  before all  of the
                         data could  be sent.  Some  data may have  arrived at
                         the destination.   Note that  no data  will be  lost.
                         This condition is usually due to a backpressure situ-
                         ation.

                    No other value will be returned to the "status" parameter.

               4.   disconnect =  sends a  detach and zap  message to  ISIS to
                    disconnect the port  from the Nucleus.  This  ensures that
                    all data sent  prior to the disconnect  is received.  Note
                    that the disconnect  will not be completed as  long as the
                    port is backpressured.  If  backpressure exists, a timeout
                    will occur,  and the  circuit will  be zapped.   The valid
                    "io_result"   values   returned   to   "status"   in   the
                    "port_param" record (see Sections 5.2 and 5.8.1) are:






                                                         PASCAL I/O    Page 67


          Engine Pascal User's Guide                            March 25, 1982



                    complete = a zapper was sent out on this port.  All opera-
                         tions for this  port will return  a status  of "fail-
                         ure", except when  delays occur due to  circuit back-
                         pressure.

                    failure = no circuit exists.

                    No other value will be returned to the "status" parameter.

               5.   clear_break =  resets the  break_key status  so that  send
                    operations  may continue.   The  valid "io_result"  values
                    returned to "status" in the  "port_param" record (see Sec-
                    tions 5.2 and 5.8.1) are:

                    complete = the port is no longer in break status.

                    failure = no circuit exists.

                    No other value will be returned to the "status" parameter.

               6.   set_system = sets certain terminal  controls for port ini-
                    tialization.   The "arg1"  parameter  in the  "port_param"
                    record determines which control is set.  The "data_buffer"
                    must contain the new value  of the control.  If set_system
                    is not performed, the default value is used.

           ARG1  Control                   Data_Buffer               Default           ____  _______                   ____ ______               _______
            0    Set character delete key  New character delete key  Control H
            1    Set word delete key       New word delete key       Control W
            2    Set line delete key       New line delete key       Control Q

                    The  value  of  "arg2"  determines   whether  or  not  the
                    input_break is set for the specified character.  If "arg2"
                    is  zero,  input_break will  not  be  set.  If  "arg2"  is
                    greater than zero, the input_break will be set.  If "arg2"
                    is less  than zero, the input_break  will be set if  it is
                    not a  control character  ((:32:) or  higher).  Note  that
                    compatibility with  older versions of  the Nucleus  may be
                    maintained by always  setting "arg2" equal to  -1 before a
                    set_system operation.   The only  valid "io_result"  value
                    returned to "status" in the  "port_param" record (see Sec-
                    tions 5.2 and 5.8.1) is:

                    complete = the requested operation is complete.












                                                         PASCAL I/O    Page 68


          Engine Pascal User's Guide                            March 25, 1982



               7.   set_terminal =  sets terminal parameters for  a particular
                    port.  The  value of "arg1"  determines the control  to be
                    set, as follows:

          ARG1 Control                   Data_Buffer           Default          ____ _______                   ____ ______           _______
           0   Echo off                                        No
           1   Echo on                                         Yes
           2   Enter transparency mode                         Undefined
           3   Leave transparency mode                         Undefined
           4   New system console                              No system console
           5   Set character delete key  New character delete  Last set_system
           6   Set word delete key       New word delete       Last set_system
           7   Set line delete key       New line delete       Last set_system
           8   Set or Unset 8 bit input  Unset if "arg2" = 0   Unset
               (get_line operation only) Set if "arg2" = 1

                    Note that "arg2"  should be set if  "arg1" is 5, 6,  or 7.
                    If "arg2" is zero, input_break will not be set.  If "arg2"
                    is greater  than zero,  the input_break  will be  set.  If
                    "arg2" is less  than zero, the input_break will  be set if
                    it is not a control character (:32: or higher).  Note that
                    zero or  more ports  can be set  as system  consoles.  The
                    valid  "io_result"  values  returned to  "status"  in  the
                    "port_param" record (see Sections 5.2 and 5.8.1) are:

                    complete = the set_terminal operation is complete.

                    failure = no circuit exists.

                    No other value will be returned to the "status" parameter.

               8.   yellow_ball =  emit a  yellow ball  to the  circuit.  Upon
                    receipt of the  yellow ball by the interface  at the other
                    end of  the circuit, an orange  ball will be sent  back to
                    the originating interface.  The yellow ball may be used to
                    synchronize transmission in real time.   Note that not all
                    network  interfaces  support  yellow   balls.   The  valid
                    "io_result"   values   returned   to   "status"   in   the
                    "port_param" record (see Sections 5.2 and 5.8.1) are:

                    complete = a yellow ball has been sent.

                    failure = no circuit exists.

                    No other value will be returned to the "status" parameter.

               9.   detect = test for receipt of  an orange ball after sending
                    a yellow ball.   The valid "io_result" values  returned to
                    "status" in the "port_param" record  (see Sections 5.2 and
                    5.8.1) are:

                    complete = no orange ball has been received since the last
                         yellow ball was sent on this port.



                                                         PASCAL I/O    Page 69


          Engine Pascal User's Guide                            March 25, 1982



                    failure = no circuit exists.

                    orange_ball = an  orange ball has been  received after the
                         last yellow ball was sent on this port.

                    No other value will be returned to the "status" parameter.

               10.  build_aux_circuit = requests that  an auxiliary circuit be
                    built from  the Pascal system  to any network  host.  This
                    operation  is only  valid  on  auxiliary circuit  devices.
                    Note that the user  is considered "asleep" until  the cir-
                    cuit is  built.  The  "data_buffer" contains  the username
                    and host number  that the circuit is to be  built to.  The
                    parameter "arg1" contains the length of the "data_buffer".
                    The valid "io_result"  values returned to "status"  in the
                    "port_param" record (see Sections 5.2 and 5.8.1) are:

                    complete =  the circuit  has been built  and is  ready for
                         use.

                    failure = the circuit was not built.  The parameter "arg2"
                         will return an error code, where:

                         0   Slot 0 will not honor the request at this time.
                             Try later.
                         1   Format error.
                         3   Bad MUD.
                         4   System is not available.
                         5   Downline load request failure.
                         6   Timeout.
                         7   Access to this host is not permitted.
                         8   Out of origination ports.
                         9   Supervisor will not honor the request at this
                             time.  Try later.

                    busy = this port already has an active circuit.

                    No other value will be returned to the "status" parameter.

               11.  terminal_info =  request information  regarding characters
                    or lines that the Nucleus has  in its input buffer for the
                    subject port.   The valid  "io_result" values  returned to
                    "status" in the "port_param" record  (see Sections 5.2 and
                    5.8.1) are:

                    complete =  requested information has been  returned.  The
                         parameter "arg1" contains the number of characters in
                         the input stream.  The  parameter "arg2" contains the
                         number of lines in the input stream.

                    failure = no circuit exists.

                    break_key = the  port is in break_key  status (see Section
                         5.8.5).  No output will be  transmitted.  The parame-


                                                         PASCAL I/O    Page 70


          Engine Pascal User's Guide                            March 25, 1982



                         ter "arg1" contains the number or characters received
                         after  the break  key  was  detected.  The  parameter
                         "arg2" contains  the number  of lines  received after
                         the break key was detected.

                    No other value will be returned to the "status" parameter.

               12.  send_b1_msg = send a specified  "B1" (set terminal parame-
                    ter) message  to the  port.  The  parameter "arg1"  should
                    contain the parameter to be set, as follows:

                     0     Echo control.
                     1     Echo Control I.
                     2     Echo linefeed with linefeed, carriage return, and
                           rubout.
                     3     Echo carriage return with carriage return and
                           linefeed.
                     4     Carriage return delay.
                     5     Input baud rate.
                     6     Output baud rate.
                     7     Parity.
                     8     Half duplex.
                     9     Parameter A.
                    10     Parameter B.
                    11     Parameter C.
                    12     X enable.
                    13     Echo Control H.
                    14     Reverse X enable.
                    15     Parameter D.
                    16     Katakana.
                    17     Terminate output on Break.

                    The  parameter "arg2"  will contain  the value  associated
                    with the function (if any).   The valid "io_result" values
                    returned to "status" in the  "port_param" record (see Sec-
                    tions 5.2 and 5.8.1) are:

                    complete = the message has been sent to the port.

                    failure = no circuit exists.

                    No other value will be returned to the "status" parameter.

               13.  get_needle = wait  for a needle to arrive.   When a needle
                    arrives and  is assigned to  this device,  the appropriate
                    needle information is returned  to the "needle_rec" record
                    (see Section 5.8.3).  This operation is only valid on ter-
                    minal devices.   The valid "io_result" values  returned to
                    "status" in the "port_param" record  (see Sections 5.2 and
                    5.8.1) are:

                    complete = when the needle arrives.  It will wait for nee-
                         dle information for as long as is necessary.



                                                         PASCAL I/O    Page 71


          Engine Pascal User's Guide                            March 25, 1982



                    busy = the port already has an active circuit.

                    No other value will be returned to the "status" parameter.

               14.  zap = send a zapper directly to the ring for the port.  It
                    will override any  backpressure on the port,  and data may
                    be lost.  The  valid "io_result" values returned  to "sta-
                    tus"  in the  "port_param" record  (see  Sections 5.2  and
                    5.8.1) are:

                    complete = when the circuit is zapped.

                    failure = no circuit exists.

                    No other value will be returned to the "status" parameter.

               15.  sup_log_msg   =  the   first   five   characters  of   the
                    "data_buffer"  are sent  to port  zero  as the  text of  a
                    Supervisor log report.

               16.  set_break_char =  sets an alternate  character as  a break
                    character.  The "data_buffer" should contain the new char-
                    acter.  This character may not be  one of the text editing
                    characters (Control H,  Control W, or Control  Q), nor may
                    it  be  a carriage  return  or  a  line feed.   The  valid
                    "io_result"   values   returned   to   "status"   in   the
                    "port_param" record (see Sections 5.2 and 5.8.1) are:

                    complete = the new break character has been set.

                    failure = no circuit exists.

                    program_error = an invalid break character was chosen.

                    No other value will be returned to the "status" parameter.

               17.  set_bell = sends a bell for a "read_line" operation at the
                    column  number specified  in  the  "arg1" parameter.   The
                    valid  "io_result"  values  returned to  "status"  in  the
                    "port_param" record (see Sections 5.2 and 5.8.1) are:

                    complete = the bell has been set.

                    failure = no circuit exists.

                    No other value will be returned to the "status" parameter.

               18.  build_normal_circuit =  requests that a normal  circuit be
                    built from  the Pascal  system to an  ISIS Host  using the
                    "aux"  device  type  (see Section  5.0).   The  difference
                    between building a normal circuit and an auxiliary circuit
                    is that a password is required  for building a normal cir-
                    cuit.  The  "data_buffer" must  contain the  login string:
                    "username:Host#;password<cr>".


                                                         PASCAL I/O    Page 72


          Engine Pascal User's Guide                            March 25, 1982



                    Note:  To build  normal circuits, the Pascal  slot must be
                    in an ISIS machine running TYMNET II Node Code.

                    The  parameter  "arg1"  must contain  the  length  of  the
                    "data_buffer".  The  valid "io_result" values  returned to
                    "status" in the "port_param" record  (see Sections 5.2 and
                    5.8.1) are:

                    complete = the circuit has been built.

                    failure = the circuit was not built.  The parameter "arg2"
                         will return an ISIS error code, where:

                         1   Please log in.
                         2   Error, type username.
                         3   Error, type password.
                         4   Username.
                         5   Password.
                         8   Please see your representative
                             if you are having trouble logging in.
                         9   Bad MUD.
                         A   Circuits busy.
                         B   Host not available through net.
                         C   Host out of ports.
                         D   Host down.
                         E   Host shut.
                         F   Try again in 2 minutes.
                         10  Access not permitted.
                         11  No Host specified.
                         12  Bad Host number.
                         13  MUD error.

                         Note that error codes 0 - 5 are caused by an error in
                         the login string contained  in the "data_buffer" (see
                         Section 5.0).  The  error codes 8 -  13 indicate that
                         the request  is correctly formatted, but  the circuit
                         cannot be built for the  specified reason.  Any error
                         code indicates that the login process has been termi-
                         nated, and must be started again from the beginning.

                    program_error = a carriage return is missing at the end of
                         the login string.

                    No other value will be returned to the "status" parameter.












                                                         PASCAL I/O    Page 73


          Engine Pascal User's Guide                            March 25, 1982



          5.8.3 Needle Information                __________________

               Needle information received for building external circuits from
               terminals  is returned  to a  record  of type  "needle_record".
               Note that the "needle_record" type declaration must precede the
               "port_operation"  type declaration  (see  Section 5.8.2).   The
               record "needle_record" has the form:

               TYPE needle_record =
                  record
                      invoice,
                      isis_port,
                      host_number,
                      node_number,
                      originating_host,
                      port_number,
                      user_name_length,
                      TID : integer;
                      user_name: array[1..24] of char
                  end;


          5.8.4 Disconnecting a Port                ____________________

          Ports may be disconnected using an  internal disconnect or an exter-
          nal disconnect.   In either  case, the device  is detached  from its
          port, and any  subsequent operations will return with  a "status" of
          failure.   Exceptions   to  this   are  "get_needle",   "build_aux",
          "set_system",  and "sup_log_msg".   In  these  cases, "status"  will
          return a value of "complete", or  as described in Section 5.8.2.  If
          a read or write operation is  pending when the port is disconnected,
          a "status" of failure is returned for the read or write.


          5.8.5 Break Key Processing                ____________________

          When the Break  Key is detected by  the Nucleus for a  port, several
          things occur.  The output buffer for that port is cleared and a gob-
          bler is sent on the circuit.  Due to inherent delays, data which the
          gobbler could not overtake may still  be output.  The Pascal program
          is notified of a break detect two different ways:

               1.  For any outstanding send operation, and any subsequent send
                   operations before a clear_break is issued, the data is dis-
                   carded.   A break_key  status is  returned  to the  sending
                   process.

               2.  Exactly  one receive  character or  receive line  operation
                   will return with  break_key status.  The data  in the input
                   buffer ahead of  the break will  be discarded.   Any subse-
                   quent receive operation will return normally.

          Note that  Defer Echo  Mode (DEM)  echoing will  still occur  during
          break_key status.


                                                         PASCAL I/O    Page 74


          Engine Pascal User's Guide                            March 25, 1982



          5.8.6 Line Editing                ____________

          The set_system  and set_terminal  operations may be  used to  set up
          line editing characters  (see Section 5.8.2).  Typing  these charac-
          ters at  a terminal  will cause the  specified editing  functions to
          occur.   If  input_break is  set  for  the specified  character,  an
          acknowledgement  "echo"  will  be  output   when  the  character  is
          received.   The  editing  functions  may   only  be  done  during  a
          "get_line" operation, but the acknowledgment will be sent for either
          receive operation.  The editing functions are:

               1.  character delete -- In "get_line"  mode, the buffer pointer
                   will be backed up by  one character, deleting the preceding
                   character.  The acknowledgement is a carat (^).

               2.  word delete -- A  word consists of a string  of any charac-
                   ters, excluding a space or a  tab.  In "get_line" mode, the
                   buffer pointer  will be backed up  to the beginning  of the
                   previous word in the buffer (ASCII  ETB), deleting the com-
                   plete word  but not  the space or  tab preceding  it.  Word
                   delete will  not work if the  buffer pointer is  beyond the
                   end of the buffer.  The acknowledgement is a backslash (\).

               3.  line delete -- In "get_line"  mode, the buffer pointer will
                   be reinitialized,  deleting the entire  line of  text which
                   has been entered.  The acknowledgement is a carriage return
                   and linefeed.

          In "get_char" mode, the edit characters  are transferred to the Pas-
          cal data buffer.  In "get_line" mode,  only the line presently being
          typed may be edited.  A carriage return defines the end of a line.

























                                                         PASCAL I/O    Page 75


          Engine Pascal User's Guide                            March 25, 1982



          SECTION 5.9 Logical Volume Device          _________________________________

          The logical volume  device is a  pseudo-device which  manages multi-
          volume applications of a  Pascal program.  Multi-volume applications
          are of two general types.  The first is an application that uses two
          separate disk devices,  each containing different data,  on separate
          "logical volumes".  The  second is when an application  that can run
          using a  single disk device  runs with  multiple copies of  the same
          data.  These  copies are called  "incarnations" of a  single logical
          volume.   Multiple  incarnations  improve  reliability  because  one
          incarnation  backs up  the other.   They  also improve  performance,
          because each incarnation can perform  separate operations simultane-
          ously.


          5.9.1 Logical Volume IO Parameters                ____________________________

          The "logical_volume_param"  record that  passes control  information
          between the  Pascal program  and the logical  volume device  must be
          defined at  the outset of  the program.   The "logical_volume_param"
          record declaration has the form:

               TYPE logical_volume_param =
                   record
                       operation: logical_volume_operation;
                       status: io_result;
                       status2: integer;
                       arg1: integer;
                       arg2: integer;
                       arg3: integer;
                       arg4: integer
                   end;

          where:

               operation = defines the type of port operation being performed,
                           as  defined in  the logical  volume operation  type
                           declaration (see Section 5.9.2).

               status = returns  the result  of the  logical volume  operation
                        being  performed.   The   "io_result"  parameters  are
                        described for each type of operation.

               status2 = returns the controller  status for the copy  and read
                         operations (see Section 5.9.2).

               arg1 = requires or  returns a value,  depending on the  type of
                      operation being  performed by the logical  volume device
                      (see Section 5.9.2).

               arg2 = requires or  returns a value,  depending on the  type of
                      operation being  performed by the logical  volume device
                      (see Section 5.9.2).



                                                         PASCAL I/O    Page 76


          Engine Pascal User's Guide                            March 25, 1982



               arg3 = requires a value for  the copy operation only  (see Sec-
                      tion 5.9.2).

               arg4 = requires a value for  the copy operation only  (see Sec-
                      tion 5.9.2).


          5.9.2 Logical Volume IO Operations                ____________________________

          A logical volume  operation specified in the Pascal  program must be
          previously defined in a  type declaration at the outset  of the pro-
          gram.  The type of operation is specified in the "operation" parame-
          ter of the  "logical_volume_param" record (see Section  5.9.1).  The
          "logical_volume_operation" type declaration has the form:

               TYPE logical_volume_operation = (initialize, soft_initialize,
                                                info, set_option, copy, read,
                                                write);

          where:

               1.   initialize =  causes the  label records  for all  physical
                    devices to be read, and the logical device and incarnation
                    numbers in  core tables  to be  refreshed.  Note  that all
                    logical   volumes  will   be   initialized,  because   the
                    "unit_number"  parameter in  the  "io"  statement will  be
                    ignored (see Section 5.0).

                    The only  value   returned  to  "status"  in   the  "logi-
                    cal_volume_param" record is:

                    complete = the initialization is complete.

                    The parameter "arg2"  will return the number  of operating
                    physical disks.

               2.   soft_initialize = causes the Physical  Volume Tables to be
                    set as  if an "initialize"  operation had  been performed,
                    but without  reading any volume labels.   Physical volumes
                    may be  made available  for use by  creating a  three word
                    entry for each volume, containing the following:

                         Physical Volume Index
                         Logical Volume Number
                         Incarnation Number

                    The only  value   returned  to  "status"  in   the  "logi-
                    cal_volume_param" record is:

                    complete = the soft initialization has been completed.

                    The parameter  "arg1" contains  the number  of three  word
                    entries  specified.  Note  that  all unspecified  physical
                    volumes are considered down.


                                                         PASCAL I/O    Page 77


          Engine Pascal User's Guide                            March 25, 1982



               3.   info = returns information about each physical disk in the
                    physical disk   table  to   a   record   of  type   "logi-
                    cal_volume_info" (see Section 5.9.3).  The possible values
                    returned to "status" in  the "logical_volume_param" record
                    are:

                    complete = the operation has been completed.

                    failure  = the  value  specified in  "arg1"  is not  large
                         enough.

                    No other value will be returned to the "status" parameter.

                    The parameter  "arg1" contains  the maximum  "data_buffer"
                    size.

                    The parameter "arg2" will return  the number of entries in
                    the  "data_buffer", which  is the  same as  the number  of
                    physical disks in the system.

               4.   setop = causes the value specified  in "arg2" to be set as
                    the  option byte  for  the  physical volume  specified  in
                    "arg1".  The "unit_number" specified in the "io" call will
                    be ignored.  (see  Section 5.0).  The possible  values for
                    "arg2" are:

                         0  clear any previous options for  this physical vol-
                             ume.
                         1   set physical volume to read-only status.
                         2   set physical volume to write-only status.
                         3   set physical volume to unavailable status.

                    The possible  values returned  to "status"  in the  "logi-
                    cal_volume_param" record are as follows:

                    complete = the set option operation has been completed.

                    failure = the specified physical volume is invalid, or the
                         specified option was not in the range 0 - 3.

                    No other value will be returned to the "status" parameter.

               5.   copy = causes data to be read from one physical volume and
                    copied to the  same sector(s) on another  physical volume.
                    The "data_buffer" is used for  the I/O transfer.  No other
                    disk or logical volume operations will be processed during
                    the I/O transfer.  The "copy"  operation requires a larger
                    "logical_volume_param" record (see Section 5.9.1) than the
                    other logical volume  operations, in that it  must contain
                    two extra "arg" parameters.






                                                         PASCAL I/O    Page 78


          Engine Pascal User's Guide                            March 25, 1982



                    The possible  values returned  to "status"  in the  "logi-
                    cal_volume_param" record are as follows:

                    complete = the copy operation has been completed.

                    failure =  either the read or  the write part of  the copy
                         operation has  failed.  The ISIS  error code  will be
                         returned to "arg2".

                    No other value will be returned to the "status" parameter.

                    The parameter "arg1" is used  to specify the sector number
                    where the copy operation is to  begin.  It will return the
                    number of bytes transferred during the copy operation.

                    The parameter  "arg2" is  used to   specify the  number of
                    bytes to  be transferred  during the  copy operation.   If
                    "status" = failure, "arg2"  will return the disk  I/O sta-
                    tus, where:

                       0   Complete.
                       1   (ISIS) Bad memory address.
                       2   (ISIS) No access allowed to this unit.
                       3   (ISIS) Memory read/write protection failure.
                       4   (ISIS) Virtual block out of allocated area on disk.
                       5   (ISIS) Kernel tables VBN past EOV.
                       6   (ISIS) Kernel tables cylinder overflow past EOV.
                       7   Disk seek error.
                       8   Controller error.
                       9   Aborted by (DDT) Quit character.
                       10  Odd byte count.
                       11  Invalid cylinder overflow indication.
                       12  Defective sector in alternate cylinder.
                       13  Defective sector, and no alternate cylinders.
                       14  Cylinder map not readable.
                       15  Defective cylinder; alternate assigned.
                       16  End of file detected.
                       17  End of volume detected.
                       18  Device not available.
                       19  Write attempted on write protected volume.
                       20  Unit attached, but it is write protected.
                       21  Unit attached to another slot.
                       22  Operation ignored for this type of unit.
                       23  Selector timeout.
                       24  Recovered Error Correcting Code (ECC) error.

                    The parameter  "arg3" specifies the physical  volume being
                    copied from.

                    The parameter  "arg4" specifies the physical  volume being
                    copied to.





                                                         PASCAL I/O    Page 79


          Engine Pascal User's Guide                            March 25, 1982



               6.   read = causes data to  be transferred from any incarnation
                    of the  logical volume specified  by "unit_number"  in the
                    "io" call statement to the "data_buffer".  Note that phys-
                    ical volumes that are "write-only"  or that are "unavaila-
                    ble" may not be selected for a Read operation.

                    The possible  values returned  to "status"  in the  "logi-
                    cal_volume_param" record are as follows:

                    complete = the read operation has been completed.

                    failure  = a  read  error has  occurred.   A failure  only
                         occurs  if there  is no  operational incarnation  for
                         this logical  volume.  The  ISIS error  code will  be
                         returned to "arg2".

                    No other value will be returned to the "status" parameter.

                    The value  returned to "status2"  will be the  ISIS status
                    returned from the  disk controller  if "status"  is "fail-
                    ure", and the error code returned  to "arg2" is "8", indi-
                    cating a controller error.  The  controller status will be
                    one of the following:

                         0    System Fault
                         1    ID ECC Error
                         2    Address Error
                         3    Reserved
                         4    Uncorrectable data Error
                         5    Bad Sector
                         6    Protected Sector
                         7    Reserved
                         8    Reserved
                         9    Seek Error
                         10   Reserved
                         11   Drive
                         12   Drive Fault
                         13   Busy
                         14   Not Ready
                         15   Not Selected

                    The parameter  "arg1" is used  to specify the  page number
                    where the read operation is to  begin.  It will return the
                    number of bytes transferred during the read operation.












                                                         PASCAL I/O    Page 80


          Engine Pascal User's Guide                            March 25, 1982



                    The  parameter "arg2"  is used  to specify  the number  of
                    bytes to  be transferred  during the  read operation.   If
                    "status" = failure, "arg2"  will return the disk  I/O sta-
                    tus, where:

                       0   Complete.
                       1   (ISIS) Bad memory address.
                       2   (ISIS) No access allowed to this unit.
                       3   (ISIS) Memory read/write protection failure.
                       4   (ISIS) Virtual block out of allocated area on disk.
                       5   (ISIS) Kernel tables VBN past EOV.
                       6   (ISIS) Kernel tables cylinder overflow past EOV.
                       7   Disk seek error.
                       8   Controller error.
                       9   Aborted by (DDT) Quit character.
                       10  Odd byte count.
                       11  Invalid cylinder overflow indication.
                       12  Defective sector in alternate cylinder.
                       13  Defective sector, and no alternate cylinders.
                       14  Cylinder map not readable.
                       15  Defective cylinder; alternate assigned.
                       16  End of file detected.
                       17  End of volume detected.
                       18  Device not available.
                       19  Write attempted on write protected volume.
                       20  Unit attached, but it is write protected.
                       21  Unit attached to another slot.
                       22  Operation ignored for this type of unit.
                       23  Selector timeout.
                       24  Recovered Error Correcting Code (ECC) error.


               7.   write  =   causes  data   to  be   transferred  from   the
                    "data_buffer" to  all incarnations  of the  logical volume
                    specified  by "unit_number"  in the  "io" call  statement.
                    Note:  Physical volumes  that are "read-only" or  that are
                    "unavailable" may not  be selected for a  Write operation.
                    The possible  values returned  to "status"  in the  "logi-
                    cal_volume_param" record are as follows:

                    complete = the write operation  was successful to at least
                         one of the incarnations.

                    failure = a write error has occurred because there were no
                         operational incarnations  available.  The  ISIS error
                         code will be returned to "arg2"

                    No other value will be returned to the "status" parameter.

                    The parameter  "arg1" is used  to specify the  page number
                    where the write operation is to begin.  It will return the
                    number of bytes transferred during the write operation.




                                                         PASCAL I/O    Page 81


          Engine Pascal User's Guide                            March 25, 1982



                    The  parameter "arg2"  is used  to specify  the number  of
                    bytes to  be transferred during  the write  operation.  If
                    "status" = failure, "arg2"  will return the disk  I/O sta-
                    tus, where:

                       0   Complete.
                       1   (ISIS) Bad memory address.
                       2   (ISIS) No access allowed to this unit.
                       3   (ISIS) Memory read/write protection failure.
                       4   (ISIS) Virtual block out of allocated area on disk.
                       5   (ISIS) Kernel tables VBN past EOV.
                       6   (ISIS) Kernel tables cylinder overflow past EOV.
                       7   Disk seek error.
                       8   Controller error.
                       9   Aborted by (DDT) Quit character.
                       10  Odd byte count.
                       11  Invalid cylinder overflow indication.
                       12  Defective sector in alternate cylinder.
                       13  Defective sector, and no alternate cylinders.
                       14  Cylinder map not readable.
                       15  Defective cylinder; alternate assigned.
                       16  End of file detected.
                       17  End of volume detected.
                       18  Device not available.
                       19  Write attempted on write protected volume.
                       20  Unit attached, but it is write protected.
                       21  Unit attached to another slot.
                       22  Operation ignored for this type of unit.
                       23  Selector timeout.
                       24  Recovered Error Correcting Code (ECC) error.



          5.9.3 Logical Volume Information                __________________________

          When the specified  logical volume operation is  "info" (see Section
          5.9.2), information about the logical volume device will be returned
          to a record of type "vol_info".  The  record "vol_info" has the fol-
          lowing form:

               TYPE vol_info =
                  record
                     read_count,
                     write_count,
                     last_status,
                     error_count,
                     logical_volume_number,
                     incarnation_number,
                     last_error,
                     options: integer
                  end;





                                                         PASCAL I/O    Page 82


          Engine Pascal User's Guide                            March 25, 1982



          where:

               read_count = the number of read operations performed using this
                            volume.

               write_count = the number  of write  operations performed  using
                             this volume.

               last_status = the last non-zero ISIS status for this volume.

               error_count = the number of  errors on  this volume  since ini-
                             tialization.

               logical_volume_number = the logical volume number.

               incarnation_number = the incarnation number.

               last_error = the last ISIS error code for this volume.

               options = the status of the specified logical volume, where:

                   0 = the physical volume is down.
                   1 = the physical volume is up.
                   2 = the physical volume is up and has "read-only" status.
                   3 = the physical volume is up and has "write-only" status.
                   4 = the physical volume is up but unavailable.






























                                                         PASCAL I/O    Page 83


          Engine Pascal User's Guide                            March 25, 1982



          SECTION 5.10 File System          ________________________

          The file system is  a set of classes and monitors  that  provide for
          an efficient method of  organizing files on a disk.  It  may be used
          with a Pascal program that must access several files, such as a user
          data file, an accounting file, or a data file.  It allows for random
          distribution of files on  the disk to maximize the use  of the disk.
          It enables  users to access logical  files by keeping track  of file
          distribution.

          While the user has the ability to  write his own code for organizing
          data in  files, it is  recommended that  he utilize the  file system
          contained in  the library  of existing  routines (see  Section 8.1).
          The routines required for the file  system may be defined by copying
          them from the  library of existing routines (see  Section 8.1).  The
          required file system  components must then  be declared in  the pro-
          gram.


          5.10.1 File System Components                 ______________________

          The file system consists of the following elements.

          Logical File -- a  class that permits access to files  by name.  The
               logical file uses the file directory,  which contains a list of
               the file  names and the  corresponding file numbers,  which the
               file system uses to access the files.  Note that a logical file
               must be declared by the user for each file that is to be opened
               simultaneously.

          Basic File -- a class that permits  access to files by an internally
               assigned number.  It performs read,  write, or other operations
               on the file.  Note that a basic file is used by a logical file,
               and is declared in the logical  file definition.  The user need
               not declare a basic file.

          File Index Manager -- a class which keeps track of the allocation of
               disk space for files on a disk.   It reads file index blocks to
               determine the  real addresses of data  in a particular  file on
               the disk.  Note that a file index manager is used by each basic
               file, and is  declared in the basic file  definition.  The user
               need not declare a file index manager.

          Disk System -- a class  which allows for direct access to  data on a
               disk using the  real address.  Note that a disk  system is used
               by each basic  file and is declared  in the basic  file defini-
               tion.  The user need not declare a disk system.

          Directory -- a monitor which contains the mapping from the user sup-
               plied filename  to the internally  generated file  number.  The
               directory supports  the operations to  add, access,  and remove
               logical  filenames from  the directory  table.   Note that  one
               directory must be declared by the user.



                                                         PASCAL I/O    Page 84


          Engine Pascal User's Guide                            March 25, 1982



          VAT Manager -- a monitor which maintains the Volume Allocation Table
               (VAT), which  is a bit map  indicating the records on  the disk
               that are  or are not  in use.  If  the bit  is set to  "0", the
               record corresponding to that bit is in  use.  If the bit is set
               to "1",  that record is available  for use.  Note that  one VAT
               manager must be declared by the user.

          VFDD Manager -- a monitor which maintains the Volume File Descriptor
               Directory (VFDD).   The VFDD  is a  file containing  a 32  byte
               entry for  each file on the  disk.  Note that one  VFDD manager
               must be  declared by  the user.   The information  contained in
               each of those entries is as follows:

               Primary Index  Pointer (4  bytes) --  points to  the "level  0"
                    block of the file,  which is an index of  the records com-
                    prising that file.  The index in that "level 0" block con-
                    tains a series of 8 byte  entries, where the first 4 bytes
                    indicate the start address of the  next data block and the
                    second 4 bytes indicates the length of that data block, in
                    records.

               File Length  (4 bytes)  -- indicates  the total  length of  the
                    file, in records.

               Unused Byte Count  (4 bytes) -- indicates the  number of unused
                    bytes in a file for preallocation of sequential files.

               Creation Date and Time (4 bytes) --  the date and time the file
                    was created, in seconds after January 1, 1974.

               Last Accessed Date and Time (4 bytes)  -- the date and time the
                    file was last accessed, in seconds after January 1, 1974.

               Last Extended Date and Time (4 bytes)  -- the date and time the
                    file was last extended, in seconds after January 1, 1974.

               Note that 8 unused bytes remain in the VFDD.

          The disk itself is  divided up into records or pages,  each of which
          contains 256 bytes.  The first page of a disk (Page 0) is the volume
          label.  It contains the following information about the disk:

          Volume Number -- the logical volume  number.  It is the address used
               for accessing  a particular disk pack.

          Incarnation Number -- the incarnation, or copy of a volume.

          Disk Size -- the size of the disk, in records or pages.

          Date of Creation  -- the  date the  volume was  created, in  seconds
               after January 1, 1974.





                                                         PASCAL I/O    Page 85


          Engine Pascal User's Guide                            March 25, 1982



          VAT Pointer  -- the  start address  of the  Volume Allocation  Table
               (VAT).

          VFDD Pointer  -- the  start address  of the  Volume File  Descriptor
               Directory (VFDD).



          5.10.2 Using the File System                 _____________________

          The user  may access the logical  file component with  the following
          entry points:

          Create -- used to create a specified file.

          Open -- used to  specify the file to  be operated on by  the logical
               file.  Once  a file has  been opened, the  following operations
               may be performed on that file.

          Close -- closes  the file.  It also  frees the logical file  to open
               another file.

          Set Next Page  -- provides  a point of  origin for  doing sequential
               read and write operations with the file.

          Length -- determines the number of pages in the file.

          Read Sequential Record  -- reads the  next sequential record  in the
               file.

          Read Random Record -- reads a specified record in the file.

          Write Sequential Record --  writes to the next  sequential record in
               the file.

          Write Random Record -- writes to a specified record in the file.

          Delete --  causes the currently opened  file to be removed  from the
               file directory.

















                                                         PASCAL I/O    Page 86


          Engine Pascal User's Guide                            March 25, 1982



          SECTION 5.11 EXRCS1          ___________________

          This section  contains a description  of the commands  available for
          utilizing EXRCS1,  which is a program  used to initialize  disks for
          the Pascal file system (see Section  5.10).  Note that users writing
          their own file system components need not use EXRCS1.

          To run EXRCS1, the user must load the EXRCS1 NIB file into his slot.
          He must  then log into  the Kernel Host and  attach to that  slot to
          enter the EXRCS1 commands.  Each command  consists of a single char-
          acter, followed by  zero or more decimal numbers,  each separated by
          spaces.


          5.11.1 Dump Command                 ____________

          Syntax: D u p
          Description: The Dump command causes page "p" of disk unit "u" to be
               dumped to a terminal.  A page is  equivalent to a block, and is
               equal to 256 bytes of data.


          5.11.2 Write Command                 _____________

          Syntax: F u
          Description: The  Write command causes a  predetermined recognizable
               pattern of alternating disk unit and page numbers to be written
               on every page of the platter on disk unit "u".


          5.11.3 Incarnation Command                 ___________________

          Syntax: I u v u
          Description: The Incarnation command causes  the platter on unit "u"
               to be initialized as incarnation "i" of logical volume "v".  It
               initializes the Volume  Allocation Table (VAT), and  the Volume
               File Descriptor Directory (VFDD).  It also initializes the Sys-
               tem Directory for the Volume 0 disk.


          5.11.4 Quit Command                 ____________

          Syntax: Q
          Description: The Quit command terminates the current EXRCS1 session,
               and zaps the circuit to the disk device.











                                                         PASCAL I/O    Page 87


          Engine Pascal User's Guide                            March 25, 1982



          SECTION 5.12 EXRCS3          ___________________

          This section contains the commands available for using EXRCS3, which
          is used to create null files on a disk initialized using EXRCS1 (see
          Section 5.11).  Note that users writing their own file system compo-
          nents need  not use EXRCS3.   To run EXRCS3,  the use must  load the
          EXRCS1 NIB  file into his  slot.  He must  then log into  the Kernel
          Host and attach to that slot to enter the EXRCS3 commands.

          Each command consists  of a single letter, followed by  zero or more
          arguments.  When required, the first argument specifies one of three
          (0, 1, or 2)  file handlers (fh) that may be  used simultaneously in
          EXRCS3.  There  is no default value  for the file handler.   Most of
          the commands will prompt the user for a filename once invoked.


          5.12.1 Close File Command                 __________________

          Syntax: C <fh>
          Description: The Close File command causes  a file to be closed.  It
               may not be used again until the file is reopened using the Open
               File command.


          5.12.2 Delete File Command                 ___________________

          Syntax: D <fh>
          Description: The  Delete File  command causes a  file to  be deleted
               from the disk.


          5.12.3 Extend File Command                 ___________________

          Syntax: E <fh> <sectors>
          Description: The Extend File command  allocates additional space, in
               sectors, for a file on a disk.


          5.12.4 Free Space Command                 __________________

          Syntax: F <fh>
          Description: The Free Space command causes  the number of free pages
               remaining in a file to be output.


          5.12.5 Initialize Command                 __________________

          Syntax: I
          Description: The  Initialize command  causes the  disk system  to be
               initialized for use during the current EXRCS3 session.






                                                         PASCAL I/O    Page 88


          Engine Pascal User's Guide                            March 25, 1982



          5.12.6 File Length Command                 ___________________

          Syntax: L <fh>
          Description: The File Length command causes the length of the speci-
               fied file to be output.


          5.12.7 Make File Command                 _________________

          Syntax: M <fh>
          Description: The Make File command causes a file to be created using
               the specified file handler.


          5.12.8 Next File Command                 _________________

          Syntax: N <fh>
          Description: The  Next File command causes  the next page  number of
               the file in the specified file handler to be output.


          5.12.9 Open File Command                 _________________

          Syntax: O <fh> <0|1>
          Description: The Open File command causes a  file to be opened for a
               subsequent Read File,  Print File, or Write  File operation.  A
               "0" specified  after the file handler  assigns the file  a "not
               exclusive"  status.  A  "1" specified  after  the file  handler
               assigns the file an  "exclusive" access status.  Only  the cre-
               ator may access an exclusive file.   The system will prompt the
               user for the name of the file to be opened.


          5.12.10 Print Command                  _____________

          Syntax: P <fh> <block#>
          Description: The Print  command causes the contents of  the block to
               be  output to  a terminal,  in hexadecimal.   If the  specified
               block number  is "-1", the  contents of  the next block  in the
               file will  be output.   Note that the  file must  be previously
               opened using the Open File command.


          5.12.11 Quit Command                  ____________

          Syntax: Q
          Description: The Quit command terminates the current EXRCS3 session,
               and zaps the circuit to the disk device.








                                                         PASCAL I/O    Page 89


          Engine Pascal User's Guide                            March 25, 1982



          5.12.12 Read File Command                  _________________

          Syntax: R <fl> <block#>
          Description: The Read File command causes the contents of the speci-
               fied block number to be output to a terminal.  If the specified
               block number is "-1", the text string in the next block will be
               output.  Note that  this command is  best suited for  test pur-
               poses only.


          5.12.13 File Status Command                  ___________________

          Syntax: S <fh>
          Description: The File  Status command indicates whether  the file in
               the specified file handler exists, and  whether it is opened or
               closed.


          5.12.14 Write Command                  _____________

          Syntax: W <fh> <block#>
          Description: The Write command prompts the user for a text string to
               be placed in the specified block  of the file being operated on
               by the  specified file  handler.  The  file must  be previously
               opened using the Open File command.   Note that this command is
               best suited for test purposes only.






























                                                         PASCAL I/O    Page 90


          Engine Pascal User's Guide                            March 25, 1982



          SECTION 6.0 COMPILER ERROR MESSAGES          ___________________________________

          This section contains  a list of  Engine Pascal compiler  error mes-
          sages, and a description of the probable cause of each message.  The
          messages are output  at the terminal after the  program is compiled.
          The display  includes the line number  in the source file  where the
          error occurred, and the error message.   The messages are also added
          to the bottom of the listing file.


          ACTIVE VARIABLE

               An active variable, such as a monitor, a class, a process, or a
               queue, is invalid here.

          ADDRESS OVERFLOW

               This Pascal program is too big to compile.

          AMBIGUOUS IDENTIFIER

               This variable has been defined twice  in the scope of a program
               block.

          AMBIGUOUS LABEL

               This label appears more than once in the case statement.

          ARGUMENT

               The argument list contains an invalid expression.  A comma or a
               right parenthesis may be missing in the argument.

          ARITHMETIC OVERFLOW

               Some constant arithmetic in the program causes overflow.

          ARRAY TYPE

               An array type in this program is incorrectly defined.  A comma,
               the word "of", or square brackets "[ ]" surrounding the list of
               indices omitted from  the type declaration may be  the cause of
               the problem.

          BAD CHARACTER

               This program  contains a  character that  the compiler  doesn't
               recognize.  Invalid  nonprinting characters  are replaced  by a
               question mark.

          BODY

               A "begin" or an "end" is missing from this program block.



                                            COMPILER ERROR MESSAGES    Page 91


          Engine Pascal User's Guide                            March 25, 1982



          CASE STATEMENT

               This case statement  is invalid.  An "of", an  "end",  a colon,
               or a semicolon is missing.

          COMPILER ABORT

               There is a  bug in the  compiler.  Contact your  account repre-
               sentative.

          COMPOUND STATEMENT

               This statement is missing an "end" to match up with a "begin".

          CONSTANT

               This constant is invalid.

          CONSTANT DEFINITION

               This constant is invalid.  An equal sign, a colon, or a semico-
               lon might be misplaced.

          CYCLE STATEMENT

               This cycle statement must be terminated with an "end".

          DECLARATION

               This declaration statement is invalid.

          DIVISION BY ZERO

               Division by zero is undefined.

          ENDLESS COMMENT

               One  of the  comments is  invalid.  A  "*)" or  close quote  is
               needed to terminate it.

          ENUMERATION TYPE

               This enumeration  type is  incorrectly defined.   A comma  or a
               right parenthesis might be missing.

          EXPRESSION

               This expression is invalid.  The parentheses might not be prop-
               erly paired.







                                            COMPILER ERROR MESSAGES    Page 92


          Engine Pascal User's Guide                            March 25, 1982



          FOR STATEMENT

               This "for" statement is invalid.   The ":=", "to", "downto", or
               the "do" may be incorrect.

          FUNCTION

               The name used for this function is invalid.

          ID STATEMENT

               This statement is invalid.   It should be an  assignment state-
               ment or a call statement.

          IF STATEMENT

               An "if" is not properly paired with a "then" in this statement.

          INIT STATEMENT

               The items in this initialization  statement should be separated
               by commas.

          INVALID CALL

               This procedure call is invalid.

          INVALID CONSTANT

               A constant is missing or incorrectly defined.

          INVALID ENTRY VARIABLE

               An  entry variable  of  this type  is not  allowed,  or is  not
               allowed here.

          INVALID FUNCTION TYPE

               This function cannot return a value of this type.

          INVALID INDEX TYPE

               This type cannot be used as the subscript of an array.

          INVALID INITIALIZATION

               Only monitors, classes, and processes may be initialized.

          INVALID LABEL

               This label is of the wrong type for this statement.





                                            COMPILER ERROR MESSAGES    Page 93


          Engine Pascal User's Guide                            March 25, 1982



          INVALID MEMBER TYPE

               A set of this type is invalid.

          INVALID NAME USAGE

               This name is not valid in the scope of this program block.  For
               example, it  is not  valid to  access or  name a  function from
               within that function declaration.

          INVALID NESTING

               This program  contains invalid nesting.  "With"  statements may
               be  defined within  functions,  procedures, monitors,  classes,
               processes, and other  "with" statements.  Functions  and proce-
               dures may be  defined within monitors, classes,  and processes.
               Monitors, classes,  and processes may  be defined  within other
               monitors, classes, and processes.

          INVALID NUMBER

               This number is invalid, or too big.

          INVALID PARAMETER

               One of the  parameters being passed is invalid.  It  may be due
               to passing  a monitor, a class,  or a process  incorrectly.  It
               may also be due to passing a queue or a constant as a variable.

          INVALID SELECTION

               A  "."  may not  be  used  to  select  part of  this  variable.
               Records, classes, and monitors are  the only types of variables
               that may be selected from.

          INVALID STRING

               This string  may be  too long,  of an  odd length,  or of  zero
               length.  It may  also cross a line boundary, or  it may contain
               an invalid character.  Lastly, it  may contain an incorrect use
               of the character building construct "(:number:)".

          INVALID SUBRANGE

               A subrange may only be taken  from an index type.  In addition,
               the maximum value  specified must not be less  than the minimum
               allowed.

          INVALID SUBSCRIPTING

               Only arrays may be subscripted.





                                            COMPILER ERROR MESSAGES    Page 94


          Engine Pascal User's Guide                            March 25, 1982



          INVALID WITH VARIABLE

               A "with" statement may only reference a record, class, or moni-
               tor.

          LABEL LIST

               The list  of constants  in this case  statement is  invalid.  A
               comma may be missing.

          LABEL VALUE TOO LARGE

               This label is too large or too small for the case statement.

          LONG ENUMERATION

               This enumeration type is too big.

          MISSING ARGUMENT

               The argument list given in this  invocation is shorter than the
               argument list in the corresponding declaration.

          NESTED PROCESS

               Nested processes are invalid.  Processes may only be defined in
               the main process.

          NOT A FUNCTION

               Only  functions return  a value.   Procedures do  not return  a
               value.

          NOT A ROUTINE

               Argument lists are only allowed in routines.

          NOT A VARIABLE

               A variable is required here.

          NOT ASSIGNABLE

               A value may only be assigned to a variable.

          NOT IMPLEMENTED

               This feature is not implemented in Engine Pascal.

          ODD LENGTH STRING TYPE

               String types must be of an even length.




                                            COMPILER ERROR MESSAGES    Page 95


          Engine Pascal User's Guide                            March 25, 1982



          OPERAND TYPE

               One of the arguments to this operator is invalid.

          OUT OF REGISTERS

               The compiler is out of  registers, probably because the program
               is nested too  deeply.  Try changing the deeply  nested code to
               procedures or functions.

          PARAMETER

               These parameters are  incorrectly listed.  Check for  a missing
               colon or semicolon,  or a missing right parenthesis  at the end
               of the declaration.

          ***PASCAL COMPILER BUG

               There is  a bug in the  Pascal compiler.  Contact  your account
               representative.

          PROCEDURE

               The name chosen for this procedure is invalid.

          PROCESS STACK USAGE

               Stack sizes may only be specified for processes.

          QUEUE VARIABLE

               Queue variables are only valid in monitors.

          RANGE ERROR

               This constant  is out of  range in the  context in which  it is
               used.

          RECORD ENUMERATION

               Enumeration types cannot be defined in a record definition.

          RECORD TYPE

               This record  type declaration  is invalid.   Check for  colons,
               semicolons, and the word "end" terminating the record.

          REPEAT STATEMENT

               This repeat statement is missing the word "until".

          ROUTINE

               This function or procedure definition is missing a semicolon.


                                            COMPILER ERROR MESSAGES    Page 96


          Engine Pascal User's Guide                            March 25, 1982



          SEQUENTIAL PROGRAM

               This sequential program is incorrectly declared.

          SET TYPE

               This set type declaration is invalid.   Be sure that the decla-
               ration contains the phrase "set of".

          STACK LENGTH

               Stack length must be specified as an integer value.

          STATEMENT

               This line of  code is not being  read as a statement.   Be sure
               that the previous line ends with a semicolon.

          STATEMENT LIST

               This list of statements must terminate with "end".

          STRING ARGUMENT TOO LONG

               This string is too long, or the  argument it is being passed to
               is too short.

          SUBRANGE TYPE

               This subrange  type is  invalid.  Check for  the proper  use of
               "..".

          TABLE OVERFLOW

               One  of the  tables  in the  compiler  is  full.  Contact  your
               account representative.

          TERMINATION

               This program must end with a period.

          TOO MANY ARGUMENTS

               The argument list in  this invocation is longer  than the argu-
               ment list in the declaration.

          TOO MUCH CODE

               This program is too big to compile.







                                            COMPILER ERROR MESSAGES    Page 97


          Engine Pascal User's Guide                            March 25, 1982



          TOO MUCH STACK

               The system cannot support the stack space required by this pro-
               gram.

          TYPE

               The word "type" is expected here.

          TYPE DEFINITION

               This type declaration is invalid.  Check the equal sign and the
               semicolon.

          UNRESOLVED ROUTINE

               The routine just referenced is undefined.

          VARIABLE

               This variable is  invalid.  Check the location of  the ".", and
               be sure that all square brackets "[ ]" are properly paired.

          VARIABLE DECLARATION

               This variable declaration is invalid.  Check the colon and sem-
               icolon.

          WHILE STATEMENT

               This "while"  statement is  invalid.  Check  for the  word "do"
               after the conditional part of the statement.

          WITH STATEMENT

               This  with statement  is  invalid.  The  elements  in the  list
               should be separated by commas, and the statement should be ter-
               minated by the word "do".


















                                            COMPILER ERROR MESSAGES    Page 98


          Engine Pascal User's Guide                            March 25, 1982



          SECTION 7.0 CRASH CODES          _______________________

          This section contains a list of the crash codes that are output when
          using the  Crash Code command in  the DDT (see Section  3.6.8).  The
          list includes the code,  a reason for the crash, and  the module and
          routine where the crash occurred.

          CODE   REASON                                        MODULE  ROUTINE          ____   ______                                        ______  _______
           00    Power failure (hardware).
           01    Manual restart (software).
           01    Manual restart simulation.                    PSEUDO  CRSTRT
           03    GCI crash.                                    BUFFER  GCI
           04    Buffer number out of range.                   BUFFER  MCI
           05    WCI crash.                                    BUFFER  WCI
           06    All bufferlets are drained.                   BUFFER  WRE
           06    Illegal buffer number, or end of buffer.      BUFFER  GCPEEK
           0A    Unknown crash reason.  Usually occur in
                  FRONT.LIB, caused by illegal messages from
                  ISIS rings.                                  CRASH   CRASH
           0D    Buffer number out of range.                   BUFFER  EMPTY
           0E    Parity error.
           0F    Free list exhausted.                          TIMOUT  TOPOUT
           10    Dispatcher crash.
           11    Illegal instruction.
           12    Illegal SVC.
           13    System crash.
           14    Protection violation.
           15    Nonrecoverable device check.
           20    (Macro) Pascal code return address less
                  than SEG2.                                   NUCLUS  RABUG
           21    (Macro) Invalid process header address.       NUCLUS  HDBUG
           22    Not enough memory for process header or
                  gate.                                        NUCLUS  NEWCOR
           23    Process already in a queue.                   NUCLUS  QUEPUT
           24    Not enough memory to allocate process stack.  NUCLUS  CORALO
           25    Not enough memory to allocate process stack.  NUCLUS  RNINTC
           26    Pascal program error (error number in R6).    NUCLUS  RNSYSE
           27    Process header address is zero.  May be
                  caused by a call to a monitor which has not
                  been initialized.                            NUCLUS  RDYENT
           28    Monitor nesting became negative.  May be
                  caused by a "continue" statement in a non-
                  entry monitor.                               NUCLUS  GATLEA
           29    Queue variable already in use.                NUCLUS  GATDEL
           2A    Monitor nesting became negative.  May be
                  caused by a "continue" statement in a non-
                  entry  monitor.                              NUCLUS  GATCON
           30    Needle on port already in use.
           31    No SVC blocks left (configuration error).     DSKDRV  DTSTRT







                                                        CRASH CODES    Page 99


          Engine Pascal User's Guide                            March 25, 1982



          SECTION 8.0 PROGRAM WRITING AIDS          ________________________________

          This section contains a series of aids designed to simplify the task
          of the programmer writing Engine Pascal code.  Included is a listing
          of existing Engine Pascal code available to users.  Also included is
          a series of macros which may be used with the VUE editor on a TYMCOM
          10 to simplify the writing of Engine Pascal code.


          SECTION 8.1 Library of Existing Routines          ________________________________________

          A file  containing a  list of  existing Engine  Pascal code  that is
          available to Pascal  users is being developed. It  will be available
          on any TYMCOM-10.  A  listing of the file may be  obtained by enter-
          ing:

               -type(epascal)paslib.inf


          SECTION 8.2 VUE Macros          ______________________

          A series of macros have been developed for writing Pascal code using
          the VUE editor on a TYMCOM 10.  They enable the programmer to create
          syntactical coding structures  very easily. This section  contains a
          description of these macros, which may  be used as an initialization
          file, or as an adjunct to an initialization file.

          The  following functions  may  be invoked  by  typing  the Meta  key
          (Escape) and a mnemonic uppercase character, as follows:

          Meta+Key    Mnemonic          Function          ________    ________          ________
              B       Block             Creates an  empty BEGIN-END  block. If
                                        the cursor  is pointing  at the  first
                                        character of a statement,  that state-
                                        ment will be embedded in the block.

              C       Case              Creates an empty CASE-END statement.

              E       Else              Creates an  empty IF-THEN-ELSE  state-
                                        ment. If the cursor is pointing at the
                                        first character  of a  statement, that
                                        statement will be embedded in the THEN
                                        clause of the block.

              F       Function          Creates an empty FUNCTION definition.

              I       If                Creates an empty IF-THEN statement. If
                                        the cursor  is pointing  at the  first
                                        character of a statement,  that state-
                                        ment  will  be embedded  in  the  THEN
                                        clause of the statement.

              P       Procedure         Creates an empty PROCEDURE definition.



                                              PROGRAM WRITING AIDS    Page 100


          Engine Pascal User's Guide                            March 25, 1982



              R       Repeat            Creates an  empty REPEAT-UNTIL  state-
                                        ment. If the cursor is pointing at the
                                        first character  of a  statement, that
                                        statement  will  be  embedded  in  the
                                        REPEAT statement.

              W       While             Creates an  empty DO-WHILE  statement.
                                        If the cursor is pointing at the first
                                        character of a statement,  that state-
                                        ment  will be  embedded  in the  WHILE
                                        statement.

              Y       cYcle             Creates an empty CYCLE statement.

             CR       Carriage Return   Appends  a  semicolon to  the  current
                                        statement,  and  moves the  cursor  to
                                        where the next statement may begin.


          The following functions may be invoked by depressing the Control Key
          and the Meta key with the specified character:

          Meta+Key    Mnemonic          Function          ________    ________          ________
          Control P   Procedure         Creates  an   empty  ENTRY   procedure
                                        block.

          Control F   Function          Creates an empty ENTRY function block.

          The user  should copy  the file  (EPASCAL) PASVUE.MAC  into his  own
          directory, and either rename it VUE.INI  or append it to his VUE.INI
          file, or include the following command in his own VUE.INI file:

               $xexecute file?mpasvue.mac

          where:

               $x = Meta-X

               ?m = Control-M

















                                              PROGRAM WRITING AIDS    Page 101


          Engine Pascal User's Guide                            March 25, 1982



          SECTION 9.0 DEBUGGING HINTS          ___________________________

          This section  contains a  description of  the methods  for examining
          permanent variable storage as a means  of debugging an Engine Pascal
          program.  Included  are procedures for examining  permanent variable
          storage of  monitors, processes, and  classes.  Note that  the cross
          reference compiler  option must  be used  to determine  the relative
          hexadecimal offset of monitors and processes in a program.  In addi-
          tion, the user  must access the Pascal Nucleus and  the symbol table
          using NAD.

          The DDT  commands may also  be used  for debugging an  Engine Pascal
          program.  They are discussed in Section 3.6.


          SECTION 9.1 Examining Permanent Variable Storage of Monitors          ____________________________________________________________

          The following steps must be undertaken to examine the permanent var-
          iable storage of monitors.

               1.   Determine the  size of the  Pascal program (PS),  which is
                    contained in the first word of the program prefix.

               2.   Determine the relative address of the start of the monitor
                    (RMA), which is  in the right hand column  of the compiler
                    cross reference  listing at  the variable  declaration for
                    the monitor type.

               3.   Determine the monitor value offset (MV) of a specific var-
                    iable in a monitor from the compiler cross reference list-
                    ing.

               4.   The monitor address (MA) is:

                    <MA> = 20000 + <PS> + 4 + <RMA>   (all in hexadecimal)

               5.   A specific variable in the monitor is located at:

                    <MA> + <MV>


          SECTION 9.2 Examining Permanent Variable Storage of Processes          _____________________________________________________________

          The following steps must be taken  to examine the permanent variable
          storage of processes:

               1.   To get a  list of process header  record addresses (PHRA),
                    the user must enter the following:

                    :r psprc,2*<total number of processes in the program>

                    Each process header record address will be one halfword in
                    length.  The user  can determine the process  to be viewed
                    from the order of process initialization in the program.


                                                   DEBUGGING HINTS    Page 102


          Engine Pascal User's Guide                            March 25, 1982



               2.   To determine the starting address  of the permanent varia-
                    bles in a specific process (SPVA), the user must enter the
                    following:

                    :r <PHRA>+varptr,4

                    where "varptr" is a relative address in the process header
                    record which points to the  start address of the permanent
                    variable table of a process.  Note that the Pascal Nucleus
                    NIB file  must be  used to  reference the  symbol "varptr"
                    (see Section 3.6).

               3.   To examine  a specific permanent  variable, the  user must
                    first determine  the permanent  variable relative  address
                    (PVRA) from the compiler cross reference listing.  He must
                    then enter the following:

                    :r <SPVA> + <PVRA>,<size of variable list, in bytes>


          SECTION 9.3 Examining Permanent Variable Storage of Classes          ___________________________________________________________

          The following steps must be taken  to examine the permanent variable
          storage in classes if the classes reside in monitors or processes.

               1.   Determine the slot address of the permanent variables of a
                    monitor (MA),  or a process  (SPVA) (see Sections  9.1 and
                    9.2).

               2.   Determine the relative  class address (RCA) of  the perma-
                    nent variable used in the class  by referring to the cross
                    reference file.  The real  address (physical slot address)
                    of the start of a class in a monitor is equal to:

                    <MA> + <RCA>

                    The real address (physical slot address) of the start of a
                    class in a process is equal to:

                    <SPVA> + <RCA>

               3.   Determine the relative variable address  (RVA) of a varia-
                    ble in a  class by referring to the  cross reference file.
                    The real  address (physical slot  address) of  a permanent
                    variable in a monitor is equal to:

                    <MA> + <RCA> + <RVA>

                    The real  address (physical slot  address) of  a permanent
                    variable in a process is equal to:

                    <SPVA> + <RCA> + <RVA>




                                                   DEBUGGING HINTS    Page 103


          Engine Pascal User's Guide                            March 25, 1982
                                         Index


          ACECHO  ................................................  11
          Aux Device  ............................................  47
          AUXTIM  ................................................  7

          Basic File  ............................................  84
          BBMSG  .................................................  7
          BFLT.P  ................................................  8
          Break Key Processing  ..................................  74
          Build Aux Circuit (Port IO Operation)  .................  70
          Build Normal Circuit (Port IO Operation)  ..............  72

          CCONST  ................................................  7, 60
          Character Delete  ......................................  75
          Classes  ...............................................  24, 34,
           103
          CLCOR  .................................................  8
          Clear Break (Port IO Operation)  .......................  68
          Close File Command  ....................................  88
          Command File  ..........................................  13, 44
          Compiler Error Messages  ...............................  91
          Compiler Options  ......................................  3, 20, 34
          Compiling a Pascal Program  ............................  3
          CONCAT Program  ........................................  35, 36,
           42, 44, 45
          Concurrent Pascal Problem  .............................  25
          Concurrent Pascal Program  .............................  27
          Control Table Area (CTA)  ..............................  22
          Copy (Logical Volume IO Operation)  ....................  78
          CPAS1  .................................................  3, 4
          Crash Code Command  ....................................  21, 99
          Crash Codes  ...........................................  21, 99
          Crash Device  ..........................................  47, 61
          Crash Error Codes  .....................................  61, 62
          Crash IO Operations  ...................................  61, 63
          Crash IO Parameters  ...................................  61, 62, 63
          Crash IO Results  ......................................  62, 63
          Crash Register Command  ................................  21
          CRERR  .................................................  10
          CRSTOP  ................................................  10

          DDISK  .................................................  9
          Debugging Hints  .......................................  102
          Defer Echo Mode  .......................................  74
          Delete File Command  ...................................  88
          Designing a Concurrent Program  ........................  25
          Detect (Port IO Operation)  ............................  69
          Device Types  ..........................................  47
          Directory  .............................................  84
          Disconnect (Port IO Operation)  ........................  67
          Disconnecting a Port  ..................................  74
          Disk Device  ...........................................  7, 9, 11,
           47, 48




                                                             Index    Page 104


          Engine Pascal User's Guide                            March 25, 1982
                                         Index


          Disk IO Operations  ....................................  48
          Disk IO Parameters  ....................................  7, 48, 50,
           51
          Disk IO Results  .......................................  50, 51
          Disk System  ...........................................  84
          Disk Unit Information  .................................  48, 49
          DPRINT  ................................................  9
          DTAPE  .................................................  9
          DTRACE  ................................................  7
          Dump Command  ..........................................  87
          Dynamic Debugging Tool (DDT)  ..........................  17, 18,
           22, 99, 102

          ECOUNT  ................................................  8, 23
          Engine Code Load Address  ..............................  5
          Engine Pascal Environment  .............................  24
          Error Messages  ........................................  91
          Examining Permanent Variable Storage of Classes  .......  103
          Examining Permanent Variable Storage of Monitors  ......  102
          Examining Permanent Variable Storage of Processes  .....  102
          Exclude Command  .......................................  43
          Execute Command  .......................................  18
          Existing Routines  .....................................  100
          EXRCS1  ................................................  87, 88
          EXRCS3  ................................................  88
          Extend File Command  ...................................  88

          File Index Manager  ....................................  84
          File Length Command  ...................................  89
          File Status Command  ...................................  90
          File System  ...........................................  84, 87
          File System Components  ................................  84
          Format and Structure of Compiled Code  .................  5
          Free Space Command  ....................................  88

          Get Char (Port IO Operation)  ..........................  65, 75
          Get Line (Port IO Operation)  ..........................  66, 75
          Get Needle (Port IO Operation)  ........................  71

          Halt Command  ..........................................  18
          Hang Kernel Port Command  ..............................  23
          History of Engine Pascal  ..............................  1
          HOST0  .................................................  6
          HSTATE  ................................................  11

          Incarnation Command  ...................................  87
          Include Command  .......................................  43, 44
          Info (Logical Volume IO Operation)  ....................  78
          Init File  .............................................  13, 14
          Initialize (Logical Volume IO Operation)  ..............  77
          Initialize Command  ....................................  88
          Input/Output Device Types  .............................  47
          IO Results  ............................................  47, 50,



                                                             Index    Page 105


          Engine Pascal User's Guide                            March 25, 1982
                                         Index


           53, 56, 59, 62, 64, 65, 76, 77
          IOMXRT  ................................................  8
          ISIS-II Reference Manual  ..............................  2, 18
          ISIS Kernel Host  ......................................  17

          Job and Slot Status Information  .......................  17

          Library of Existing Routines  ..........................  84
          Line Delete  ...........................................  75
          Line Editing  ..........................................  65, 75
          LMAC Command  ..........................................  22
          LOADII  ................................................  15, 16
          LOADII User's Guide  ...................................  2, 6
          Loading an Engine Slot  ................................  6
          Logical File  ..........................................  84
          Logical Volume Device  .................................  11, 47, 76
          Logical Volume Information  ............................  78, 82
          Logical Volume IO Operations  ..........................  76, 77, 82
          Logical Volume IO Parameters  ..........................  76, 77, 78
          LPROMPT  ...............................................  10
          LVDSKO  ................................................  11
          LVNDSK  ................................................  11
          LVNQUE  ................................................  11
          LVPDKO  ................................................  11

          Make File Command  .....................................  89
          Master Directory Command  ..............................  43, 44
          MAXCHAR  ...............................................  8
          Memory Access Controller (MAC)  ........................  22
          Memory Use Considerations  .............................  34
          MINPRO  ................................................  10
          Modules  ...............................................  38
          Monitors  ..............................................  10, 24,
           25, 27, 28, 34, 102

          NAD  ...................................................  13, 14,
           17, 36, 102
          Name Command  ..........................................  43
          Naming Conventions for Variables  ......................  41
          NAUX  ..................................................  6, 10, 59
          NDTRB  .................................................  7
          Needle Information  ....................................  74
          Needle Record  .........................................  74
          Next File Command  .....................................  89
          NIB File  ..............................................  3, 4, 5,
           13, 14, 15, 16, 17, 36, 103
          NTERM  .................................................  6, 10, 59

          OBJNIB  ................................................  4, 36
          Open File Command  .....................................  89






                                                             Index    Page 106


          Engine Pascal User's Guide                            March 25, 1982
                                         Index


          Overview  ..............................................  1

          Pascal I/O  ............................................  46
          Pascal Nucleus  ........................................  6, 8, 13,
           14, 23, 24, 36, 59, 74, 102, 103
          Pascal User Manual and Report  .........................  2
          PCNTFL  ................................................  8
          Permanent Variable Storage of Classes  .................  103
          Permanent Variable Storage of Monitors  ................  102
          Permanent Variable Storage of Processes  ...............  102
          Permanent Variables  ...................................  34, 102,
           103
          Port Device  ...........................................  64
          Port IO Operations  ....................................  7, 8, 64,
           65, 74, 75
          Port IO Parameters  ....................................  7, 64, 65
          PPN  ...................................................  43
          Print Command  .........................................  89
          Printer Device  ........................................  9, 47, 55
          Printer IO Operations  .................................  55, 57
          Printer IO Parameters  .................................  57
          Printer IO Results  ....................................  56, 57
          Processes  .............................................  10, 24,
           25, 29, 31, 102
          Program Blocks  ........................................  39
          Program Files  .........................................  35
          Program Structure  .....................................  37
          Program Writing Aids  ..................................  100
          PSD  ...................................................  20
          PSW  ...................................................  20

          Query Background Command  ..............................  20
          Query CPU Command  .....................................  22
          Query Foreground Command  ..............................  20
          Query History Command  .................................  23
          Query Host Command  ....................................  22
          Query Port Command  ....................................  23
          Query Who Command  .....................................  22
          Quit Command  ..........................................  18, 87, 89

          Read (Logical Volume IO Operation)  ....................  80
          Read Entry Table Command  ..............................  8, 23
          Read File Command  .....................................  90
          Recommended Coding Style  ..............................  35
          Recommended Standards  .................................  35
          Related Publications  ..................................  2
          Remote Command  ........................................  44
          Requirements for Using Engine Pascal  ..................  1








                                                             Index    Page 107


          Engine Pascal User's Guide                            March 25, 1982
                                         Index


          Routines  ..............................................  39

          Sample Tymfile  ........................................  12
          Send (Port IO Operation)  ..............................  67
          Send B1 Msg (Port IO Operation)  .......................  71
          Set Bell (Port IO Operation)  ..........................  72
          Set Break Char (Port IO Operation)  ....................  72
          Set System (Port IO Operation)  ........................  68, 75
          Set Terminal (Port IO Operation)  ......................  69, 75
          Setop (Logical Volume IO Operation)  ...................  78
          Slot Command  ..........................................  22
          Slot Status Information  ...............................  17
          SLOTSZ  ................................................  6
          Soft Initialize (Logical Volume IO Operation)  .........  77
          Stack Variables  .......................................  34
          Statements  ............................................  39
          Status Command  ........................................  18
          Storage Allocation  ....................................  34
          Substitute Command  ....................................  44
          Suggested Practices  ...................................  35
          Sup Log Msg (Port IO Operation)  .......................  72
          SYSGEN Reference Manual  ...............................  2, 6
          System Device  .........................................  7, 47, 58
          System Information  ....................................  58, 59
          System IO Operations  ..................................  7, 58, 60
          System IO Parameters  ..................................  58, 59, 60
          System IO Results  .....................................  59, 60

          Tape Device  ...........................................  7, 9, 47,
           52
          Tape Info Record  ......................................  53
          Tape IO Operations  ....................................  52, 54
          Tape IO Parameters  ....................................  7, 52, 53,
           54
          Tape IO Results  .......................................  53, 54
          Tape Unit Information  .................................  52, 53
          Temporary Variables  ...................................  34
          Terminal Device  .......................................  47
          Terminal Info (Port IO Operation)  .....................  70
          The Architecture of Concurrent Programs  ...............  1, 2
          Tools and Utilities  ...................................  5
          Tools and Utilities.  ..................................  2
          Tymfile  ...............................................  12, 13, 14
          Tymfile Parameters for the Pascal Nucleus  .............  6
          Type Declarations  .....................................  37

          Using the File System  .................................  86

          Variable Name Conventions  .............................  41
          VAT Manager  ...........................................  85
          VFDD Manager  ..........................................  85
          Volume Allocation Table (VAT)  .........................  85




                                                             Index    Page 108


          Engine Pascal User's Guide                            March 25, 1982
                                         Index


          Volume File Descriptor Directory (VFDD)  ...............  85
          VUE Macros  ............................................  100

          Word Delete  ...........................................  75
          Write (Logical Volume IO Operation)  ...................  81
          Write Command  .........................................  87, 90
          Writing a Concurrent Pascal Program  ...................  24

          Yellow Ball (Port IO Operation)  .......................  69

          Zap (Port IO Operation)  ...............................  72
          Zap Command  ...........................................  18












































                                                             Index    Page 109






                                  READER'S COMMENT FORM

                               Engine Pascal User's Guide
                              Publications Order Number 593


           How was this document used?

           _____    Marketing tool

           _____    Technical reference

           _____    Other ____________________________________________________


                          ____________________________________________________


           Your comments on this document are  welcome.  Please list page num-
           bers where appropriate and any suggestions for further improvement.




























           Please send this form to: Network Technology Division
                                     Documentation
                                     TYMSHARE, Inc.
                                     10261 Bubb Road
                                     Cupertino, CA  95014





   q6x"